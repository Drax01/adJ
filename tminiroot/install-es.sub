#	$OpenBSD: install.sub,v 1.815 2015/03/08 13:15:00 deraadt Exp $
#
# Copyright (c) 1997-2009 Todd Miller, Theo de Raadt, Ken Westerback
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Copyright (c) 1996 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Jason R. Thorpe.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

# OpenBSD install/upgrade script common subroutines and initialization code

usage() {
	echo "uso: ${0##*/} [-a] [-f filename]" >&2
	exit 1
}

# Parse parameters
AUTO=false
RESPFILE=
while getopts "af:" opt; do
	case $opt in
	a)	AUTO=true;;
	f)	RESPFILE=$OPTARG;;
	*)	usage;;
	esac
done
shift $((OPTIND-1))
[ $# = 0 ] || usage

. install.md

set_term() {
	local _layouts

	export TERM=${TERM:-${MDTERM:-vt220}}
	if [[ -n $CONSOLE ]]; then
		ask "¿Terminal?" $TERM
		export TERM=$resp
	else
		[[ -x /sbin/kbd ]] || return
		_layouts=$(bsort $(kbd -l | egrep -v "^(user|tables|encoding)"))
		while :; do
			ask "Elija distribución de teclado ('?' o 'L' para ver lista)" "predefinida"
			case $resp in
			"?"|L|l) echo "Distribuciones disponibles: $_layouts";;
			predefinida) return;;
			*)	kbd $resp && { echo $resp >/tmp/kbdtype; return; };;
			esac
		done
	fi
}

stripcom () {
	local _l

	[[ -f $1 ]] || return

	set -o noglob
	while read _l; do
		[[ -n ${_l%%#*} ]] && echo $_l
	done <$1
	set +o noglob
}

quote() (
	for a; do
		alias Q=$a; a=$(alias Q); print -rn -- " ${a#Q=}"
	done | sed '1s/ //'
	echo
)

# Create a temporary directory based on the supplied directory name prefix.
tmpdir() {
	local _i=1 _dir
	until _dir="${1?}.$_i.$RANDOM" && mkdir -- "$_dir" 2>/dev/null; do
		((++_i < 10000)) || return 1
	done
	echo "$_dir"
}

scan_dmesg() {
	bsort $(sed -n "$1" /var/run/dmesg.boot)
}

scan_disknames() {
	local IFS=,
	bsort $(for _n in $(sysctl -n hw.disknames); do echo "${_n%%:*} "; done | sed -n "$1")
}

get_dkdevs () {
	echo $(scan_disknames "${MDDKDEVS:-/^[sw]d[0-9][0-9]* /s/ .*//p}")
}

get_cddevs () {
	echo $(scan_disknames "${MDCDDEVS:-/^cd[0-9][0-9]* /s/ .*//p}")
}

get_ifdevs() {
	local _if _iflist=$(rmel vlan $(ifconfig -C))

	for _if in $(ifconfig "$@" 2>/dev/null |
		sed -n 's/^\([^[:space:]]*\):.*/\1/p'); do
		isin ${_if%%+([0-9])} $_iflist || echo $_if
	done
}

get_drive() {
	ask_which "$1" "medio usará para $_SMODE" "$2" "$3"
	[[ $resp == listo ]] && return 1
	makedev $resp || return 1
	return 0
}

mount_mnt2() {
	local _dev=$1 _opts _file=/tmp/parts.$1 _parts

	disklabel $_dev 2>/dev/null |
		sed -En '/swap|unused/d;/^  [a-p]: /p' >$_file

	_parts=$(sed 's/^  \(.\): .*/\1/' $_file)
	set -- $_parts
	(($# == 0)) && { echo "No hay subparticiones. $_dev."; return 1; }

	if isin "c" $_parts; then
		resp=c
	elif (($# == 1)); then
		resp=$1
	else
		cat $_file
		ask_which "$_dev partición" "tiene componentes para $_SMODE" \
			'$(disklabel '$_dev' 2>/dev/null |
			sed -En '\''/swap|unused/d;/^  ([a-p]): .*/s//\1/p'\'')'
		[[ $resp == listo ]] && return 1
	fi

	grep -q "^  $resp: .*MSDOS" $_file && _opts="-s"
	mount -o ro,$_opts /dev/$_dev$resp /mnt2
}

askpass() {
	stty -echo
	IFS= read -r resp?"$1 "
	stty echo
	echo
}

rm -df /tmp/lock

lock() {
	while ! mkdir /tmp/lock 2>/dev/null && sleep .1; do done
}

unlock() {
	rm -d /tmp/lock 2>/dev/null
}

retrap() {
	trap 'kill -KILL $cppid 2>/dev/null; echo; stty echo; exit 0' \
		INT EXIT TERM
}

rm -f /tmp/update

if ! $AUTO; then
	# Start listener process looking for dmesg changes
	(
		while :; do
			lock
			if test -e /tmp/update && [[ "`dmesg`" != "`cat /tmp/update`" ]]; then
				dmesg >/tmp/update
				kill -TERM 2>/dev/null $$ || exit 1
			fi
			unlock
			sleep .5
		done
	) |&
	cppid=$!

	retrap
fi

_ask() {
	local _q=$1 _def=$2 _int _redo=0 _pid

	lock; dmesg >/tmp/update; unlock
	echo -n "${_q:+$_q }${_def:+[$_def] }"
	_autorespond "$_q" "$_def" && echo "$resp" && return
	trap "_int=1" INT
	trap "_redo=1" TERM
	read resp
	lock; rm /tmp/update; unlock
	if ((_redo)); then
		stty raw
		stty -raw
	else
		case $resp in
		!)	echo "'exit' para regresar."
			sh
			_redo=1
			;;
		!*)	eval "${resp#?}"
			_redo=1
			;;
		esac
	fi
	retrap
	((_int)) && kill -INT $$
	: ${resp:=$_def}
	return $_redo
}

# Search question in $RESPFILE, return answer in $resp
#
# - split question and answer at leftmost =
# - strip leading/trailing blanks
# - compare questions case insensitive
# - ignore empty and comment lines and lines without =
# - return default answer if provided and none is found in file
# - treat empty/missing/multiple answers as error and exit
#
# $1 = the question to search for
# $2 = the default answer
#
_autorespond() {
	typeset -l _q=$1 _key
	local _def=$2 _l _val
	[[ -f $RESPFILE ]] || return
	# Find a suitable response in /ai.conf and remove it if found.
	mv /ai.conf /ai.conf.tmp
	while IFS='	' read -r _l; do
		[[ $_l == [!#=]*=?* ]] || continue
		_key=${_l%%*([[:blank:]])=*}
		_val=${_l##*([!=])=*([[:blank:]])}
		[[ $_q == @(|*[[:blank:]])"$_key"@([[:blank:]?]*|) ]] &&
			resp=$_val && cat && return
		print -r " $_l"
	done </ai.conf.tmp >/ai.conf
	[[ -n $_def ]] && resp=$_def && return
	echo "\nLa pregunta no tiene repuesta en el archivo de respuestas."
	exit 1
}

ask() {
	while ! _ask "$1" "$2"; do done
}

askpassword() {
	local _q=$1
	if $AUTO; then
		echo -n "$_q "
		_autorespond "$_q"
		echo '<provided>'
		_password=$resp
		return
	fi

	while :; do
		askpass "$_q (no se verá)"
		_password=$resp

		askpass "$_q (nuevamente)"
		[[ $resp == "$_password" ]] && break

		echo "No coinciden, reintente."
	done
}

encr_pwd() {
	local _p=$1
	if [[ -z $_p ]]; then
		echo '*'
	elif [[ $_p == \$2?\$[0-9][0-9]\$* && ${#_p} > 40 ||
		$_p == '*************' ]]; then
		echo "$_p"
	else
		encrypt -b a -- "$_p"
	fi
}

user_setup() {
	local _q="¿Crear cuenta de usuario? (nombre de cuenta en minúscula o 'no')"

	while :; do
		ask "$_q" no
		case $resp in
		n|no)	return;;
		s|si)	_q="No, de verdad, ¿cúal es el nombre de cuenta en minúscula o 'no'?"
			continue;;
		root|daemon|operator|bin|smmsp|popa3d) ;;
		sshd|uucp|www|named|proxy|nobody|ftp) ;;
		[a-z]*([a-z0-9_]))
			((${#resp} <= 31)) && break;;
		esac
		echo "$resp no es nombre de cuenta utilizable."
	done
	user=$resp
	while :; do
		ask "Nombre completo para usuario  $user?" $user
		case $resp in
		*[:\&,]*)
			echo "':', '&' o ',' no son permitidos.";;
		*)
			((${#resp} <= 100)) && break
			echo "Muy largo.";;
		esac
	done
	username=$resp

	askpassword "Clave para cuenta  usuario $user?"
	userpass=$_password

	userkey=
	$AUTO && ask "Llave ssh pública para el usuario $user" none &&
		[[ $resp != none ]] && userkey=$resp

	if [[ $sshd == y ]]; then
		ask_yn "Como creó una cuenta de usuario, deshabilitar ingresos por sshd(8) a root?" si
		sshd_disableroot=$resp
	fi

}

function ask_until {
	resp=
	while true; do
		ask "$1" "$2"
		[[ -n $resp ]] && break
		echo "Se requiere una respuesta."
		$AUTO && exit 1
	done
}

ask_yn() {
	local _q=$1 _a=${2:-no}
	typeset -l _resp

	while :; do
		ask "$_q" "$_a"
		_resp=$resp
		case $_resp in
		s|si)	resp=y; return 0;;
		n|no)	resp=n; return 1;;
		esac
		echo "'$resp' no es opción válida."
		$AUTO && exit 1
	done
}

ask_which() {
	local _name=$1 _query=$2 _list=$3 _def=$4 _dynlist _dyndef _key _q

	_key=$(echo "$_name" | sed 's/[^[:alnum:]]/_/g')

	while :; do
		eval "_dynlist=\"$_list\""
		eval "_dyndef=\"$_def\""

		set -o noglob
		set -- $_dyndef; _dyndef="$1"
		set -- $_dynlist; _dynlist="$*"
		set +o noglob
		(($# < 1)) && resp=listo && return

		: ${_dyndef:=$1}
		echo " ${_name}s disponibles son: $_dynlist."
		_q="Cual $_name $_query?"
		echo -n "$_q (o 'listo') ${_dyndef:+[$_dyndef] }"
		_autorespond "$_q" "${_dyndef-done}" && echo "$resp" \
			|| _ask || continue
		[[ -z $resp ]] && resp="$_dyndef"

		isin "$resp" $_dynlist listo && break
		echo "'$resp' no es opción."
		$AUTO && [[ -n $RESPFILE ]] && exit 1
	done
}

isin() {
	local	_a=$1 _b

	shift
	for _b; do
		[[ $_a == $_b ]] && return 0
	done
	return 1
}

addel() {
	local	_a=$1

	shift

	echo -n "$*"
	isin "$_a" $* || echo -n " $_a"
}

rmel() {
	local	_a=$1 _b

	shift
	for _b; do
		[[ $_a != $_b ]] && echo -n "$_b "
	done
}

bsort() {
	local _l _a=$1 _b

	(($# > 0)) || return

	shift
	for _b; do
		if [[ $_a != $_b ]]; then
			if [[ $_a > $_b ]]; then
				_l="$_a $_l"; _a=$_b
			else
				_l="$_b $_l"
			fi
		fi
	done

	echo -n "$_a "

	bsort $_l
}

showcols() {
	local _l _cdir=/tmp/cdir
	set -A _clist
	mkdir -p $_cdir
	rm -rf -- $_cdir/*
	while read _l; do
		[[ -n $_l ]] || continue
		mkdir -p /tmp/cdir/"$_l"
		_clist[${#_clist[*]}]="$_l"
	done
	(cd $_cdir; ls -Cdf "${_clist[@]}")
	rm -rf -- $_cdir
}

makedev() {
	[[ -z $(cd /dev && sh MAKEDEV "$@" 2>&1) ]]
}

addhostent() {
	local _addr=$1 _name=$2 _delim="."

	[[ -z $_addr || -z $_name ]] && return

	[[ $_addr == *:* ]] && _delim=":"

	sed "/^[0-9a-fA-F]*[$_delim].*[ 	]$_name\$/d" /tmp/hosts \
		>/tmp/hosts.new 2>/dev/null
	mv /tmp/hosts.new /tmp/hosts

	echo "$_addr $_name" >>/tmp/hosts
}

select_sets() {
	local _avail=$1 _selected=$2 _f _action _col=$COLUMNS
	let COLUMNS=_col-8

	cat <<__EOT

Selecccione componentes por instalar, un patrón o 'todos'.
Deseleccione poniendo un '-' antes del nombre, del patrón o de 'todos'.  
Los seleccionados se marcan con '[X]'.
__EOT
	while :; do
		for _f in $_avail; do
			isin $_f $_selected && echo "[X] $_f" || echo "[ ] $_f"
		done | showcols | sed 's/^/    /'
		ask "Nombre(s) de juego(s)? (o 'cancelar' o 'listo')" listo

		set -o noglob
		for resp in $resp; do
			case $resp in
			cancelar)	_selected=; break 2;;
			listo)	break 2;;
			-*)	_action=rmel;;
			*)	_action=addel;;
			esac
			resp=${resp#[+-]}
			[[ $resp = todos ]] && resp=*

			for _f in $_avail; do
				[[ $_f = $resp ]] && _selected=$($_action $_f $_selected)
			done
		done
	done

	set +o noglob
	COLUMNS=$_col

	resp=$_selected
}

configure_ifs() {
	local _first _ifdevs _ifs _name _hn _vl=0 _vd _vi _p _tags

	# In case of restart, discover last vlan configured.
	while :; do
		_vd=$(ifconfig vlan$_vl 2>&1)
		[[ $_vd == @(*no such interface*) ]] && break
		[[ $_vd == @(*vlan: +([[:digit:]]) parent interface:*) ]] || break
		((_vl++))
	done
	_vd=

	ifconfig lo0 inet 127.0.0.1/8

	rm -f /tmp/mygate

	while :; do
		ifconfig vlan$_vl create >/dev/null 2>&1

		ask_which "Interfaces de red" "desea configurar" \
			'$(get_ifdevs)' \
			${_p:-'$( (get_ifdevs netboot; get_ifdevs) | sed q )'}
		[[ $resp == listo ]] && break

		_ifs=$resp
		_hn=/tmp/hostname.$_ifs
		rm -f $_hn

		if [[ $_ifs == vlan+([0-9]) ]]; then
			_vi=$(ifconfig $_ifs 2>/dev/null |
				sed -n 's/vlan: \([0-9]*\).*/\1/p')
			_tags=$(ifconfig vlan 2>/dev/null |
				sed -n 's/vlan: \([0-9]*\).*/\1/p')
			[[ -n $_tags ]] && _tags=$(rmel "$_vi" $_tags)
			if [[ -z $_vi ]]; then
				_vi=0
				while ((++_vi < 4096)); do
					! isin "$_vi" $_tags && break
				done
			fi
			_ifdevs=$(get_ifdevs)
			set -- $_ifdevs
			while [[ $1 == vlan+([0-9]) ]]; do
				shift
			done
			ask "¿Sobre que interface:tag debe estar $_ifs?" "${_vd:=$1}:$_vi"
			_vd=${resp%%:*}
			_vi=${resp##*:}

			if ! (isin "$_vd" $_ifdevs && [[ $_vd != vlan+([0-9]) ]]); then
				echo "Elección de interfaz invalida '$_vd'"
				_vd=
				continue
			fi

			if ((_vi < 1 || _vi > 4095)) || isin "$_vi" $_tags; then
				echo "Tag invalido o en uso '$_vi'"
				continue
			fi

			grep -qs "^up" /tmp/hostname.$_vd ||
				echo "up" >>/tmp/hostname.$_vd
			chmod 640 /tmp/hostname.$_vd
			ifconfig $_vd up

			ifconfig $_ifs destroy >/dev/null 2>&1
			ifconfig $_ifs vlan $_vi vlandev $_vd
			echo "vlan $_vi vlandev $_vd" >>$_hn
			[[ ${_ifs##vlan} == $_vl ]] && ((_vl++))
		fi

		ifconfig $_ifs 2>/dev/null | grep -q "^[[:space:]]*ieee80211:" &&
			ieee80211_config $_ifs $_hn

		resp=$(hostname -s)
		[[ -n $_first && $_first != $_ifs ]] &&
			ask "¿Nombre para $_ifs?" $resp
		_name=$resp

		v4_config $_ifs $_name $_hn
		v6_config $_ifs $_name $_hn

		if [[ -f $_hn ]]; then
			chmod 640 $_hn
			: ${_first:=$_ifs}
		fi

		NIFS=$(ls -1 /tmp/hostname.* 2>/dev/null | grep -c ^)
		_p=listo
	done
}

v4_info() {
	ifconfig $1 inet | sed -n '
		1s/.*<UP,.*/UP/p
		1s/.*<.*/DOWN/p
		/inet/s/netmask//
		/inet/s///p'
}

v6_info() {
	ifconfig $1 inet6 | sed -n '
		1s/.*<UP,.*/UP/p
		1s/.*<.*/DOWN/p
		/scopeid/d
		/inet6/s/prefixlen//
		/inet6/s///p'
}

dhclient() {
	local _i=0
	while makedev bpf$_i && ! </dev/bpf$_i; do
		((++_i < 50)) || return
	done 2>/dev/null
	/sbin/dhclient "$@"
}

dhcp_request() {
	local _ifs=$1 _hn=$2

	echo "lookup file bind" >/etc/resolv.conf.tail
	echo "send host-name \"$_hn\";" >/etc/dhclient.conf

	ifconfig $_ifs group dhcp >/dev/null 2>&1

	dhclient -c /dev/stdin $_ifs << __EOT
initial-interval 1;
backoff-cutoff 2;
reboot 5;
timeout 10;
send host-name "$_hn";
__EOT

	mv /etc/dhclient.conf /tmp/dhclient.conf
	mv /etc/resolv.conf.tail /tmp/resolv.conf.tail
}

hextodec() {
	local _d _b

	for _b in $(echo ${1#0x} | sed 's/\(..\)/\1 /g'); do
		_d=$_d.$((0x$_b))
	done
	echo ${_d#.}
}

ieee80211_scan() {
	[[ -f $WLANLIST ]] ||
		ifconfig $1 scan |
		sed -n 's/^		nwid \([^"]\)/\1/p' >$WLANLIST
	cat $WLANLIST
}

ieee80211_config() {
	local _ifs=$1 _hn=$2 _prompt _nwid _haswpa=0 _err

	# Reset 802.11 settings and determine wpa capability
	ifconfig $_ifs -nwid -nwkey
	ifconfig $_ifs -wpa 2>/dev/null && _haswpa=1

	# Empty scan cache
	rm -f $WLANLIST

	while [[ -z $_nwid ]]; do
		ask_until "¿Punto de Acceso Inalámbrico? (ESSID, 'cualquiera', #lista o '?'
)" "cualquiera"
		case "$resp" in
		+([0-9]))
			_nwid=$(ieee80211_scan $_ifs | sed -n "${resp}s/ .*//p")
			[[ -z $_nwid ]] && echo "No hay línea $resp."
			;;
		\?)	ieee80211_scan $_ifs |
				sed -n 's/^\([^ ]*\) chan .* bssid \([^ ]*\) .*$/	\1 (\2)/p' |
				less -XEN
			;;
		*)	_nwid=$resp;;
		esac
	done

	# 'any' implies that only open access points are considered
	if [[ $_nwid != cualquiera ]]; then
		ifconfig $_ifs nwid "$_nwid"
		quote nwid "$_nwid" >>$_hn

		_prompt="¿Protocolo de Seguridad? (A)bierto, (W)EP, W(P)A"
		((_haswpa == 1)) && _prompt="$_prompt, WPA-(P)SK"
		while :; do
			ask_until "$_prompt" "A"
			case "$_haswpa-$resp" in
			?-[Aa])	break
				;;
			?-[Ww])	ask_until "¿Llave WEP? (no se verá)"
				# Make sure ifconfig accepts the key
				if _err=$(ifconfig $_ifs nwkey "$resp" 2>&1) &&
					[[ -z $_err ]]; then
					quote nwkey "$resp" >>$_hn
					break
				fi
				echo "$_err"
				;;
			1-[Pp])	ask_until "¿Palabra secreta WPA? (se verá)"
				# Make sure ifconfig accepts the key
				if ifconfig $_ifs wpakey "$resp"; then
					quote wpakey "$resp" >>$_hn
					break
				fi
				;;
			*)	echo "'$resp' no es opción válida."
				;;
			esac
		done
	fi
}

v4_config() {
	local _ifs=$1 _name=$2 _hn=$3 _prompt _addr _mask

	if ifconfig $_ifs | grep -q 'groups:.* dhcp'; then
		_addr=dhcp
	else
		set -- $(v4_info $_ifs)
		if [[ -n $2 ]]; then
			_addr=$2; _mask=$(hextodec $3)
			ifconfig $_ifs inet $_addr delete
		fi
	fi

	if [[ -x /sbin/dhclient ]]; then
		_prompt="or 'dhcp' "
		ifconfig dhcp >/dev/null 2>&1 || _addr=dhcp
	fi
	_prompt="Dirección IPv4 para $_ifs? (${_prompt}o 'nada')"

	ask_until "$_prompt" "$_addr"
	case $resp in
	nada)	;;
	dhcp)	if [[ ! -x /sbin/dhclient ]]; then
			echo "Sin DHCP - falta /sbin/dhclient."
		else
			dhcp_request $_ifs "$_name"
			echo "dhcp" >>$_hn
		fi
		;;
	*)	_addr=$resp
		ask_until "Máscara de red para  $_ifs?" "${_mask:=255.255.255.0}"
		ifconfig $_ifs -group dhcp >/dev/null 2>&1
		if ifconfig $_ifs inet $_addr netmask $resp up; then
			addhostent "$_addr" "$_name"
			echo "inet $_addr $resp" >>$_hn
		fi
		;;
	esac
}

v6_config() {
	local _ifs=$1 _name=$2 _hn=$3 _addr _prefixlen _prompt

	ifconfig lo0 inet6 >/dev/null 2>&1 || return

	set -- $(v6_info $_ifs)
	[[ -n $2 ]] && { _addr=$2; _prefixlen=$3; }

	ifconfig $_ifs inet6 >/dev/null 2>&1 && _prompt="o 'rtsol' "
	_prompt="Dirección IPv6 para $_ifs? (${_prompt}o 'nada')"
	ask_until "$_prompt" "${_addr:-nada}"

	case $resp in
	nada)	return
		;;
	rtsol)  ifconfig $_ifs inet6 >/dev/null 2>&1 || { echo "Sin soporte INET6."; return; }
		ifconfig $_ifs up
		ifconfig $_ifs inet6 autoconf && echo "up\nrtsol" >>$_hn
		return
		;;
	esac

	_addr=$resp
	ask_until "Long. de prefijo IPv6 para $_ifs?" "${_prefixlen:=64}"
	ifconfig $_ifs inet6 $_addr prefixlen $resp up || return
	echo "inet6 $_addr $resp" >>$_hn
	addhostent "$_addr" "$_name"

	v6_defroute $_ifs
}

v4_defroute() {
	local _dr _prompt=" o 'nada'"

	# Get/Confirm an IPv4 default route if an IPv4 address was configured.
	[[ -n $(ifconfig | sed -n '/[ 	]inet .* broadcast /p') ]] || return

	# If only one interface, and it is running dhclient, ask nothing
	[[ -f /tmp/dhclient.conf && $NIFS == 1 ]] && return

	[[ -x /sbin/dhclient ]] && _prompt=", 'dhcp'$_prompt"
	_prompt="¿Ruta IPv4 por defecto?$_prompt)"

	_dr=$(route -n show -inet | sed -n '/^default */{s///; s/ .*//; p;}')
	[[ -f /tmp/dhclient.conf ]] && _dr=dhcp

	while :; do
		ask_until "$_prompt" "$_dr"
		[[ $resp == @(nada|dhcp) ]] && break
		route delete -inet default >/dev/null 2>&1
		route -n add -inet -host default "$resp" && { echo "$resp" >>/tmp/mygate; break; }
		route -n add -inet -host default $_dr >/dev/null 2>&1
	done
}

v6_defroute() {
	local _if=$1 _prompt _resp _routers

	route -n show -inet6 | egrep -q '^default[[:space:]]' && return

	_routers=$(bsort $(ping6 -n -c 2 ff02::2%$_if 2>/dev/null |
		sed -n '/bytes from/{s/^.*from //;s/,.*$//;p;}' |
		sed -n 'G;s/\n/&&/;/^\(.*\n\).*\n\1/d;h;P'))

	_prompt="IPv6 default router?"

	if $AUTO; then
		_autorespond "$_prompt" && _resp=$resp && echo "$_prompt $_resp"
	else
		local PS3="$_prompt (${_routers:+list #, }IPv6 address or 'none'): "
		select _resp in $_routers; do
			[[ ${_resp:=$REPLY} == *:* ]] && break
			[[ $_resp == none ]] && return
		done
	fi
 
	route -n add -inet6 -host default "$_resp" &&
		echo "$_resp" >>/tmp/mygate
}

ifstart () {
	local _hn=$1 if=${1#/mnt/etc/hostname.}

	((NIFS++))
	while :; do
		if [ "$cmd2" ]; then
			set -- $cmd2
			af=$1 name=$2 mask=$3 bcaddr=$4 ext1=$5 cmd2=
			i=1
			while [ i -lt 6 -a -n "$1" ]; do shift; let i=i+1; done
			ext2="$@"
		else
			read af name mask bcaddr ext1 ext2 || break
		fi
		case "$af" in
		"#"*|"!"*|"bridge"|"")
			continue
			;;
		"dhcp") [ "$name" = "NONE" ] && name=
			[ "$mask" = "NONE" ] && mask=
			[ "$bcaddr" = "NONE" ] && bcaddr=
			dhcpif="$dhcpif $if"
			cmd="ifconfig $if $name $mask $bcaddr $ext1 $ext2 down"
			if [[ -x /sbin/dhclient ]]; then
				cmd="$cmd; dhclient $if"
			else
				cmd="$cmd; echo Falta /sbin/dhclient - saltando petición dhcp."
			fi
			;;
		"rtsol")
			if ifconfig $if inet6 >/dev/null 2>&1; then
				rtsolif="$rtsolif $if"
				cmd="ifconfig $if $name $mask $bcaddr $ext1 $ext2 up"
			else
				cmd="$cmd; echo Sin soporte INET6 - saltando requerimiento rtsol."
			fi
			;;
		*)      read dt dtaddr
			if [ "$name" = "alias" ]; then
				alias=$name
				name=$mask
				mask=$bcaddr
				bcaddr=$ext1
				ext1=$ext2
				ext2=
			else
				alias=
			fi
			cmd="ifconfig $if $af $alias $name"
			case "$dt" in
			dest)   cmd="$cmd $dtaddr"
				;;
			*)
				cmd2="$dt $dtaddr"
				;;
			esac
			case $af in
			inet)
				if [ ! -n "$name" ]; then
					echo "/etc/hostname.$if: inet alone is invalid"
					return
				fi
				[ "$mask" ] && cmd="$cmd netmask $mask"
				if [ "$bcaddr" -a X"$bcaddr" != "XNONE" ]; then
					cmd="$cmd broadcast $bcaddr"
				fi
				[ "$alias" ] && rtcmd=";route -qn add -host $name 127.0.0.1"
				;;
			inet6)
				if [ ! -n "$name" ]; then
					echo "/etc/hostname.$if: inet6 alone is invalid"
					return
				fi
				[ "$mask" ] && cmd="$cmd prefixlen $mask"
				cmd="$cmd $bcaddr"
				;;
			*)      cmd="$cmd $mask $bcaddr"
				;;
			esac
			cmd="$cmd $ext1 $ext2$rtcmd" rtcmd=
			;;
		esac
		eval "$cmd"
	done <$_hn
}

enable_network() {
	local _f _gw _trunks _svlans _vlans

	for _f in dhclient.conf resolv.conf resolv.conf.tail; do
		if [ -f /mnt/etc/$_f ]; then
			cp /mnt/etc/$_f /etc/$_f
		fi
	done

	ifconfig lo0 inet 127.0.0.1/8

	for hn in /mnt/etc/hostname.*; do
		if=${hn#/mnt/etc/hostname.}
		if isin ${if%%+([0-9])} $(ifconfig -C); then
			case ${if%% ([0-9])} in
			trunk)  _trunks="$_trunks $hn"  ;;
			svlan)  _svlans="$_svlans $hn"  ;;
			vlan)   _vlans="$_vlans $hn"    ;;
			esac
		else
			ifconfig $if >/dev/null 2>&1 && ifstart $hn
		fi
	done
	for hn in $_trunks $_svlans $_vlans; do
		ifstart $hn
	done

	[[ -n $rtsolif ]] && ifconfig $rtsolif inet6 autoconf

	[[ -z $dhcpif ]] && stripcom /mnt/etc/mygate | while read _gw; do
		[[ $_gw == @(*:*) ]] && continue
		route -qn delete default >/dev/null 2>&1
		route -qn add -host default $_gw && break
	done
	[[ -z $rtsolif ]] && stripcom /mnt/etc/mygate | while read _gw; do
		[[ $_gw == !(*:*) ]] && continue
		route -qn delete -inet6 default >/dev/null 2>&1
		route -qn add -host -inet6 default $_gw && break
	done

	route -qn add -net 127 127.0.0.1 -reject >/dev/null
}

install_files() {
	local _src=$1 _files=$2 _f _sets _get_sets _n _col=$COLUMNS \
		_tmpfs _tmpsrc _cfile _fsrc _unver _t _issue _srclocal 

	for _f in $THESETS; do
		isin $_f $_files || continue;
		_sets=$(addel $_f $_sets)
		[[ -z $DISPLAY && ! -d /mnt/etc/X11 ]] &&
			isin ${_f%${VERSION}.tgz} xbase xshare xfont xserv &&
			continue
		isin $_f $DEFAULTSETS "site$VERSION-$(hostname -s).tgz" &&
			_get_sets=$(addel $_f $_get_sets)
	done

	if [[ -z $_sets ]]; then
		echo -n "Se buscó $_src "
		echo "y no se encontraron juegos de $OBSD. Los juegos buscados eran:"

		let COLUMNS=_col-8
		for _n in $THESETS; do echo $_n; done | showcols | sed 's/^/    /'
		COLUMNS=$_col

		$AUTO && exit 1
		echo
		return
	fi

	isin INSTALL.$ARCH $_files ||
		ask_yn "INSTALL.$ARCH no encontrado. ¿Usar componentes?" ||
		return

	select_sets "$_sets" "$_get_sets"

	[[ -n $resp ]] || return
	_get_sets=$resp

	_get_sets=$(for s in $THESETS; do isin $s $_get_sets && echo $s; done)

	_unver=$_get_sets

	for _issue in ''; do
		! isin SHA256.sig $_files &&
			_issue="El directorio no contiene SHA256.sig" && break

		_tmpfs=$( (
			for fs in /mnt/{{,var/}tmp,home,usr{/local,}}; do
				df -k $fs 2>/dev/null | grep " $fs\$"
			done
			df -k
		) | (
			while read a a a a m m; do
				[[ $m == /mnt/@(@(|var/)tmp|home|usr/@(src,obj,xobj))@(|/*) ]] &&
					((a > 524288)) && echo $m && exit
				[[ $m == /mnt@(|/*) ]] &&
					((a > 524288 * 4)) && echo $m && exit
			done
		) )

		if [[ -d $_tmpfs ]]; then
			! _tmpsrc=$(tmpdir "$_tmpfs/sets") &&
			_issue="No se pudo crear área de descarga" && break
		else
			_issue="No se pudo determinar área de descarga" && break
		fi

		_cfile=$_tmpsrc/SHA256
		_srclocal=false
		_t=Get/Verify
		[[ $_src == file://* ]] && _srclocal=true _t='Verifying '

		# Fetch signature file
		! ftp -D "$_t" -Vmo "$_cfile.sig" "$_src/SHA256.sig" &&
			_issue="No se pudo descargar SHA256.sig" && break

		# Verify signature file with public keys
		! signify -Vep /etc/signify/adJ-${VERSION}-base.pub \
			-x "$_cfile.sig" -m "$_cfile" &&
			_issue="Revisión de firma de SHA256.sig falló" && break

		for _f in $_get_sets; do
			rm -f "$_tmpsrc/h" "$_tmpsrc/fail"

			( ftp -D "$_t" -Vmo - "$_src/$_f" || >"$_tmpsrc/fail" ) |
			( $_srclocal && sha256 >$_tmpsrc/h ||
				sha256 -ph "$_tmpsrc/h" >"$_tmpsrc/$_f" )

			if [[ -f $_tmpsrc/fail ]]; then
				rm -f "$_tmpsrc/$_f"
				if ! ask_yn "Descarga de $_f falló. ¿Continuar en todo caso?"; then
					[[ -d $_tmpsrc ]] && rm -rf "$_tmpsrc"
					$AUTO && exit 1
					return
				fi
				continue
			fi

			if fgrep -qx "SHA256 ($_f) = $(<$_tmpsrc/h)" "$_cfile"; then
				_unver=$(rmel $_f $_unver)
			else
				if ! ask_yn "Suma de verificación de $_f falló. ¿Continuar en todo caso?"; then
					[[ -d $_tmpsrc ]] && rm -rf "$_tmpsrc"
					$AUTO && exit 1
					return
				fi
			fi
		done
	done

	[[ -n $_unver ]] && : ${_issue:="Unverified sets:" ${_unver% }}
	if [[ -n $_issue ]] &&
		! ask_yn "$_issue. ¿Continuar sin verificación?"; then
		[[ -d $_tmpsrc ]] && rm -rf "$_tmpsrc"
		$AUTO && exit 1
		return
	fi
	# XXX Delete this chunk after 5.8 (not a supported upgrade path)
	[[ $MODE == upgrade ]] && rm -rf /mnt/var/tmp
	for _f in $_get_sets; do
		_fsrc="$_src/$_f"
		[[ -f $_tmpsrc/$_f ]] && _fsrc="file://$_tmpsrc/$_f"
		case $_fsrc in
		*.tgz)  ftp -D Installing -Vmo - "$_fsrc" | tar -zxphf - -C /mnt
			if [[ $_f == ?(x)base*.tgz && $MODE == install ]]; then
				ftp -D Extracting -Vmo - \
				file:///mnt/usr/share/sysmerge/${_f%%base*}etc.tgz |
				tar -zxphf - -C /mnt
			fi;;

		*)	ftp -D Installing -Vmo "/mnt/$_f" "$_fsrc";;
		esac
		if (($?)); then
			if ! ask_yn "La instalación de  $_f falló. ¿Continuar en todo caso?"; then
				[[ -d $_tmpsrc ]] && rm -rf "$_tmpsrc"
				$AUTO && exit 1
				return
			fi
		else
			DEFAULTSETS=$(rmel $_f $DEFAULTSETS)
			GOTSETS="$GOTSETS $_f"
		fi
		[[ -d $_tmpsrc ]] && rm -f "$_tmpsrc/$_f"
	done
	[[ -d $_tmpsrc ]] && rm -rf "$_tmpsrc"
}

startcgiinfo() {
	((NIFS < 1)) && return

	set -m
	(
		ftp -Vao - "http://129.128.5.191/cgi-bin/ftplist.cgi?path=$HTTP_SETDIR" \
			2>/dev/null >$CGI_INFO

		echo -n $SECONDS >$HTTP_SEC
		feed_random
	) & CGIPID=$!
	set +m

	(sleep 12; kill -INT -$CGIPID >/dev/null 2>&1) &
}

waitcgiinfo() {
	wait "$CGIPID" 2>/dev/null

	[[ -s $CGI_INFO ]] || return

	sed -n "s,^http://"'\([[A-Za-z0-9\:_][]A-Za-z0-9:._-]*\),\1,p' \
		$CGI_INFO >$HTTP_LIST 2>/dev/null
	set -- $(sed q $HTTP_LIST)
	: ${HTTP_SERVER:=${1%%/*}}

	CGI_METHOD=$(sed -n '/^method=/s///p' $CGI_INFO 2>/dev/null)
	CGI_TZ=$(sed -n '/^TZ=/s///p' $CGI_INFO 2>/dev/null)
	CGI_TIME=$(sed -n '/^TIME=/s///p' $CGI_INFO 2>/dev/null)
}


http_time() {
	local _sec=$(cat $HTTP_SEC 2>/dev/null)

	[[ -n $_sec && -n $CGI_TIME ]] &&
		echo $((CGI_TIME + SECONDS - _sec))
}

install_http() {
	local _file_list _prompt _mirror _url_base

	waitcgiinfo
	ask "¿Proxy HTTP? (e.g. 'http://proxy:8080', o 'nada')" \
		"${http_proxy:-none}"
	unset http_proxy
	[[ $resp == none ]] || export http_proxy=$resp

	if [[ -s $HTTP_LIST ]]; then
		_prompt="¿Servidor HTTP? (nombre, # en lista, 'listo' or '?')"
	else
		echo "(No pudo obtener lista ftp de ftp.openbsd.org, pero está bien)"
		_prompt="¿Servidor HTTP? (nombre o 'listo')"
	fi

	while :; do
		ask_until "$_prompt" "$HTTP_SERVER"
		case $resp in
		done)	return;;
		"?")	[[ -s $HTTP_LIST ]] || continue
			less -XEN < $HTTP_LIST
			;;
		+([0-9]))
			[[ -s $HTTP_LIST ]] || continue
			set -- $(sed -n "${resp}p" $HTTP_LIST)
			(($# < 1)) && { echo "No hay línea $resp."; continue; }
			HTTP_SERVER=${1%%/*}
			;;
		+([A-Za-z0-9\:.\[\]_-]))
			HTTP_SERVER=$resp
			break
			;;
		*)	echo "'$resp' no es nombre de máquina valido."
			;;
		esac
	done

	set -- $(sed "/^$HTTP_SERVER/x;\$!d;x" $HTTP_LIST 2>/dev/null)
	resp=${1#*/}
	[[ $resp == "$1" ]] && resp=
	if (($# > 1)); then
		resp=$resp/$HTTP_SETDIR
		_mirror=yes
	fi

	: ${HTTP_DIR:=pub/OpenBSD/$HTTP_SETDIR}
	ask_until "Directorio" "${resp:-$HTTP_DIR}"
	HTTP_DIR=$resp
	_url_base="http://$HTTP_SERVER/$HTTP_DIR"

	_file_list=$(ftp -Vo - "$_url_base/index.txt" |
		sed 's/^.* //' | sed 's///')
 
	install_files "$_url_base" "$_file_list"

	INSTALL=$_url_base

	PACKAGE_PATH=
	if [[ -n $_mirror ]]; then
		PACKAGE_PATH=$(print -r -- "$_url_base" |
			sed -E "/\/(snapshots|[0-9]\.[0-9])\/($ARCH)\/*$/!d
				s!!/\1/packages/$(arch -s)/!;q")
	fi
}

install_mounted_fs() {
	local _dir

	while :; do
		ask_until "¿Ruta a componentes? (o 'listo')" "$SETDIR"
		[[ $resp == listo ]] && return
		[[ -d /mnt2/$resp ]] && { _dir=/mnt2/$resp; break; }
		[[ -d /mnt/$resp ]] && { _dir=/mnt/$resp; break; }
		[[ -d /$resp ]] && { _dir=/$resp; break; }
		echo "El directorio '$resp' no existe."
		$AUTO && exit 1
	done

	install_files "file://$_dir" "$(ls $_dir/)"
}

install_cdrom() {
	get_drive "CD-ROM" '$(get_cddevs)' || return
	mount_mnt2 $resp || return

	install_mounted_fs
}

install_disk() {
	if ! ask_yn "¿Partición ya montada?"; then
		get_drive "disk" '$(bsort $(get_dkdevs))' \
			'$(bsort $(rmel $ROOTDISK $(get_dkdevs)))' || return
		mount_mnt2 $resp || return
	fi

	install_mounted_fs
}

install_nfs() {
	local _tcp

	ask_until "¿IP del servidor o nombre?" "$NFS_ADDR"
	NFS_ADDR=$resp

	ask_until "¿Sist. de arch. por montar?" "$NFS_PATH"
	NFS_PATH=$resp

	ask_yn "¿Transporte TCP? (requiere servidor NFS capaz)" && _tcp=-T

	mount_nfs $_tcp -o ro -R 5 $NFS_ADDR:$NFS_PATH /mnt2 || return

	install_mounted_fs
}

set_timezone() {
	local _zonefile=$1 _zonepath _zsed _tz _zoneroot=/usr/share/zoneinfo


	[[ ! -f $_zonefile ]] && return

	[[ -n $TZ ]] && return

	if [[ -h /mnt/etc/localtime ]]; then
		TZ=$(ls -l /mnt/etc/localtime 2>/dev/null)
		TZ=${TZ#*${_zoneroot#/mnt}/}
	fi

	waitcgiinfo
	if [[ -n $CGI_TZ ]]; then
		_tz=$CGI_TZ
		[[ -n $_tz ]] && isin "$_tz" `cat $_zonefile` && TZ=$_tz
	fi

	[[ $_zonefile = /var/tzlist && -z $TZ ]] && return

	while :; do
		ask "¿Zona horaria? ('?' muestra lista)" "$TZ"
		_zonepath=${resp%%*(/)}
		case $_zonepath in
		"")	continue;;
		"?")	grep -v /. $_zonefile | showcols
			continue;;
		esac

		while isin "$_zonepath/" $(cat $_zonefile); do
			ask "¿En que sub-zona de '$_zonepath' está? ('?' muestra lista)"
			_zsed=$(echo $_zonepath/ | sed 's,/,\\/,g')
			resp=${resp%%*(/)}
			case $resp in
			"")	;;
			"?")	sed -n "/^$_zsed/{s/$_zsed//;/\/./!p;}" $_zonefile | showcols;;
			*)	_zonepath=$_zonepath/$resp;;
			esac
		done

		if isin "$_zonepath" $(cat $_zonefile); then
			TZ=${_zonepath#$_zoneroot}
			return
		fi

		echo -n "'${_zonepath}'"
		echo " no es zona válida"
	done
}

sane_install() {
	local _q=$1 _s

	for _s in $SANESETS; do
		isin $_s $DEFAULTSETS || continue
		[[ -n $_q ]] && return 1
		if ! ask_yn "no fue instalado.
*SEGURO* se completó el proceso sin '$_s'?"; then
			$AUTO && exit 1 || return 1
		fi
	done
}

install_sets() {
	local _d _locs="disco http"

	echo

	_d=$CGI_METHOD

	ifconfig netboot >/dev/null 2>&1 && : ${_d:=http}
	[[ -n $(get_cddevs) ]] && { _locs="cd $_locs"; : ${_d:=cd}; }
	[[ -x /sbin/mount_nfs ]] && _locs="$_locs nfs"
	: ${_d:=http}

	if ! isin "$_d" $_locs; then
		for a in http cd nfs disco; do
			isin $a $_locs && _d=$a && break
		done
	fi

	echo "
¡Por $_SMODE componentes básicos!"
	while :; do
		umount -f /mnt2 >/dev/null 2>&1

		ask "¿Localización? ($_locs o 'listo')" "$_d"
		case $resp in
		listo)	sane_install && return;;
		c*|C*)	isin cd $_locs && install_cdrom && METHOD=cd;;
		d*|D*)	install_disk && METHOD=disk;;
		h*|H*)	isin http $_locs && install_http && METHOD=http;;
		n*|N*)	isin nfs $_locs && install_nfs && METHOD=nfs;;
		*) 	$AUTO && echo "'$resp' no es opción válida." && exit 1;;
		esac
		[[ -n $METHOD ]] && _d=$METHOD
		sane_install quiet || $AUTO && _d=listo
	done
}

update_firmware() {
	echo "/usr/sbin/fw_update -v" >>/mnt/etc/rc.firsttime
}

munge_fstab() {
	local _dev _mp _fstype _opt _rest

	while read _dev _mp _fstype _opt _rest; do
		[[ $_dev == @(/dev/vnd*|\#*) ||
			$_fstype == nfs ||
			! -f /sbin/mount_$_fstype ||
			$_opt == *noauto* ||
			$_opt == *xx* ]] && continue

		_opt=$(echo $_opt | sed 's/softdep//')

		[[ $_fstype == ffs ]] &&
			_opt=$(echo $_opt | sed 's/[[:<:]]ro[[:>:]]/rw/')

		[[ $_fstype == ffs ]] ||
			_opt=$(echo $_opt | sed 's/[[:<:]]rw[[:>:]]/ro/')

		echo $_dev /mnt${_mp%/} $_fstype $_opt $_rest

	done </tmp/fstab >/etc/fstab

	if [[ ! -s /etc/fstab ]]; then
		echo "No se pudo crear /etc/fstab valido."
		exit
	fi
}

mount_fs() {
	local _async=$1 _dev _mp _fstype _opt _rest _msg _fail

	while read _dev _mp _fstype _opt _rest; do
		[[ $_mp = /mnt ]] || mkdir -p $_mp

		_msg=$(mount -v -t $_fstype $_async -o $_opt $_dev $_mp) ||
			_fail="$_fail\n$_mp ($_dev)"
		echo $_msg | sed 's/, ctime=[^,)]*//'
	done </etc/fstab

	if [[ -n $_fail ]]; then
		echo "\n!ADVERTENCIA! Los siguientes sistemas de archivos no pudieron montarse apropiadamente:$_fail"
		ask_yn "¿Continuar en todo caso?" || exit
	fi
}

getdevname() {
	local _dev=$1
	if [[ ${#_dev} == 18 && $_dev == +([0-9a-f]).[a-p] ||
		${#_dev} == 16 && $_dev == +([0-9a-f]) ]]; then
		sysctl -n hw.disknames |
			sed -nE "s/^(.*,)*(.*):${_dev%.?}.*/\\2/p"
	else
		_dev=${_dev#/dev/}
		print -r -- "${_dev%[a-p]}"
	fi
}

check_fs() {
	local _dev _dn _mp _fstype _rest _fail _f _passno

	ask_yn "¿Chequear otras subparticiones limpias?" && _f=f

	while read _dev _mp _fstype _rest _rest _passno _rest; do
		_dn=$(getdevname "$_dev")
		[[ $ROOTDEV == @(${_dev#/dev/}|$_dn${_dev##*.}) ]] && continue
		[[ -f /sbin/fsck_$_fstype ]] || continue
		makedev "$_dn" || continue
		((_passno > 0)) || continue
		echo -n "fsck -${_f}p $_dev..."
		if ! fsck -${_f}p $_dev >/dev/null 2>&1; then
			echo "FALLÓ. Ejecute fsck $_dev ."
			_fail=y
		else
			echo "Listo."
		fi
	done </etc/fstab

	[[ -n $_fail ]] && exit
}

get_fqdn() {
	local _dn

	_dn=$(hostname)
	_dn=${_dn#$(hostname -s)}
	_dn=${_dn#.}

	echo "${_dn:=my.domain}"
}

donetconfig() {
	local _dn _ns _n

	configure_ifs
	v4_defroute

	if [[ -f /tmp/resolv.conf.shadow ]]; then
		mv /tmp/resolv.conf.shadow /tmp/resolv.conf
		for _n in $(grep '^nameserver ' /tmp/resolv.conf); do
			[[ $_n == nameserver ]] || _ns="$_ns$_n "
		done
		set -- $_ns
		_ns=$*
		_dn=$(sed -n \
			-e '/^domain[[:space:]][[:space:]]*/{s///;s/\([^[:space:]]*\).*$/\1/;h;}' \
			-e '/^search[[:space:]][[:space:]]*/{s///;s/\([^[:space:]]*\).*$/\1/;h;}' \
			-e '${g;p;}' /tmp/resolv.conf)
	fi

	resp="${_dn:=$(get_fqdn)}"
	if [[ ! -f /tmp/dhclient.conf || $NIFS != 1 ]]; then
		ask "¿Dominio DNS? (e.g. 'bar.com')" "$resp"
	else
		echo "Usando nombre de dominio DNS $resp"
	fi
	hostname "$(hostname -s).$resp"

	resp="${_ns:=nada}"
	if [[ ! -f /tmp/dhclient.conf || $NIFS != 1 || $resp == none ]]; then
		ask "¿Servidor DNS? (IP o 'nada')" "$resp"
	else
		echo "Usando servidores de nombres DNS en $resp"
	fi
	if [[ $resp != nada ]]; then
		echo "lookup file bind" >/tmp/resolv.conf
		for _ns in $resp; do
			echo "nameserver $_ns" >>/tmp/resolv.conf
		done
		cp /tmp/resolv.conf /tmp/resolv.conf.shadow
	fi
}

apply()
{
	[[ $sshd == n ]] && echo "sshd_flags=NO" >>/mnt/etc/rc.conf.local
	if [[ $sshd_disableroot == y ]]; then
		sed "/^#\(PermitRootLogin\) yes/s//\1 no/" \
			< /mnt/etc/ssh/sshd_config >/tmp/sshd_config
		cp /tmp/sshd_config /mnt/etc/ssh/sshd_config
	fi
	if [[ $ntpd == y ]]; then
		echo "ntpd_flags=" >>/mnt/etc/rc.conf.local
		[[ $ntpd_server == default ]] && ntpd_server=pool.ntp.org
		echo "servers ${ntpd_server%% *}" >>/mnt/etc/ntpd.conf
	fi


	[[ -n $aperture ]] && 
		echo "machdep.allowaperture=$aperture # See xf86(4)" \
			>>/mnt/etc/sysctl.conf

	[[ $xdm == y && -x /mnt/usr/X11R6/bin/xdm ]] &&
		echo "xdm_flags=" >>/mnt/etc/rc.conf.local

	if [[ $defcons == y ]]; then
		cp /mnt/etc/ttys /tmp/ttys
		sed	-e "/^$CTTY/s/std.9600/std.${CSPEED}/" \
			-e "/^$CTTY/s/unknown/vt220	/" \
			-e "/$CTTY/s/off.*/on secure/" /tmp/ttys >/mnt/etc/ttys
		[[ -n $CPROM ]] &&
			echo "stty $CPROM $CSPEED\nset tty $CPROM" >>/mnt/etc/boot.conf
	fi

	ln -sf /usr/share/zoneinfo/$TZ /mnt/etc/localtime
}

questions() {
	local _d _cdef=no

	ask_yn "¿Iniciar sshd(8) por defecto?" si
	sshd=$resp

	ask_yn "¿Iniciar ntpd(8) por defecto?"
	ntpd=$resp
	if [[ $resp == y ]]; then
		ask "¿Servidor NTP? (nombre o 'predefinida')" default
		ntpd_server=$resp
	fi

	aperture=
	xdm=
	if [[ -n $DISPLAY ]]; then
		if [[ -n $(scan_dmesg '/^[a-z]*[01]: aperture needed/p') ]]; then
			ask_yn "¿Usará X Window?" si &&
			    aperture=$MDXAPERTURE
		fi
		if [[ -n $MDXDM ]]; then
			ask_yn "¿Desea que el sistema X Window sea iniciado por xdm(1)?"
			xdm=$resp
		fi
	fi

	if [[ -n $CDEV ]]; then
		_d=${CPROM:-$CDEV}
		[[ -n $CONSOLE ]] && _cdef=si
		ask_yn "¿Cambiar consola a $_d?" $_cdef
		defcons=$resp
		if [[ $resp == y ]]; then
			ask_which "velocidad" "debería $_d usar" \
				"9600 19200 38400 57600 115200" $CSPEED
			case $resp in
			listo)	defcons=n;;
			*)	CSPEED=$resp;;
			esac
		fi
	fi
}

feed_random() {
	(dmesg; cat $CGI_INFO /*.conf; sysctl; route -n show; df;
		ifconfig -A; hostname) >/dev/random 2>&1
	if [[ -e /mnt/var/db/host.random ]]; then
		dd if=/mnt/var/db/host.random of=/dev/random bs=65536 count=1 \
		    status=none
	fi
}

store_random() {
	dd if=/dev/random of=/mnt/var/db/host.random bs=65536 count=1 \
	    status=none
	dd if=/dev/random of=/mnt/etc/random.seed bs=512 count=1 status=none
	chmod 600 /mnt/var/db/host.random /mnt/etc/random.seed
}

finish_up() {
	local _dev _mp _fstype _rest

	if [[ -x /mnt/sbin/swapctl ]]; then
		/mnt/sbin/swapctl -a /dev/$SWAPDEV >/dev/null 2>&1
		while read _dev _mp _fstype _rest; do
			[[ $_fstype == swap ]] &&
				/mnt/sbin/swapctl -a $_dev >/dev/null 2>&1
		done </mnt/etc/fstab
	fi

	if [[ -n $PACKAGE_PATH ]]; then
		grep -v '^[     ]*installpath[  ]*=' /mnt/etc/pkg.conf 2>/dev/null >/tmp/pkgconf
		print -r -- "installpath = $PACKAGE_PATH" >>/tmp/pkgconf
		cp /tmp/pkgconf /mnt/etc/pkg.conf
	fi

	echo -n "Creando nodos de dispositivos ..."
	(cd /mnt/dev; sh MAKEDEV all
		for _dev in $(get_dkdevs) $(get_cddevs) $MTDEVS; do
			sh MAKEDEV $_dev
		done
	)
	echo "listo."

	rm -f /mnt/var/run/ld.so.hints

	[[ -x /mnt/$MODE.site ]] && /mnt/usr/sbin/chroot /mnt /$MODE.site

	makedev $(bioctl $ROOTDISK 2>/dev/null | sed -n 's/.*<\(.*\)>$/\1/p')
	md_installboot $ROOTDISK

	if [[ -f /mnt/bsd.mp ]] && ((NCPU > 1)); then
		echo "Máquina multiprocesador; usando bsd.mp en lugar de bsd."
		mv /mnt/bsd /mnt/bsd.sp 2>/dev/null
		mv /mnt/bsd.mp /mnt/bsd
	fi

	update_firmware

	store_random

	cat <<__EOT

FELICITACIONES! El proceso para $_SMODE ha sido completado con éxito!
 Para iniciar el nuevo sistema, ingrese 'reboot' en la línea de comandos.
__EOT
	[[ $MODE == install ]] && cat <<__EOT
Cuando ingrese por primera vez, por favor lea correo usando 
el comando 'mail'.
__EOT

	md_congrats
	[[ $MODE == upgrade ]] && \
		echo "Tras reiniciar, ejecute sysmerge(8) para actualizar configuración de su sistema."
	$AUTO && >/ai.done
}


ROOTDISK=
ROOTDEV=
PACKAGE_PATH=

SETDIR="$VNAME/$ARCH"
CGI_INFO=/tmp/cgiinfo
CGI_TZ=
CGI_TIME=
CGI_METHOD=
INSTALL=
METHOD=
HTTP_DIR=
HTTP_SEC=/tmp/httpsec
HTTP_LIST=/tmp/httplist
WLANLIST=/tmp/wlanlist
FSTABFLAG=-f

for _opt in d f l m n p s; do
	ulimit -$_opt unlimited
done

dmesg | sed -n '/^OpenBSD /h;/^OpenBSD /!H;${g;p;}' >/var/run/dmesg.boot

# Are we in a real release, or a snapshot?  If this is a snapshot
# install media, default us to a snapshot directory.
HTTP_SETDIR=$SETDIR
set -- $(scan_dmesg "/^OpenBSD $VNAME\([^ ]*\).*$/s//\1/p")
[[ $1 == -!(stable) ]] && HTTP_SETDIR=snapshots/$ARCH

# Scan /var/run/dmesg.boot for interesting devices.
MTDEVS=$(scan_dmesg "${MDMTDEVS:-/^[cms]t[0-9][0-9]* /s/ .*//p}")
NIFS=0
DISPLAY=$(scan_dmesg '/^wsdisplay[0-9]* /s/ .*//p')

CONSOLE=$(scan_dmesg '/^\([^ ]*\).*: console$/s//\1/p')
CONSOLE=${CONSOLE% }
[[ -n $CONSOLE ]] && CSPEED=$(stty speed </dev/console)

# Look for the serial device matching the console. If we are not installing
# from a serial console, just find the first serial device that could be used
# as a console. If a suitable device is found, set CDEV, CTTY, CSPEED, CPROM.
md_consoleinfo

# Selected sets will be installed in the order they are listed in $THESETS.
# Ensure that siteXX.tgz is the *last* set listed so its contents overwrite
# the contents of the other sets, not the other way around.
THESETS="bsd bsd.rd bsd.mp $MDSETS"
: ${DEFAULTSETS:="bsd bsd.rd"}
for _set in base comp man game xbase xshare xfont xserv site; do
	THESETS="$THESETS ${_set}${VERSION}.tgz"
 	#siteXX si esta por defecto
	#isin $_set site && continue
	DEFAULTSETS="$DEFAULTSETS ${_set}${VERSION}.tgz"
done
# Since etc${VERSION}.tgz is not in DEFAULTSETS for upgrades, it can always be
# in SANESETS.
SANESETS="${SANESETS:-bsd} base${VERSION}.tgz"

# prepare COLUMNS sanely
COLUMNS=$(stty -a </dev/console | sed -n '/columns/{s/^.* \([0-9]*\) columns.*$/\1/;p;}')
((COLUMNS == 0)) && COLUMNS=80

# decide upon an editor
: ${EDITOR:=ed}
[[ -x /usr/bin/vi ]] && EDITOR=vi
export EDITOR COLUMNS

# umount all filesystems, just in case we are re-running install or upgrade.
cd /
umount -af 1>/dev/null 2>&1

for _ifs in $(get_ifdevs dhcp); do
	set -- $(v4_info $_ifs)
	[[ $1 == UP && -n $2 ]] && continue
	ifconfig $_ifs delete down -group dhcp 2>/dev/null
done

get_responsefile() {
	local _rf _ifdev _mac _mode _server _lf
	action=
 
	[[ -f /auto_upgrade.conf ]] && _rf=/auto_upgrade.conf _mode=upgrade
	[[ -f /auto_install.conf ]] && _rf=/auto_install.conf _mode=install
	[[ -f $_rf ]] && cp $_rf /ai.$_mode.conf && action=$_mode && return
 
	# Select a network interface for initial dhcp request.
	# Ask if multiple were found and system was not netbooted.
	# Extract server ip address and installer mode from lease file.
	# Prime hostname with host-name option.
	for _ifdev in ''; do
		[[ -x /sbin/dhclient ]] || break
		set -- $(get_ifdevs netboot)
		(($# == 0)) && set -- $(get_ifdevs)
		(($# == 1)) && _ifdev=$1
		while (($# > 1)); do
			ask_which "Interfaces de red" \
				"debería usarse para la petición inicial de DHCP" "$*"
			isin "$resp" $* && _ifdev=$resp && break
		done
		[[ -n $_ifdev ]] && dhclient $_ifdev || break
		_lf=/var/db/dhclient.leases.$_ifdev
		_server=$(sed "/^ *next-server /!d;s///;s/;$//;q" $_lf)
		_mode=$(sed -E '/^ *filename "auto_(install|upgrade)";$/!d;s//\1/;q' $_lf)
		hostname "$(sed -E '/^ *option host-name "(.*)";$/!d;s//\1/;q' $_lf)"
	done

	# Fetch response file if server and mode are known, otherwise tell which
	# one was missing. First try to fetch mac-mode.conf, then mode.conf.
	if [[ -n $_server && -n $_mode ]]; then
		_mac=$(ifconfig $_ifdev | sed 's/.*lladdr \(.*\)/\1/p;d')
		for _rf in {$_mac-,}$_mode; do
			_url=http://$_server/$_rf.conf
			echo "Recibiendo $_url"
			if ftp -Vo "/ai.$_mode.conf" "$_url" 2>/dev/null; then
				action=$_mode
				ifconfig $_ifdev delete down 2>/dev/null
				return 0
			fi

		done
	else
		[[ -z $_server ]] && echo "Could not determine next-server."
		[[ -z $_mode ]] && echo "Could not determine auto mode."
	fi

	# Ask for url or local path to response file. Provide a default url if
	# server was found in lease file.
	while :; do
		ask "Localización del archivo de respuestas?" \
			"${_server:+http://$_server/install.conf}"
		[[ -n $resp ]] && _rf=$resp && break
	done
 
	# Ask for the installer mode only if auto-detection failed.
	_mode=$(echo "$_rf" | sed -En 's/^.*(install|upgrade).conf$/\1/p')
	while [[ -z $_mode ]]; do
		ask "(I)nstall or (U)pgrade?"
		[[ $resp == [iI]* ]] && _mode=install
		[[ $resp == [uU]* ]] && _mode=upgrade
	done
 
	echo "Recibiendo $_rf"
	[[ -f $_rf ]] && _rf="file://$_rf"
	ftp -Vo "/ai.$_mode.conf" "$_rf" 2>/dev/null && action=$_mode
	ifconfig $_ifdev delete down 2>/dev/null
	[[ -n $action ]]
}

if ! $AUTO; then
	cat <<__EOT
En cualquier pregunta, excepto claves puede escapar al interprete de comandos
tecleando '!'. Las respuestas por defecto se presentan entre [] y se seleccionan
presionando RETORNO.  Puede salir de este programa presionando
Control-C, pero esto puede dejar su sistema en un estado inconsistente.

__EOT
elif [[ -z $RESPFILE ]]; then
	if ! get_responsefile; then
		echo "No se encontró archivo de respuesta; saliendo de modo no-interactivo."
		exit 1
	fi
	rm -f /ai.done
	echo "Realizando acción no-interactiva: $action..."
	/$action -af /ai.$action.conf 2>&1 </dev/null | sed 's/^.*//;w/ai.log'
	if [[ -f /ai.done ]]; then
		while _lf=/mnt/var/log/ai.log.$RANDOM && test -e $_lf; do done
		cp /ai.log $_lf
		chmod 600 $_lf
		_lf=${_lf#/mnt}
		cat <<__EOT >>/mnt/etc/rc.firsttime
( /usr/bin/mail -s '$(hostname) $action log' root < $_lf &&
	rm $_lf ) >/dev/null 2>&1 &
__EOT
		exec reboot
	else
		echo "falló; revisar /ai.log"
		exit 1
	fi
else
	cp $RESPFILE /ai.conf || exit
fi


SETDIR=/
LANG=es
_SLANG=es
_SMODE=$MODE;
case $MODE in
upgrade)
_SMODE="actualizar" ;;
install)
_SMODE="instalar" ;;
esac


# Configur the terminal and keyboard.
set_term

if [[ $MODE == install ]]; then
	ask_until "¿Nombre de la máquina? (forma corta, e.g. 'foo')" "$(hostname -s)"
	[[ ${resp%%.*} != $(hostname -s) ]] && hostname $resp
	THESETS="$THESETS site$VERSION-$(hostname -s).tgz"

	echo
	donetconfig

	((NIFS != 0)) && startcgiinfo

	echo
	while :; do
		askpassword "¿Clave para la cuenta root?"
		_rootpass="$_password"
		[[ -n "$_password" ]] && break
		echo "Debe establecer una contraseña para root."
	done

	rootkey=
	$AUTO && ask "¿Llave ssh pública para la cuenta root?" none &&
		[[ $resp != none ]] && rootkey=$resp

	questions
	user_setup

	set_timezone /var/tzlist
	echo
fi

diskinfo() {
	local _d
	for _d; do
		makedev $_d
		echo -n "$_d: "
		disklabel -dpg $_d 2>/dev/null |
		sed	-e '/^label: /{s,,,;s/ *$//;s/^$/<no label>/;H;d;}' \
			-e '/.*# total bytes: \(.*\)/{s//(\1)/;H;}' \
			-e '$!d;x;s/\n/ /'
		rm -f /dev/{r,}$_d?
	done
}

# Get ROOTDISK, ROOTDEV and SWAPDEV.
while :; do
	echo "Los discos disponibles son: $(get_dkdevs | sed 's/^$/none/')."
	_ask "¿Cúal es el disco raíz? ('?' muestra detalles)" \
		$(get_dkdevs | sed 's/ .*//') || continue
	case $resp in
	"?")	diskinfo $(get_dkdevs);;
	'')	;;
	*)	isin "$resp" $(get_dkdevs) && break
		echo "no hay tal disco";;
	esac
done
makedev $resp || exit

ROOTDISK=$resp
ROOTDEV=${ROOTDISK}a
SWAPDEV=${ROOTDISK}b

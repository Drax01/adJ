<<<<<<< HEAD
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.23 2016/10/26 06:22:07 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Oct 12 21:02:52 2016
+++ base/debug/stack_trace_posix.cc	Wed Oct 19 12:55:56 2016
@@ -571,6 +571,9 @@ class SandboxSymbolizeHelper {
=======
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.22 2016/05/27 06:28:20 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed May 25 04:54:06 2016
+++ base/debug/stack_trace_posix.cc	Thu May 26 08:09:39 2016
@@ -572,6 +572,9 @@ class SandboxSymbolizeHelper {
>>>>>>> 7e8581aadfac3773e05d83a662dae23a33c44e10
   // for the modules that are loaded in the current process.
   // Returns true on success.
   bool CacheMemoryRegions() {
+#if defined(OS_OPENBSD)
+    return false;
+#else
     // Reads /proc/self/maps.
     std::string contents;
     if (!ReadProcMaps(&contents)) {
<<<<<<< HEAD
@@ -586,6 +589,7 @@ class SandboxSymbolizeHelper {
=======
@@ -587,6 +590,7 @@ class SandboxSymbolizeHelper {
>>>>>>> 7e8581aadfac3773e05d83a662dae23a33c44e10
 
     is_initialized_ = true;
     return true;
+#endif
   }
 
   // Opens all object files and caches their file descriptors.
<<<<<<< HEAD
@@ -718,7 +722,7 @@ StackTrace::StackTrace() {
=======
@@ -717,7 +721,7 @@ StackTrace::StackTrace() {
>>>>>>> 7e8581aadfac3773e05d83a662dae23a33c44e10
   // NOTE: This code MUST be async-signal safe (it's used by in-process
   // stack dumping signal handler). NO malloc or stdio is allowed here.
 
-#if !defined(__UCLIBC__)
+#if !defined(__UCLIBC__) && !defined(OS_BSD)
   // Though the backtrace API man page does not list any possible negative
   // return values, we take no chance.
   count_ = base::saturated_cast<size_t>(backtrace(trace_, arraysize(trace_)));

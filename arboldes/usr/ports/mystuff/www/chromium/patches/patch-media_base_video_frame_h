<<<<<<< HEAD
$OpenBSD: patch-media_base_video_frame_h,v 1.5 2016/10/26 06:22:08 robert Exp $
--- media/base/video_frame.h.orig.port	Wed Oct 12 21:03:00 2016
+++ media/base/video_frame.h	Wed Oct 19 12:56:06 2016
@@ -63,7 +63,7 @@ class MEDIA_EXPORT VideoFrame : public base::RefCounte
=======
$OpenBSD: patch-media_base_video_frame_h,v 1.2 2016/05/27 06:28:21 robert Exp $
--- media/base/video_frame.h.orig.port	Wed May 25 21:01:03 2016
+++ media/base/video_frame.h	Thu May 26 08:09:47 2016
@@ -61,7 +61,7 @@ class MEDIA_EXPORT VideoFrame : public base::RefCounte
>>>>>>> 7e8581aadfac3773e05d83a662dae23a33c44e10
     STORAGE_UNOWNED_MEMORY = 2,  // External, non owned data pointers.
     STORAGE_OWNED_MEMORY = 3,  // VideoFrame has allocated its own data buffer.
     STORAGE_SHMEM = 4,         // Pixels are backed by Shared Memory.
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
     // TODO(mcasas): Consider turning this type into STORAGE_NATIVE or another
     // meaningful name and handle it appropriately in all cases.
     STORAGE_DMABUFS = 5,  // Each plane is stored into a DmaBuf.
<<<<<<< HEAD
@@ -212,7 +212,7 @@ class MEDIA_EXPORT VideoFrame : public base::RefCounte
       uint8_t* a_data,
=======
@@ -207,7 +207,7 @@ class MEDIA_EXPORT VideoFrame : public base::RefCounte
       const gfx::GpuMemoryBufferHandle& v_handle,
>>>>>>> 7e8581aadfac3773e05d83a662dae23a33c44e10
       base::TimeDelta timestamp);
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   // Wraps provided dmabufs
   // (https://www.kernel.org/doc/Documentation/dma-buf-sharing.txt) with a
   // VideoFrame. The dmabuf fds are dup()ed on creation, so that the VideoFrame
<<<<<<< HEAD
@@ -371,7 +371,7 @@ class MEDIA_EXPORT VideoFrame : public base::RefCounte
=======
@@ -362,7 +362,7 @@ class MEDIA_EXPORT VideoFrame : public base::RefCounte
>>>>>>> 7e8581aadfac3773e05d83a662dae23a33c44e10
   const std::vector<gfx::GpuMemoryBufferHandle>& gpu_memory_buffer_handles()
       const;
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   // Returns backing DmaBuf file descriptor for given |plane|, if present, or
   // -1 if not.
   // TODO(mcasas): Rename to DmabufFd() to comply with Style Guide.
<<<<<<< HEAD
@@ -557,7 +557,7 @@ class MEDIA_EXPORT VideoFrame : public base::RefCounte
=======
@@ -543,7 +543,7 @@ class MEDIA_EXPORT VideoFrame : public base::RefCounte
>>>>>>> 7e8581aadfac3773e05d83a662dae23a33c44e10
   // GpuMemoryBuffer handles attached to the video_frame.
   std::vector<gfx::GpuMemoryBufferHandle> gpu_memory_buffer_handles_;
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   // Dmabufs for each plane. If set, this frame has DmaBuf backing in some way.
   base::ScopedFD dmabuf_fds_[kMaxPlanes];
 #endif

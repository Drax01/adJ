<<<<<<< HEAD
$OpenBSD: patch-chrome_browser_ui_views_tabs_tab_drag_controller_cc,v 1.14 2016/10/26 06:22:08 robert Exp $
--- chrome/browser/ui/views/tabs/tab_drag_controller.cc.orig.port	Wed Oct 12 21:02:55 2016
+++ chrome/browser/ui/views/tabs/tab_drag_controller.cc	Wed Oct 19 12:56:01 2016
@@ -281,7 +281,7 @@ void TabDragController::Init(
=======
$OpenBSD: patch-chrome_browser_ui_views_tabs_tab_drag_controller_cc,v 1.12 2016/05/27 06:28:20 robert Exp $
--- chrome/browser/ui/views/tabs/tab_drag_controller.cc.orig.port	Wed May 25 21:00:58 2016
+++ chrome/browser/ui/views/tabs/tab_drag_controller.cc	Thu May 26 08:09:42 2016
@@ -269,7 +269,7 @@ void TabDragController::Init(
>>>>>>> 7e8581aadfac3773e05d83a662dae23a33c44e10
   //     synchronous on desktop Linux, so use that.
   // - Ash
   //     Releasing capture on Ash cancels gestures so avoid it.
-#if defined(OS_LINUX) || defined(USE_ASH)
+#if defined(OS_LINUX) || defined(USE_ASH) || defined(OS_BSD)
   can_release_capture_ = false;
 #endif
   start_point_in_screen_ = gfx::Point(source_tab_offset, mouse_offset.y());
<<<<<<< HEAD
@@ -631,7 +631,7 @@ TabDragController::DragBrowserToNewTabStrip(
=======
@@ -627,7 +627,7 @@ TabDragController::DragBrowserToNewTabStrip(
>>>>>>> 7e8581aadfac3773e05d83a662dae23a33c44e10
     // that to effect the position of any windows.
     SetWindowPositionManaged(browser_widget->GetNativeWindow(), false);
 
-#if !defined(OS_LINUX) || defined(OS_CHROMEOS)
+#if (!defined(OS_BSD) && !defined(OS_LINUX)) || defined(OS_CHROMEOS)
     // EndMoveLoop is going to snap the window back to its original location.
     // Hide it so users don't see this. Hiding a window in Linux aura causes
     // it to lose capture so skip it.
<<<<<<< HEAD
@@ -1830,7 +1830,7 @@ TabDragController::Liveness TabDragController::GetLoca
=======
@@ -1817,7 +1817,7 @@ TabDragController::Liveness TabDragController::GetLoca
>>>>>>> 7e8581aadfac3773e05d83a662dae23a33c44e10
     if (dragged_window)
       exclude.insert(dragged_window);
   }
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_BSD) || defined(OS_LINUX)) && !defined(OS_CHROMEOS)
   // Exclude windows which are pending deletion via Browser::TabStripEmpty().
   // These windows can be returned in the Linux Aura port because the browser
   // window which was used for dragging is not hidden once all of its tabs are

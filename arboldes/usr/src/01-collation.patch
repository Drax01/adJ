diff -ruN -x obj -x CVS -x *~ src-orig/lib/libc/locale/Makefile.inc src/lib/libc/locale/Makefile.inc
--- src-orig/lib/libc/locale/Makefile.inc	Sat Mar  9 11:16:47 2013
+++ src/lib/libc/locale/Makefile.inc	Mon Mar 25 22:08:03 2013
@@ -9,7 +9,7 @@
 	wcstombs.c wctob.c wctomb.c wcstof.c wcstod.c wcstold.c wcstol.c \
 	wcstoul.c wcstoll.c wcstoull.c wcstoimax.c wcstoumax.c \
 	setrunelocale.c runeglue.c rune.c runetable.c ___runetype_mb.c \
-	_wctrans.c wcsxfrm.c
+	_wctrans.c wcsxfrm.c collate.c
 
 MAN+=	nl_langinfo.3 setlocale.3 iswalnum.3 towlower.3 \
 	btowc.3 mblen.3 mbrlen.3 mbrtowc.3 mbsinit.3 mbsrtowcs.3 \
@@ -39,4 +39,4 @@
 	mbsrtowcs.3 mbsnrtowcs.3 \
 	wcsrtombs.3 wcsnrtombs.3
 
-CFLAGS+=-I${.CURDIR} -I${LIBCSRCDIR}/citrus
+CFLAGS+=-I${.CURDIR} -I${LIBCSRCDIR}/citrus -DCOLLATE_DEBUG
diff -ruN -x obj -x CVS -x *~ src-orig/lib/libc/locale/collate.c src/lib/libc/locale/collate.c
--- src-orig/lib/libc/locale/collate.c	Wed Dec 31 19:00:00 1969
+++ src/lib/libc/locale/collate.c	Sat Mar 30 09:07:00 2013
@@ -0,0 +1,427 @@
+/*-
+ * Copyright (c) 1995 Alex Tatmanjants <alex@elvisti.kiev.ua>
+ *		at Electronni Visti IA, Kiev, Ukraine.
+ *			All rights reserved.
+ *
+ * Copyright (c) 2011 The FreeBSD Foundation
+ * All rights reserved.
+ * Portions of this software were developed by David Chisnall
+ * under sponsorship from the FreeBSD Foundation.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+/**
+ * Public domain according to Colombian Legislation. 
+ * http://www.pasosdejesus.org/dominio_publico_colombia.html
+ * 2013. vtamara@pasosdeJesus.org.
+ */
+
+
+#include <sys/cdefs.h>
+#include <arpa/inet.h>
+
+#include <errno.h>
+#include <paths.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sysexits.h>
+#include <unistd.h>
+#include <wchar.h>
+
+#include "collate.h"
+#include "rune.h"
+#include "runetype.h"
+
+#define TABLE_SIZE 100
+
+/*
+ * To avoid modifying the original (single-threaded) code too much, we'll just
+ * define the old globals as fields inside the table.
+ *
+ * We also modify the collation table test functions to search the thread-local
+ * table first and the global table second.  
+ */
+#define __collate_substitute_table (*__collate_substitute_table_ptr)
+#define __collate_char_pri_table (*__collate_char_pri_table_ptr)
+
+#define __collate_substitute_nontrivial (table->__collate_substitute_nontrivial)
+#define __collate_substitute_table_ptr (table->__collate_substitute_table_ptr)
+#define __collate_char_pri_table_ptr (table->__collate_char_pri_table_ptr)
+#define __collate_chain_pri_table (table->__collate_chain_pri_table)
+int __collate_load_error;
+
+
+struct __collate __global_collate = {
+	1, 0
+};
+
+struct __collate __C_collate = {
+	1, 0
+};
+
+__dead void __collate_err(int ex, const char *f);
+
+int
+__collate_load_tables_l(const char *encoding, struct __collate *table);
+
+/*
+ * Allocates space and loads collation table for the given locale and 
+ * returns it
+ */
+void *
+__collate_load(const char *encoding)
+{
+	if (strcmp(encoding, "C") == 0 || strcmp(encoding, "POSIX") == 0) {
+		return &__C_collate;
+	}
+	struct __collate *table = calloc(sizeof(struct __collate), 1);
+	/* FIXME: Make sure that _LDP_CACHE is never returned.  
+	 * We should be doing the caching outside of this section */
+	if (__collate_load_tables_l(encoding, table) != _LDP_LOADED) {
+		free(table);
+		return NULL;
+	}
+
+	return table;
+}
+
+/**
+ * Load the collation tables for the specified encoding into the global table.
+ */
+int
+__collate_load_tables(const char *encoding)
+{
+	int ret = __collate_load_tables_l(encoding, &__global_collate);
+	__collate_load_error = __global_collate.__collate_load_error;
+	return ret;
+}
+
+/**
+ * Load the collation tables for the specified encoding into table 
+ * given as parameter.
+ */
+int
+__collate_load_tables_l(const char *encoding, struct __collate *table)
+{
+	FILE *fp;
+	int i, saverr, chains;
+	uint32_t u32;
+	char strbuf[COLLATE_MAX_STR_LEN], buf[PATH_MAX];
+	void *TMP_substitute_table, *TMP_char_pri_table, *TMP_chain_pri_table;
+
+	/* 'encoding' must be already checked. */
+	if (strcmp(encoding, "C") == 0 || strcmp(encoding, "POSIX") == 0) {
+		table->__collate_load_error = 1;
+		return (_LDP_CACHE);
+	}
+
+	/* '_PATH_LOCALE' must be already set & checked. */
+	/* Range checking not needed, encoding has fixed size */
+	(void)strlcpy(buf, _PATH_LOCALE, PATH_MAX);
+	(void)strlcat(buf, "/", PATH_MAX);
+	(void)strlcat(buf, encoding, PATH_MAX);
+	(void)strlcat(buf, "/LC_COLLATE", PATH_MAX);
+	if ((fp = fopen(buf, "re")) == NULL)
+		return (_LDP_ERROR);
+
+	if (fread(strbuf, sizeof(strbuf), 1, fp) != 1) {
+		saverr = errno;
+		(void)fclose(fp);
+		errno = saverr;
+		return (_LDP_ERROR);
+	}
+	chains = -1;
+	if (strcmp(strbuf, COLLATE_VERSION1_2) == 0)
+		chains = 1;
+	if (chains < 0) {
+		(void)fclose(fp);
+		errno = EFTYPE;
+		return (_LDP_ERROR);
+	}
+	if (chains) {
+		if (fread(&u32, sizeof(u32), 1, fp) != 1) {
+			saverr = errno;
+			(void)fclose(fp);
+			errno = saverr;
+			return (_LDP_ERROR);
+		}
+		if ((chains = (int)ntohl(u32)) < 1) {
+			(void)fclose(fp);
+			errno = EFTYPE;
+			return (_LDP_ERROR);
+		}
+	} else
+		chains = TABLE_SIZE;
+
+	if ((TMP_substitute_table =
+	     malloc(sizeof(__collate_substitute_table))) == NULL) {
+		saverr = errno;
+		(void)fclose(fp);
+		errno = saverr;
+		return (_LDP_ERROR);
+	}
+	if ((TMP_char_pri_table =
+	     malloc(sizeof(__collate_char_pri_table))) == NULL) {
+		saverr = errno;
+		free(TMP_substitute_table);
+		(void)fclose(fp);
+		errno = saverr;
+		return (_LDP_ERROR);
+	}
+	if ((TMP_chain_pri_table =
+	     malloc(sizeof(*__collate_chain_pri_table) * chains)) == NULL) {
+		saverr = errno;
+		free(TMP_substitute_table);
+		free(TMP_char_pri_table);
+		(void)fclose(fp);
+		errno = saverr;
+		return (_LDP_ERROR);
+	}
+
+#define FREAD(a, b, c, d) \
+{ \
+	if (fread(a, b, c, d) != c) { \
+		saverr = errno; \
+		free(TMP_substitute_table); \
+		free(TMP_char_pri_table); \
+		free(TMP_chain_pri_table); \
+		(void)fclose(d); \
+		errno = saverr; \
+		return (_LDP_ERROR); \
+	} \
+}
+
+	FREAD(TMP_substitute_table, sizeof(__collate_substitute_table), 1, fp);
+	FREAD(TMP_char_pri_table, sizeof(__collate_char_pri_table), 1, fp);
+	FREAD(TMP_chain_pri_table,
+	      sizeof(*__collate_chain_pri_table), chains, fp);
+	(void)fclose(fp);
+
+	if (__collate_substitute_table_ptr != NULL)
+		free(__collate_substitute_table_ptr);
+	__collate_substitute_table_ptr = TMP_substitute_table;
+	if (__collate_char_pri_table_ptr != NULL)
+		free(__collate_char_pri_table_ptr);
+	__collate_char_pri_table_ptr = TMP_char_pri_table;
+	for (i = 0; i < UCHAR_MAX + 1; i++) {
+		__collate_char_pri_table[i].prim =
+		    ntohl(__collate_char_pri_table[i].prim);
+		__collate_char_pri_table[i].sec =
+		    ntohl(__collate_char_pri_table[i].sec);
+	}
+	if (__collate_chain_pri_table != NULL)
+		free(__collate_chain_pri_table);
+	__collate_chain_pri_table = TMP_chain_pri_table;
+	for (i = 0; i < chains; i++) {
+		__collate_chain_pri_table[i].prim =
+		    ntohl(__collate_chain_pri_table[i].prim);
+		__collate_chain_pri_table[i].sec =
+		    ntohl(__collate_chain_pri_table[i].sec);
+	}
+	__collate_substitute_nontrivial = 0;
+	for (i = 0; i < UCHAR_MAX + 1; i++) {
+		if (__collate_substitute_table[i][0] != i ||
+		    __collate_substitute_table[i][1] != 0) {
+			__collate_substitute_nontrivial = 1;
+			break;
+		}
+	}
+	table->__collate_load_error = 0;
+
+	return (_LDP_LOADED);
+}
+
+size_t
+strlcpy_wc(wchar_t *d, u_char *s, size_t sd) {
+	if (d == NULL || s == NULL || sd == 0) {
+		return 0;
+	}
+	int t = 0;
+	while (*s != '\0' && sd > 0) {
+		*d = (wchar_t)*s;
+		s++; d++;
+		sd--;
+		t++;
+	}
+	return  t;
+}
+
+wchar_t *
+__collate_strdup_w(wchar_t *s)
+{
+	wchar_t *t = wcsdup(s);
+
+	if (t == NULL)
+		__collate_err(EX_OSERR, __func__);
+	return (t);
+}
+
+
+/** 
+ * Returns a newly allocated wide string with the substitions of the given
+ * table applied to the wide string s
+ */
+wchar_t *
+__collate_substitute_w(struct __collate *table, const wchar_t *s)
+{
+	int dest_len, len, nlen;
+	int delta = wcslen(s);
+	wchar_t *dest_str = NULL;
+
+	if (s == NULL || *s == L'\0')
+		return (__collate_strdup_w(L""));
+	delta += delta / 8;
+	dest_str = malloc((dest_len = delta)*sizeof(wchar_t));
+	if (dest_str == NULL)
+		__collate_err(EX_OSERR, __func__);
+	len = nlen = 0;
+	while (*s != L'\0') {
+		nlen = len + strlen(__collate_substitute_table[(u_char)*s]);
+		if (dest_len <= nlen) {
+			size_t size = (nlen + delta)*sizeof(wchar_t);
+			wchar_t *ndest_str = (wchar_t *)realloc(dest_str, size);
+			if (ndest_str == NULL) {
+				free(dest_str);
+				__collate_err(EX_OSERR, __func__);
+			}
+			dest_str = ndest_str;
+			dest_len = nlen + delta;
+		}
+		(void)strlcpy_wc(dest_str + len, 
+				__collate_substitute_table[(u_char)*s++], 
+				dest_len - len);
+		len = nlen;
+	}
+	dest_str[len] = L'\0';
+	return (dest_str);
+}
+
+
+/*
+ * Fills the primary and secondary values of the first character or chain 
+ * beginning in t. In len returns the amount of characters of t processed.
+ */
+void
+__collate_lookup_w(struct __collate *table, const wchar_t *t, int *len, int *prim, int *sec)
+{
+	struct __collate_st_chain_pri *p2;
+
+	*len = 1;
+	*prim = *sec = 0;
+	for (p2 = __collate_chain_pri_table; p2->str[0] != '\0'; p2++) {
+		if (*t == (wchar_t)p2->str[0] &&
+		    strncmp_wc((wchar_t *)t, p2->str, strlen(p2->str)) == 0) {
+			*len = strlen(p2->str);
+			*prim = p2->prim;
+			*sec = p2->sec;
+			return;
+		}
+	}
+	*prim = __collate_char_pri_table[(u_char)*t].prim;
+	*sec = __collate_char_pri_table[(u_char)*t].sec;
+}
+
+void
+__collate_err(int ex, const char *f)
+{
+	const char *s;
+	int serrno = errno;
+
+	extern char *__progname;
+	s = __progname;
+
+	write(STDERR_FILENO, s, strlen(s));
+	write(STDERR_FILENO, ": ", 2);
+	s = f;
+	write(STDERR_FILENO, s, strlen(s));
+	write(STDERR_FILENO, ": ", 2);
+	s = strerror(serrno);
+	write(STDERR_FILENO, s, strlen(s));
+	write(STDERR_FILENO, "\n", 1);
+	exit(ex);
+}
+
+
+
+#ifdef COLLATE_DEBUG
+void
+__collate_print_tables(struct __collate *table)
+{
+	int i;
+	struct __collate_st_chain_pri *p2;
+	if (table == NULL) {
+		table = &__global_collate;
+ 	}
+
+	printf("Substitute table:\n");
+	for (i = 0; i < UCHAR_MAX + 1; i++)
+	    if (i != *__collate_substitute_table[i])
+		printf("\t'%c' --> \"%s\"\n", i,
+		       __collate_substitute_table[i]);
+	printf("Chain priority table:\n");
+	for (p2 = __collate_chain_pri_table; p2->str[0] != '\0'; p2++)
+		printf("\t\"%s\" : %d %d\n", p2->str, p2->prim, p2->sec);
+	printf("Char priority table:\n");
+	for (i = 0; i < UCHAR_MAX + 1; i++)
+		printf("\t'%c' : %d %d\n", i, __collate_char_pri_table[i].prim,
+		       __collate_char_pri_table[i].sec);
+}
+#endif
+
+int 
+strncmp_wc(wchar_t *ws, char *cs, size_t l) 
+{
+	if (ws == NULL || cs == NULL || l == 0) {
+		return -1;
+	}
+	while (*ws != 0 && *cs != 0 && l > 0 && *ws == (wchar_t)*cs) {
+		ws++;
+		cs++;
+		l--;
+	}
+	return *ws - *cs;
+}
+
+
+/** Duplicate a mb string as wc string, 
+ * https://buildsecurityin.us-cert.gov/bsi/articles/knowledge/coding/769-BSI.html
+ */
+wchar_t *__dup_as_wcs_l(const char *s)
+{
+	int numc = mbstowcs(NULL, s, 0) + 1; 
+	if (numc == 0 || numc > ULONG_MAX / sizeof(wchar_t)
+			|| numc == (size_t)-1) { 
+		errno = EINVAL;
+		return NULL;
+	}
+	wchar_t *ws = (wchar_t *)malloc(numc * sizeof(wchar_t) );
+	if (ws == NULL) {
+		errno = ENOMEM;
+		return NULL;
+	}
+	mbstowcs(ws, s, numc);
+
+	return ws;
+}
+
+
diff -ruN -x obj -x CVS -x *~ src-orig/lib/libc/locale/collate.h src/lib/libc/locale/collate.h
--- src-orig/lib/libc/locale/collate.h	Wed Dec 31 19:00:00 1969
+++ src/lib/libc/locale/collate.h	Sat Mar 30 09:07:33 2013
@@ -0,0 +1,111 @@
+/*-
+ * Copyright (c) 1995 Alex Tatmanjants <alex@elvisti.kiev.ua>
+ *		at Electronni Visti IA, Kiev, Ukraine.
+ *			All rights reserved.
+ *
+ * Copyright (c) 2011 The FreeBSD Foundation
+ * All rights reserved.
+ * Portions of this software were developed by David Chisnall
+ * under sponsorship from the FreeBSD Foundation.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * $FreeBSD: src/lib/libc/locale/collate.h,v 1.17 2012/11/17 01:49:29 svnexp Exp $
+ */
+/*-
+ * Copyright (c) 2000, 2001 Alexey Zelkin <phantom@FreeBSD.org>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * From lib/libc/locale/ldpart.h of FreeBSD
+ */
+
+#ifndef _COLLATE_H_
+#define	_COLLATE_H_
+
+#include <sys/cdefs.h>
+#include <sys/types.h>
+#include <limits.h>
+#include <wchar.h>
+
+#define COLLATE_MAX_STR_LEN 10
+#define COLLATE_VERSION1_2 "1.2\n"
+
+struct __collate_st_char_pri {
+		int prim, sec;
+};
+struct __collate_st_chain_pri {
+	u_char str[COLLATE_MAX_STR_LEN];
+	int prim, sec;
+};
+
+struct __collate {
+	int __collate_load_error;
+	int __collate_substitute_nontrivial;
+
+	u_char (*__collate_substitute_table_ptr)[UCHAR_MAX + 1][COLLATE_MAX_STR_LEN];
+	struct __collate_st_char_pri (*__collate_char_pri_table_ptr)[UCHAR_MAX + 1];
+	struct __collate_st_chain_pri *__collate_chain_pri_table;
+};
+
+
+/* Current LC_COLLATE */
+struct __collate __global_collate;
+
+__BEGIN_DECLS
+wchar_t *__collate_substitute_w(struct __collate *table, const wchar_t *s);
+void 	__collate_lookup_w(struct __collate *table, const wchar_t *t, int *len, int *prim, int *sec);
+int	__collate_load_tables(const char *);
+int	__collate_range_cmp(struct __collate *, int, int);
+#ifdef COLLATE_DEBUG
+void	__collate_print_tables(struct __collate *);
+#endif
+int 	strncmp_wc(wchar_t *ws, char *cs, size_t l);
+wchar_t *__dup_as_wcs_l(const char *s);
+__END_DECLS
+
+#define _LDP_LOADED 0
+#define _LDP_ERROR  (-1)
+#define _LDP_CACHE  1
+
+
+#endif /* !_COLLATE_H_ */
diff -ruN -x obj -x CVS -x *~ src-orig/lib/libc/locale/setlocale.c src/lib/libc/locale/setlocale.c
--- src-orig/lib/libc/locale/setlocale.c	Tue May 24 07:21:15 2011
+++ src/lib/libc/locale/setlocale.c	Sat Mar 30 06:26:01 2013
@@ -40,6 +40,7 @@
 #include <string.h>
 #include <unistd.h>
 
+#include "collate.h"
 #include "rune.h"
 #include "rune_local.h"
 /*
@@ -200,7 +201,12 @@
 		__install_currentrunelocale_ctype();
 		break;
 	case LC_MESSAGES:
+		break;
 	case LC_COLLATE:
+ 		if (__collate_load_tables("C")) {
+			return;
+		}
+		break;
 	case LC_MONETARY:
 	case LC_NUMERIC:
 	case LC_TIME:
@@ -236,9 +242,13 @@
 			return -1;
 		__install_currentrunelocale_ctype();
 		break;
-
 	case LC_MESSAGES:
+		break;
 	case LC_COLLATE:
+		if (__collate_load_tables(locname)) {
+			return -1;
+		}	
+		break;
 	case LC_MONETARY:
 	case LC_NUMERIC:
 	case LC_TIME:
diff -ruN -x obj -x CVS -x *~ src-orig/lib/libc/locale/wcscoll.3 src/lib/libc/locale/wcscoll.3
--- src-orig/lib/libc/locale/wcscoll.3	Wed Dec 31 19:00:00 1969
+++ src/lib/libc/locale/wcscoll.3	Fri Mar 22 08:36:06 2013
@@ -0,0 +1,115 @@
+.\" Copyright (c) 1990, 1991, 1993
+.\"	The Regents of the University of California.  All rights reserved.
+.\"
+.\" This code is derived from software contributed to Berkeley by
+.\" Chris Torek and the American National Standards Committee X3,
+.\" on Information Processing Systems.
+.\"
+.\" Redistribution and use in source and binary forms, with or without
+.\" modification, are permitted provided that the following conditions
+.\" are met:
+.\" 1. Redistributions of source code must retain the above copyright
+.\"    notice, this list of conditions and the following disclaimer.
+.\" 2. Redistributions in binary form must reproduce the above copyright
+.\"    notice, this list of conditions and the following disclaimer in the
+.\"    documentation and/or other materials provided with the distribution.
+.\" 4. Neither the name of the University nor the names of its contributors
+.\"    may be used to endorse or promote products derived from this software
+.\"    without specific prior written permission.
+.\"
+.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+.\" SUCH DAMAGE.
+.\"
+.\"     @(#)strcoll.3	8.1 (Berkeley) 6/4/93
+.\" FreeBSD: src/lib/libc/string/strcoll.3,v 1.11 2001/10/01 16:09:00 ru Exp
+.\" $FreeBSD: src/lib/libc/string/wcscoll.3,v 1.3 2007/01/09 00:28:12 imp Exp $
+.\"
+.Dd $Mdocdate: March 17, 2013
+.Dt WCSCOLL 3
+.Os
+.\" ----------------------------------------------------------------------
+.Sh NAME
+.Nm wcscoll
+.Nd compare wide strings according to current collation
+.\" ----------------------------------------------------------------------
+.Sh SYNOPSIS
+.Fd #include <wchar.h>
+.Ft int
+.Fn wcscoll "const wchar_t *s1" "const wchar_t *s2"
+.\" ----------------------------------------------------------------------
+.Sh DESCRIPTION
+The
+.Fn wcscoll
+function compares the null-terminated strings
+.Fa s1
+and
+.Fa s2
+according to the current locale collation order.
+In the
+.Dq Li C
+locale,
+.Fn wcscoll
+is equivalent to
+.Fn wcscmp .
+.\" ----------------------------------------------------------------------
+.Sh RETURN VALUES
+The
+.Fn wcscoll
+function
+returns an integer greater than, equal to, or less than 0,
+if
+.Fa s1
+is greater than, equal to, or less than
+.Fa s2 .
+.Pp
+No return value is reserved to indicate errors;
+callers should set
+.Va errno
+to 0 before calling
+.Fn wcscoll .
+If it is non-zero upon return from
+.Fn wcscoll ,
+an error has occurred.
+.\" ----------------------------------------------------------------------
+.Sh ERRORS
+The
+.Fn wcscoll
+function will fail if:
+.Bl -tag -width Er
+.It Bq Er EILSEQ
+An invalid wide character code was specified.
+.It Bq Er ENOMEM
+Cannot allocate enough memory for temporary buffers.
+.El
+.\" ----------------------------------------------------------------------
+.Sh SEE ALSO
+.Xr setlocale 3 ,
+.Xr strcoll 3 ,
+.Xr wcscmp 3 ,
+.Xr wcsxfrm 3
+.\" ----------------------------------------------------------------------
+.Sh STANDARDS
+The
+.Fn wcscoll
+function
+conforms to
+ISO/IEC 9899/AMD1:1995
+.Pq Dq ISO C99 .
+.Pp
+The
+.Fn wcsnrtombs
+function conforms to
+.St -p1003.1-2008 .
+.\" ----------------------------------------------------------------------
+.Sh BUGS
+The current implementation is enough only for single byte encodings and UTF-8
+translatable to ISO8859-1.
diff -ruN -x obj -x CVS -x *~ src-orig/lib/libc/locale/wcscoll.c src/lib/libc/locale/wcscoll.c
--- src-orig/lib/libc/locale/wcscoll.c	Sat Feb  9 14:26:52 2013
+++ src/lib/libc/locale/wcscoll.c	Sat Mar 30 07:50:59 2013
@@ -1,6 +1,5 @@
 /*	$OpenBSD: wcscoll.c,v 1.2 2012/12/05 23:20:00 deraadt Exp $ */
 /*	$NetBSD: wcscoll.c,v 1.1 2003/03/02 22:18:16 tshiozak Exp $	*/
-
 /*-
  * Copyright (c)2003 Citrus Project,
  * All rights reserved.
@@ -26,16 +25,99 @@
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  */
+/*-
+ * Copyright (c) 2002 Tim J. Robbins
+ * All rights reserved.
+ *
+ * Copyright (c) 2011 The FreeBSD Foundation
+ * All rights reserved.
+ * Portions of this software were developed by David Chisnall
+ * under sponsorship from the FreeBSD Foundation.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * Adapted from lib/libc/string/wcscoll.c of FreeBSD
+ */
 
-#include <assert.h>
 #include <wchar.h>
 
+#include "collate.h"
+
 /*
- * Compare strings with using collating information.
+ * Compare strings using collating information.
  */
 int
 wcscoll(const wchar_t *s1, const wchar_t *s2)
 {
-	/* XXX: LC_COLLATE should be implemented. */
-	return (wcscmp(s1, s2));
+	int len1, len2, ret, ret2;
+	wint_t prim1, prim2, sec1, sec2;
+	const wchar_t *t1, *t2;
+	wchar_t *tt1, *tt2;
+	struct __collate *table;
+	table = (struct __collate *)&__global_collate;
+
+	if (table->__collate_load_error)
+		return wcscmp(s1, s2);
+
+	len1 = len2 = 1;
+	ret = ret2 = 0;
+	if (table->__collate_substitute_nontrivial) {
+		t1 = tt1 = __collate_substitute_w(table, s1);
+		t2 = tt2 = __collate_substitute_w(table, s2);
+	} else {
+		tt1 = tt2 = NULL;
+		t1 = s1;
+		t2 = s2;
+	}
+	while (*t1 != L'\0' && *t2 != L'\0') {
+		prim1 = prim2 = 0;
+		while (*t1 != L'\0'  && prim1 == 0) {
+			__collate_lookup_w(table, t1, &len1, &prim1, &sec1);
+			t1 += len1;
+		}
+		while (*t2 != L'\0' && prim2 == 0) {
+			__collate_lookup_w(table, t2, &len2, &prim2, &sec2);
+			t2 += len2;
+		}
+		if (prim1 == 0 || prim2 == 0)
+			break;
+		if (prim1 != prim2) {
+			ret = prim1 - prim2;
+			goto end;
+		}
+		if (ret2 == 0)
+			ret2 = sec1 - sec2;
+	}
+	if (*t1 == L'\0' && *t2 != L'\0')
+		ret = -(int)((u_char)*t2);
+	else if (*t1 != L'\0' && *t2 == L'\0')
+		ret = (u_char)*t1;
+	else if (*t1 == L'\0' && *t2 == L'\0')
+		ret = ret2;
+  end:
+	if (tt1 != NULL)
+		free(tt1);
+	if (tt2 != NULL)
+		free(tt2);
+
+	return ret;
 }
diff -ruN -x obj -x CVS -x *~ src-orig/lib/libc/locale/wcsxfrm.3 src/lib/libc/locale/wcsxfrm.3
--- src-orig/lib/libc/locale/wcsxfrm.3	Wed Dec 31 19:00:00 1969
+++ src/lib/libc/locale/wcsxfrm.3	Fri Mar 29 21:20:06 2013
@@ -0,0 +1,267 @@
+.\" Copyright (c) 1990, 1991, 1993
+.\"	The Regents of the University of California.  All rights reserved.
+.\"
+.\" This code is derived from software contributed to Berkeley by
+.\" Chris Torek and the American National Standards Committee X3,
+.\" on Information Processing Systems.
+.\"
+.\" Redistribution and use in source and binary forms, with or without
+.\" modification, are permitted provided that the following conditions
+.\" are met:
+.\" 1. Redistributions of source code must retain the above copyright
+.\"    notice, this list of conditions and the following disclaimer.
+.\" 2. Redistributions in binary form must reproduce the above copyright
+.\"    notice, this list of conditions and the following disclaimer in the
+.\"    documentation and/or other materials provided with the distribution.
+.\" 4. Neither the name of the University nor the names of its contributors
+.\"    may be used to endorse or promote products derived from this software
+.\"    without specific prior written permission.
+.\"
+.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+.\" SUCH DAMAGE.
+.\"
+.\"     @(#)strxfrm.3	8.1 (Berkeley) 6/4/93
+.\" FreeBSD: src/lib/libc/string/strxfrm.3,v 1.16 2002/09/06 11:24:06 tjr Exp
+.\" $FreeBSD$
+.\"
+.Dd October 4, 2002
+.Dt WCSXFRM 3
+.Os
+.Sh NAME
+.Nm wcsxfrm
+.Nd transform a wide string under locale
+.Sh LIBRARY
+.Lb libc
+.Sh SYNOPSIS
+.In wchar.h
+.Ft size_t
+.Fn wcsxfrm "wchar_t * restrict dst" "const wchar_t * restrict src" "size_t n"
+.Sh DESCRIPTION
+The
+.Fn wcsxfrm
+function transforms a null-terminated wide character string pointed to by
+.Fa src
+according to the current locale collation order
+then copies the transformed string
+into
+.Fa dst .
+No more than
+.Fa n
+wide characters are copied into
+.Fa dst ,
+including the terminating null character added.
+If
+.Fa n
+is set to 0
+(it helps to determine an actual size needed
+for transformation),
+.Fa dst
+is permitted to be a
+.Dv NULL
+pointer.
+.Pp
+Comparing two strings using
+.Fn wcscmp
+after
+.Fn wcsxfrm
+is equivalent to comparing
+two original strings with
+.Fn wcscoll .
+.Sh RETURN VALUES
+Upon successful completion,
+.Fn wcsxfrm
+returns the length of the transformed string not including
+the terminating null character.
+If this value is
+.Fa n
+or more, the contents of
+.Fa dst
+are indeterminate.
+.Sh SEE ALSO
+.Xr setlocale 3 ,
+.Xr strxfrm 3 ,
+.Xr wcscmp 3 ,
+.Xr wcscoll 3
+.Sh STANDARDS
+The
+.Fn wcsxfrm
+function
+conforms to
+.St -isoC-99 .
+
+
+.Dd $Mdocdate: March 17 2013 $
+.Dt WCSXFRM 3
+.Os
+.\" ----------------------------------------------------------------------
+.Sh NAME
+.Nm wcsxfrm
+.Nd transform a wide string under locale
+.\" ----------------------------------------------------------------------
+.Sh SYNOPSIS
+.In wchar.h
+.Ft size_t
+.Fn wcsxfrm "wchar_t * restrict dst" "const wchar_t * restrict src" "size_t n"
+.\" ----------------------------------------------------------------------
+.Sh DESCRIPTION
+The
+.Fn wcsrtombs
+function converts the wide-character string indirectly pointed to by
+.Fa src
+to the corresponding multibyte character string
+and stores it to the array pointed to by
+.Fa dst .
+The conversion stops due to the following reasons:
+.Bl -bullet
+.It
+The conversion reaches a null wide character.
+In this case, the null wide character is also converted.
+.It
+The conversion has already stored
+.Fa len
+bytes to the array pointed to by
+.Fa dst .
+.It
+The conversion encounters an invalid character.
+.El
+.Pp
+The
+.Fn wcsnrtombs
+function is equivalent to
+.Fn wcsrtombs
+except that it additionally stops the conversion after processing
+.Fa nwc
+wide characters.
+.Pp
+Each character will be converted as if
+.Xr wcrtomb 3
+is continuously called, except the internal state of
+.Xr wcrtomb 3
+will not be affected.
+.Pp
+After conversion,
+if
+.Fa dst
+is not a null pointer,
+the pointer object pointed to by
+.Fa src
+is a null pointer (if the conversion is stopped due to reaching a null wide character)
+or the address just past the last wide character processed.
+.Pp
+If
+.Fa dst
+is not a null pointer and the conversion is stopped due to reaching
+a null wide character,
+the state object pointed to by
+.Fa ps
+is set to an initial state after the conversion has taken place.
+.Pp
+The behaviour of the
+.Fn wcsrtombs
+and
+.Fn wcsnrtombs
+functions is affected by the
+.Dv LC_CTYPE
+category of the current locale.
+.Pp
+There are two special cases:
+.Bl -tag -width 012345678901
+.It "dst == NULL"
+The conversion takes place, but the resulting multibyte string is discarded.
+In this case, the pointer object pointed to by
+.Fa src
+is not modified and
+.Fa len
+is ignored.
+.It "ps == NULL"
+The
+.Fn wcsrtombs
+and
+.Fn wcsnrtombs
+functions use their own internal state objects to keep the conversion state,
+instead of
+.Fa ps
+as mentioned in this manual page.
+.Pp
+Calling any other functions in
+.Em libc
+never change these internal states,
+which are initialized at startup time of the program.
+.El
+.\" ----------------------------------------------------------------------
+.Sh RETURN VALUES
+The
+.Fn wcsrtombs
+and
+.Fn wcsnrtombs
+functions return:
+.Bl -tag -width 012345678901
+.It 0 or positive
+Number of bytes stored to the array pointed to by
+.Fa dst ,
+except for a null byte.
+There is no cases that the value returned is greater than
+.Fa len
+(unless
+.Fa dst
+is a null pointer).
+If the return value is equal to
+.Fa len ,
+the string pointed to by
+.Fa dst
+will not be null-terminated.
+.It (size_t)-1
+.Fa src
+points to the string containing invalid wide character.
+In this case,
+.Va errno
+is set to indicate the error.
+.El
+.\" ----------------------------------------------------------------------
+.Sh ERRORS
+The
+.Fn wcsrtombs
+and
+.Fn wcsnrtombs
+functions may return the following errors:
+.Bl -tag -width Er
+.It Bq Er EILSEQ
+.Fa src
+points to the string containing an invalid wide character.
+.It Bq Er EINVAL
+.Fa ps
+points to an invalid or uninitialized mbstate_t object.
+.El
+.\" ----------------------------------------------------------------------
+.Sh SEE ALSO
+.Xr setlocale 3 ,
+.Xr wcrtomb 3 ,
+.Xr wcstombs 3
+.\" ----------------------------------------------------------------------
+.Sh STANDARDS
+The
+.Fn wcsrtombs
+function conforms to
+.St -ansiC .
+The restrict qualifier is added at
+.\" .St -isoC99 .
+ISO/IEC 9899/AMD1:1995
+.Pq Dq ISO C99 .
+.Pp
+The
+.Fn wcsnrtombs
+function conforms to
+.St -p1003.1-2008 .
+.\" ----------------------------------------------------------------------
+.Sh BUGS
+The current implementation is enough only for single byte encodings and UTF-8
+translatable to ISO8859-1.
diff -ruN -x obj -x CVS -x *~ src-orig/lib/libc/locale/wcsxfrm.c src/lib/libc/locale/wcsxfrm.c
--- src-orig/lib/libc/locale/wcsxfrm.c	Sat Feb  9 14:26:52 2013
+++ src/lib/libc/locale/wcsxfrm.c	Sat Mar 30 07:53:30 2013
@@ -30,13 +30,92 @@
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  */
+/*-
+ * Copyright (c) 1995 Alex Tatmanjants <alex@elvisti.kiev.ua>
+ *		at Electronni Visti IA, Kiev, Ukraine.
+ *			All rights reserved.
+ *
+ * Copyright (c) 2011 The FreeBSD Foundation
+ * All rights reserved.
+ * Portions of this software were developed by David Chisnall
+ * under sponsorship from the FreeBSD Foundation.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
 
+ * Adapted from lib/libc/string/wcsxfrm.c of FreeBSD 
+ */
+
+#include <sys/cdefs.h>
+
+#include <stdlib.h>
+#include <string.h>
 #include <wchar.h>
 
-size_t 
-wcsxfrm(wchar_t *dest, const wchar_t *src, size_t n)
+#include "collate.h"
+
+size_t
+wcsxfrm(wchar_t * __restrict dest, const wchar_t * __restrict src, size_t len)
 {
-	if (n == 0)
-		return wcslen(src);
-	return wcslcpy(dest, src, n);
+	wint_t prim, sec;
+	int l;
+	size_t slen;
+	wchar_t *s, *ss;
+	struct __collate *table;
+	table = (struct __collate *)&__global_collate;
+
+	if (*src == L'\0') {
+		if (len > 0 && dest != NULL)
+			*dest = L'\0';
+		return 0;
+	}
+
+	if (table->__collate_load_error != 0)
+		return wcslcpy(dest, src, len);
+
+	slen = 0;
+	prim = sec = 0;
+	ss = s = __collate_substitute_w(table, src);
+	while (*s != L'\0') {
+		while (*s != L'\0' && prim == 0) {
+			__collate_lookup_w(table, s, &l, &prim, &sec);
+			s += l;
+		}
+		if (prim != 0) {
+			if (len > 1) {
+			       	if (dest != NULL) {
+					*dest++ = prim;
+				}
+				len--;
+			}
+			slen++;
+			prim = 0;
+		}
+	}
+	free(ss);
+	if (len > 0 && dest != NULL) {
+		*dest = '\0';
+	}
+
+	return slen;
 }
+
+
diff -ruN -x obj -x CVS -x *~ src-orig/lib/libc/string/strcoll.3 src/lib/libc/string/strcoll.3
--- src-orig/lib/libc/string/strcoll.3	Mon Jul 25 17:03:20 2011
+++ src/lib/libc/string/strcoll.3	Fri Mar 22 08:36:07 2013
@@ -71,3 +71,7 @@
 .Fn strcoll
 function first appeared in
 .Bx 4.3 Reno .
+.\" ----------------------------------------------------------------------
+.Sh BUGS
+The current implementation is enough only for single byte encodings and UTF-8
+translatable to ISO8859-1.
diff -ruN -x obj -x CVS -x *~ src-orig/lib/libc/string/strcoll.c src/lib/libc/string/strcoll.c
--- src-orig/lib/libc/string/strcoll.c	Mon Aug  8 03:05:37 2005
+++ src/lib/libc/string/strcoll.c	Fri Mar 22 08:36:07 2013
@@ -30,15 +30,40 @@
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  */
+/**
+ * Public domain according to Colombian Legislation. 
+ * http://www.pasosdejesus.org/dominio_publico_colombia.html
+ * 2013. vtamara@pasosdeJesus.org.
+ */
 
+
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
 #include <string.h>
+#include <wchar.h>
 
+#include "../locale/collate.h"
+
+
 /*
  * Compare strings according to LC_COLLATE category of current locale.
  */
 int
 strcoll(const char *s1, const char *s2)
 {
-	/* LC_COLLATE is unimplemented, hence always "C" */
-	return (strcmp(s1, s2));
+	int r = 0;
+	wchar_t *ws1 = NULL;
+	wchar_t *ws2 = NULL;
+
+	ws1 = __dup_as_wcs_l(s1);
+	if (ws1 != NULL) {
+		ws2 = __dup_as_wcs_l(s2);
+		if (ws2 != NULL) {
+			r = wcscoll(ws1, ws2);
+			free(ws2);
+		}
+		free(ws1);
+	} 
+	return r;
 }
diff -ruN -x obj -x CVS -x *~ src-orig/lib/libc/string/strxfrm.3 src/lib/libc/string/strxfrm.3
--- src-orig/lib/libc/string/strxfrm.3	Mon Jul 25 17:03:20 2011
+++ src/lib/libc/string/strxfrm.3	Fri Mar 22 08:36:07 2013
@@ -72,8 +72,7 @@
 .Fn strxfrm
 function first appeared in
 .Bx 4.3 Reno .
+.\" ----------------------------------------------------------------------
 .Sh BUGS
-Since locales are not fully implemented on
-.Ox ,
-.Fn strxfrm
-just returns a copy of the original string.
+The current implementation is enough only for single byte encodings and UTF-8
+translatable to ISO8859-1.
diff -ruN -x obj -x CVS -x *~ src-orig/lib/libc/string/strxfrm.c src/lib/libc/string/strxfrm.c
--- src-orig/lib/libc/string/strxfrm.c	Mon Aug  8 03:05:37 2005
+++ src/lib/libc/string/strxfrm.c	Fri Mar 22 08:36:07 2013
@@ -30,8 +30,17 @@
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  */
+/**
+ * Public domain according to Colombian Legislation. 
+ * http://www.pasosdejesus.org/dominio_publico_colombia.html
+ * 2013. vtamara@pasosdeJesus.org.
+ */
 
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
 #include <string.h>
+#include "../locale/collate.h"
 
 /*
  * Transform src, storing the result in dst, such that
@@ -41,11 +50,34 @@
 size_t
 strxfrm(char *dst, const char *src, size_t n)
 {
+	size_t r = 0;
+	wchar_t *ws = NULL;
+	wchar_t *wd = NULL;
 
-	/*
-	 * Since locales are unimplemented, this is just a copy.
-	 */
-	if (n == 0)
-		return (strlen(src));
-	return (strlcpy(dst, src, n));
+	ws = __dup_as_wcs_l(src);
+	if (ws != NULL) {
+		if (n > 0 && dst != NULL) {
+			if (n > ULONG_MAX / sizeof(wchar_t)) { 
+				errno = EINVAL;
+				goto end;
+			}
+			wd = (wchar_t *)malloc(n * sizeof(wchar_t) );
+			if (wd == NULL) {
+				errno = ENOMEM;
+				goto end;
+			}
+		}
+		r = wcsxfrm(wd, ws, n);
+		if (n > 0 && dst != NULL) {
+			wcstombs(dst, wd, n);
+		}
+	}
+end:
+	if (ws != NULL) {
+		free(ws);
+	}
+	if (wd != NULL) {
+		free(wd);
+	}
+	return r; 
 }
diff -ruN -x obj -x CVS -x *~ src-orig/regress/lib/libc/locale/Makefile src/regress/lib/libc/locale/Makefile
--- src-orig/regress/lib/libc/locale/Makefile	Thu Aug 11 16:57:02 2005
+++ src/regress/lib/libc/locale/Makefile	Sat Mar 30 06:06:46 2013
@@ -1,6 +1,6 @@
 # $OpenBSD: Makefile,v 1.1 2005/08/11 21:57:02 espie Exp $
 
-SUBDIR+= check_isw
+SUBDIR+= check_collate check_isw
 
 install:
 
diff -ruN -x obj -x CVS -x *~ src-orig/regress/lib/libc/locale/check_collate/Makefile src/regress/lib/libc/locale/check_collate/Makefile
--- src-orig/regress/lib/libc/locale/check_collate/Makefile	Wed Dec 31 19:00:00 1969
+++ src/regress/lib/libc/locale/check_collate/Makefile	Fri Mar 22 08:36:07 2013
@@ -0,0 +1,11 @@
+
+NOMAN=
+PROG=check_collate
+
+CFLAGS=-g
+
+
+run-regress-check_collate: ${PROG}
+	./${PROG} >/dev/null
+
+.include <bsd.regress.mk>
diff -ruN -x obj -x CVS -x *~ src-orig/regress/lib/libc/locale/check_collate/check_collate.c src/regress/lib/libc/locale/check_collate/check_collate.c
--- src-orig/regress/lib/libc/locale/check_collate/check_collate.c	Wed Dec 31 19:00:00 1969
+++ src/regress/lib/libc/locale/check_collate/check_collate.c	Sat Mar 30 09:09:19 2013
@@ -0,0 +1,236 @@
+/**
+ * Public domain according to Colombian Legislation. 
+ * http://www.pasosdejesus.org/dominio_publico_colombia.html
+ * 2013. vtamara@pasosdeJesus.org.
+ */
+
+#include <locale.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <wchar.h>
+#include <wctype.h>
+
+int bad;
+
+#define p(t) printf("%s:\t ",#t); \
+	if (t) { \
+		printf("\x1b[38;5;2mOK\x1b[0m\n"); \
+	} else { \
+		bad++; \
+		printf("\x1b[38;5;1mERROR\x1b[0m\n"); \
+	}
+
+void test_esCO88591()
+{
+	char *nl = setlocale(LC_ALL, "es_CO.ISO8859-1");
+	printf("locale %s\n", nl);
+	p(strcoll("\xe9", "f") < 0); /* \xe9 is e with acute accent in LATIN1 */
+	p(strcoll("b", "\xe9") < 0);
+}
+
+
+void test_posix() 
+{
+	char *nl = setlocale(LC_ALL, "C");
+	printf("locale %s\n", nl);
+	p(strcoll("\xe9", "f") > 0); 
+	p(strcoll("b", "\xe9") < 0);
+	p(strcoll("", "\xe9") < 0);
+	p(strcoll("a", "") > 0);
+	p(strcoll("", "") == 0);
+}
+
+void test_esCOUTF8() 
+{
+	char *nl = setlocale(LC_ALL, "es_CO.UTF-8");
+	printf("locale %s\n", nl);
+	p(strcoll("é", "f") < 0); 
+	p(strcoll("b", "é") < 0);
+
+	wchar_t wcsb[1000];
+	mbstowcs(wcsb, "b", 1000);
+	wchar_t wcse[1000];
+	mbstowcs(wcse, "é", 1000);
+	p(wcscoll(wcsb, wcse) < 0);
+	mbstowcs(wcsb, "b", 1000);
+	mbstowcs(wcse, "é", 1000);
+	p(wcscoll(wcsb, wcse) < 0);
+	p(wcscoll(L"b", L"é") < 0);
+	p(strcoll("á", "e") < 0);
+	p(strcoll("ama", "ana") < 0);
+	p(strcoll("á", "e") < 0);
+	p(wcscoll(L"b", L"é") < 0);
+	p(wcscoll(L"á", L"e") < 0);
+	p(wcscoll(L"á", L"e") < 0);
+	/* Order in spanish*/
+	p(wcscoll(L" ", L"á") < 0);
+	p(wcscoll(L"á", L"b") < 0);
+	p(wcscoll(L"d", L"é") < 0);
+	p(wcscoll(L"é", L"f") < 0);
+	p(wcscoll(L"h", L"í") < 0);
+	p(wcscoll(L"í", L"j") < 0);
+	p(wcscoll(L"n", L"ñ") < 0);
+	p(wcscoll(L"ñ", L"o") < 0);
+	p(wcscoll(L"ñ", L"ó") < 0);
+	p(wcscoll(L"ó", L"p") < 0);
+	p(wcscoll(L"t", L"ú") < 0);
+	p(wcscoll(L"t", L"ü") < 0);
+	p(wcscoll(L"ú", L"v") < 0);
+	p(wcscoll(L"ü", L"v") < 0);
+	p(wcscoll(L"Á", L"B") < 0);
+	p(wcscoll(L"D", L"É") < 0);
+	p(wcscoll(L"É", L"F") < 0);
+	p(wcscoll(L"H", L"Í") < 0);
+	p(wcscoll(L"Í", L"J") < 0);
+	p(wcscoll(L"N", L"Ñ") < 0);
+	p(wcscoll(L"Ñ", L"O") < 0);
+	p(wcscoll(L"Ñ", L"Ó") < 0);
+	p(wcscoll(L"Ó", L"P") < 0);
+	p(wcscoll(L"T", L"Ú") < 0);
+	p(wcscoll(L"T", L"Ü") < 0);
+	p(wcscoll(L"Ú", L"V") < 0);
+	p(wcscoll(L"Ü", L"V") < 0);
+	p(wcscoll(L"", L"Á") < 0);
+	p(wcscoll(L"á", L"") > 0);
+	p(wcscoll(L"áá", L"á") > 0);
+	p(wcscoll(L"ÁB", L"ÁC") < 0);
+	p(wcscoll(L"ÁB", L"AC") < 0);
+	p(wcscoll(L"ÁB", L"AB") > 0);
+	
+	wchar_t wa[10], wb[10], we[10], wf[10], wn[10], wegne[10],
+		wo[10];
+
+	p(wcsxfrm(wo, L"oro", 1000) > 0);
+	printf("oro wo='%ls'\n", wo);
+	p(wcsxfrm(wa, L"", 1000) >= 0);
+	printf("wa='%ls'\n", wa);
+	p(wcsxfrm(wa, L"á", 1000) > 0);
+	printf("wa='%ls'\n", wa);
+	p(wcsxfrm(wb, L"b", 1000) > 0);
+	printf("wb='%ls'\n", wb);
+	p(wcscmp(wa, wb) < 0);
+	p(wcsxfrm(we, L"é", 1000) > 0);
+	printf("we='%ls'\n", we);
+	p(wcscmp(wb, we) < 0);
+	p(wcsxfrm(wf, L"f", 1000) > 0);
+	printf("wf='%ls'\n", wf);
+	p(wcscmp(wb, wf) < 0);
+	p(wcscmp(we, wf) < 0);
+	p(wcsxfrm(wn, L"n", 1000) > 0);
+	printf("wn='%ls'\n", wn);
+	p(wcsxfrm(wegne, L"ñ", 1000) > 0);
+	printf("wegne='%ls'\n", wegne);
+	p(wcsxfrm(wo, L"o", 1000) > 0);
+	printf("o wo='%ls'\n", wo);
+	p(wcsxfrm(wo, L"oso", 1000) > 0);
+	printf("oso wo='%ls'\n", wo);
+	p(wcscmp(wn, wegne) < 0);
+	p(wcscmp(wegne, wo) < 0);
+	
+	char a[1000], b[1000], e[1000], f[1000];
+	size_t sr = 0;
+	p((sr = strxfrm(NULL, "equis", 0)) == 5);
+	p(strxfrm(NULL, "", 1000) == 0);
+	p(strxfrm(a, "", 1000) == 0 && a[0] == '\0');
+	p(strxfrm(a, "á", 1000) > 0);
+	p(strxfrm(b, "b", 1000) > 0);
+	p(strcmp(a, b) < 0);
+	p(strxfrm(e, "é", 1000) > 0);
+	printf("é e=%s\n", e);
+	p(strcmp(b, e) < 0);
+	p(strxfrm(f, "f", 1000) > 0);
+	p(strcmp(b, f) < 0);
+	p(strcmp(e, f) < 0);
+	p(strxfrm(e, "éa", 1000) > 0);
+	printf("e=%s\n", e);
+	p(strxfrm(f, "éb", 1000) > 0);
+	printf("f=%s\n", f);
+	p(strcmp(e, f) < 0);
+	p(strxfrm(f, "oso", 1000) > 0);
+	printf("oso f=%s\n", f);
+	p(strcmp(e, f) < 0);
+
+}
+
+void test_ruRUKOI8R() 
+{
+	char *nl = setlocale(LC_ALL, "ru_RU.KOI8-R");
+	printf("locale %s\n", nl);
+	p(strcoll("\xc1", "\xc2") < 0); /* a, б */
+	p(strcoll("\xc2", "\xd7") < 0); /* б, в */
+	p(strcoll("\xd7", "\xc7") < 0); /* в, г */
+	p(strcoll("\xe1", "\xe2") < 0); /* A, Б */
+	p(strcoll("\xe2", "\xf7") < 0); /* Б, В */
+	p(strcoll("\xf7", "\xe7") < 0); /* В, Г */
+	p(strcoll("\xe7", "\xc1") < 0); /* Г, a */
+}
+
+void test_bgcp1251() 
+{
+	char *nl = setlocale(LC_ALL, "bg_BG.CP1251");
+	printf("locale %s\n", nl);
+	p(strcoll("\xc0", "\xc1") < 0); /* A, Б */
+	p(strcoll("\xc0", "\xa8") < 0); /* A, Ë */
+}
+
+void test_csCZ88592()
+{
+	char *nl = setlocale(LC_ALL, "cs_CZ.ISO8859-2");
+	printf("locale %s\n", nl);
+	p(strcoll("\xea", "f") < 0); /* é */
+	p(strcoll("\xf0", "e") < 0); /* đ */
+}
+
+	
+void test_elGR88597()
+{
+	char *nl = setlocale(LC_ALL, "el_GR.ISO8859-7");
+	printf("locale %s\n", nl);
+	p(strcoll("\xdc", "\xc0") < 0); /* ά, ΐ */
+}
+
+void test_hyAMARMSCII8()
+{
+	char *nl = setlocale(LC_ALL, "hy_AM.ARMSCII-8");
+	printf("locale %s\n", nl);
+	p(strcoll("\xa9", "A") < 0); 
+}
+
+void test_ltLT88594()
+{
+	char *nl = setlocale(LC_ALL, "lt_LT.ISO8859-4");
+	printf("locale %s\n", nl);
+	p(strcoll("\xc1", "B") < 0); 
+}
+
+void test_ruRUCP866()
+{
+	char *nl = setlocale(LC_ALL, "ru_RU.CP866");
+	printf("locale %s\n", nl);
+	p(strcoll("\x80", "a") < 0); 
+}
+
+void test_ruRU88595()
+{
+	char *nl = setlocale(LC_ALL, "ru_RU.ISO8859-5");
+	printf("locale %s\n", nl);
+	p(strcoll("\xb0", "a") < 0); 
+}
+
+int main()
+{
+	test_esCO88591();
+	test_posix();
+	test_esCOUTF8();
+	test_ruRUKOI8R();
+	test_bgcp1251();
+	test_csCZ88592();
+	test_elGR88597();
+	test_hyAMARMSCII8();
+	test_ltLT88594();
+	test_ruRUCP866();
+	test_ruRU88595();
+	
+	return bad != 0;
+}
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/Makefile src/share/locale/Makefile
--- src-orig/share/locale/Makefile	Sun Aug  7 05:03:44 2005
+++ src/share/locale/Makefile	Fri Mar 22 21:51:28 2013
@@ -1,6 +1,6 @@
 #	$OpenBSD: Makefile,v 1.1 2005/08/07 10:03:44 espie Exp $
 
-SUBDIR=	ctype
+SUBDIR=	ctype colldef
 	
 
 .include <bsd.subdir.mk>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/Makefile src/share/locale/colldef/Makefile
--- src-orig/share/locale/colldef/Makefile	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/Makefile	Sat Mar 23 08:46:02 2013
@@ -0,0 +1,92 @@
+.include <bsd.own.mk>
+
+# The collation sources come from FreeBSD
+
+LOCALES = it_IT.ISO8859-1
+LOCALES += it_IT.ISO8859-15
+LOCALES_UTF8 = it_IT
+
+B_it_IT= da_DK en_CA en_AU en_GB en_US fi_FI fr_BE fr_CA fr_CH fr_FR it_CH nl_BE nl_NL pt_PT 
+
+LOCALES += de_DE.ISO8859-1
+LOCALES += de_DE.ISO8859-15
+LOCALES_UTF8 += de_DE
+
+B_de_DE=de_AT de_CH 
+
+LOCALES += es_CO.ISO8859-1
+LOCALES += es_CO.ISO8859-15
+LOCALES_UTF8 += es_CO
+
+B_es_CO = ca_ES es_AR es_BO es_CH es_CR es_CU es_DO es_EC es_ES es_GQ es_GT es_HN es_MX es_NI es_PA es_PE es_PR es_PY es_SV es_US es_UY es_VE 
+
+LOCALES += is_IS.ISO8859-1
+LOCALES += is_IS.ISO8859-15
+LOCALES += no_NO.ISO8859-1
+LOCALES += no_NO.ISO8859-15
+LOCALES += sv_SE.ISO8859-1
+LOCALES += sv_SE.ISO8859-15
+
+LOCALES += bg_BG.CP1251
+LOCALES += cs_CZ.ISO8859-2
+LOCALES += el_GR.ISO8859-7
+LOCALES += hy_AM.ARMSCII-8
+LOCALES += lt_LT.ISO8859-4
+LOCALES += lt_LT.ISO8859-13
+LOCALES += pl_PL.ISO8859-2
+LOCALES += ru_RU.CP866
+LOCALES += ru_RU.ISO8859-5
+LOCALES += ru_RU.KOI8-R
+LOCALES += sl_SI.ISO8859-2 
+LOCALES += uk_UA.KOI8-U
+
+
+all: ${LOCALES:S/$/.out/g} ${LOCALES_UTF8:S/$/.UTF-8.out/g}
+
+realall: ${LOCALES:S/$/.out/g} ${LOCALES_UTF8:S/$/.UTF-8.out/g}
+
+.SUFFIXES: .src .out
+
+.src.out:
+	colldef -I ${.CURDIR} -o ${.TARGET} ${.IMPSRC}
+
+FILES=		${LOCALES:S/$/.out/}
+
+NOMAN=	# defined
+
+.for c in ${LOCALES}
+${c}.out: ${c}.src
+	colldef -I ${.CURDIR} -o ${c}.out ${.CURDIR}/${c}.src
+.endfor
+
+.for c in ${LOCALES_UTF8}
+${c}.UTF-8.out: ${c}.ISO8859-1.src
+	colldef -I ${.CURDIR} -o ${c}.UTF-8.out ${.CURDIR}/${c}.ISO8859-1.src
+.endfor
+
+
+CLEANFILES += ${LOCALES:S/$/.out/g} ${LOCALES_UTF8:S/$/.UTF-8.out/g}
+
+install:
+.for locale in ${LOCALES}
+	install -o ${LOCALEOWN} -g ${LOCALEGRP} -m ${DIRMODE} -d \
+	    ${DESTDIR}${LOCALEDIR}/${locale}
+	install -o ${LOCALEOWN} -g ${LOCALEGRP} -m ${LOCALEMODE} \
+	    ${locale}.out ${DESTDIR}${LOCALEDIR}/${locale}/LC_COLLATE
+.endfor
+.for locale in ${LOCALES_UTF8}
+	install -o ${LOCALEOWN} -g ${LOCALEGRP} -m ${LOCALEMODE} \
+	    ${locale}.UTF-8.out ${DESTDIR}${LOCALEDIR}/${locale}.UTF-8/LC_COLLATE
+.endfor
+.for f in it_IT de_DE es_CO
+.for locale in ${B_${f}}
+	ln -fs ../${f}.ISO8859-1/LC_COLLATE ${DESTDIR}${LOCALEDIR}/${locale}.ISO8859-1/LC_COLLATE; 
+	ln -fs ../${f}.ISO8859-15/LC_COLLATE ${DESTDIR}${LOCALEDIR}/${locale}.ISO8859-15/LC_COLLATE;
+	if (test -d ${DESTDIR}${LOCALEDIR}/${locale}.UTF-8) then { \
+		ln -fs ../${f}.UTF-8/LC_COLLATE ${DESTDIR}${LOCALEDIR}/${locale}.UTF-8/LC_COLLATE; \
+	} fi;
+.endfor
+.endfor
+
+
+.include <bsd.prog.mk>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/bg_BG.CP1251.src src/share/locale/colldef/bg_BG.CP1251.src
--- src-orig/share/locale/colldef/bg_BG.CP1251.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/bg_BG.CP1251.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,43 @@
+# CP1251 (backward compatible with ASCII)
+#
+# $FreeBSD$
+#
+charmap map.CP1251
+order \
+# controls
+	<NU>;...;<US>;\
+#
+	<NS>;<SP>;!;\";<"6>;<"9>;<<<>;</>/>>;\
+	<Nb>;<Eu>;<Cu>;<DO>;\
+	%;&;';<'6>;<'9>;\(;\);*;+;<+->;\,;<-->;-;.;/;\
+# digits
+	0;...;9;\
+#
+	:;\;;\<;=;>;?;<SE>;<PI>;<Co>;<Rg>;<At>;\
+# uppercase
+	A;...;Z;\
+	<A=>;<B=>;<V=>;<G=>;<D=>;<E=>;<Z%>;<Z=>;\
+	<I=>;<J=>;<K=>;<L=>;<M=>;<N=>;<O=>;<P=>;<R=>;\
+	<S=>;<T=>;<U=>;<F=>;<H=>;<C=>;<C%>;<S%>;<Sc>;\
+	<=">;<Y=>;<%">;<JE>;<JU>;<JA>;\
+#
+	[;\\;];^;_;`;\
+# lowercase
+	a;...;z;\
+	<a=>;<b=>;<v=>;<g=>;<d=>;<e=>;<z%>;<z=>;\
+	<i=>;<j=>;<k=>;<l=>;<m=>;<n=>;<o=>;<p=>;<r=>;\
+	<s=>;<t=>;<u=>;<f=>;<h=>;<c=>;<c%>;<s%>;<sc>;\
+	<='>;<y=>;<%'>;<je>;<ju>;<ja>;\
+#
+	\{;<NO>;|;<BB>;\};~;<.M>;<DG>;<My>;\
+	<-N>;<-M>;<.9>;<:9>;</->;</=>;<.3>;<%0>;<<1>;</>1>;\
+	<N0>;<TM>;<sb>;<FB>;<DT>;\
+#
+	<D%>;<G%>;<g%>;\
+	<LJ>;<NJ>;<KJ>;<Ts>;<DZ>;\
+	<d%>;\
+	<lj>;<nj>;<kj>;<ts>;<dz>;\
+	<V%>;<v%>;<J%>;<G3>;\
+	<IO>;<IE>;<YI>;\
+	<II>;<ii>;<g3>;\
+	<io>;<ie>;<j%>;<DS>;<ds>;<yi>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/cs_CZ.ISO8859-2.src src/share/locale/colldef/cs_CZ.ISO8859-2.src
--- src-orig/share/locale/colldef/cs_CZ.ISO8859-2.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/cs_CZ.ISO8859-2.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,52 @@
+# Latin2 (for Czech; partially according to CSN 97 6030)
+# by Rudolf Cejka <cejkar@dcse.fee.vutbr.cz>
+#
+# $FreeBSD$
+#
+charmap map.ISO8859-2
+substitute <ss> with "ss"
+order \
+# spaces
+	<SP>;<NS>;\
+# capital and small
+	(A,a,<A'>,<a'>,<A/>>,<a/>>,<A(>,<a(>,<A:>,<a:>,<A;>,<a;>);\
+	(B,b);\
+	(C,c,<C'>,<c'>,<C,>,<c,>);\
+	(<C<>,<c<>);\
+	(D,d,<D<>,<d<>,<D//>,<d//>);\
+	(E,e,<E'>,<e'>,<E<>,<e<>,<E:>,<e:>,<E;>,<e;>);\
+	(F,f);\
+	(G,g);\
+	(H,h);\
+	(CH,Ch,ch);\
+	(I,i,<I'>,<i'>,<I/>>,<i/>>);\
+	(J,j);\
+	(K,k);\
+	(L,l,<L'>,<l'>,<L<>,<l<>,<L//>,<l//>);\
+	(M,m);\
+	(N,n,<N'>,<n'>,<N<>,<n<>);\
+	(O,o,<O'>,<o'>,<O/>>,<o/>>,<O:>,<o:>,<O">,<o">);\
+	(P,p);\
+	(Q,q);\
+	(R,r,<R'>,<r'>);\
+	(<R<>,<r<>);\
+	(S,s,<S'>,<s'>,<S,>,<s,>);\
+	(<S<>,<s<>);\
+	(T,t,<T<>,<t<>,<T,>,<t,>);\
+	(U,u,<U'>,<u'>,<U0>,<u0>,<U:>,<u:>,<U">,<u">);\
+	(V,v);\
+	(W,w);\
+	(X,x);\
+	(Y,y,<Y'>,<y'>);\
+	(Z,z,<Z.>,<z.>,<Z'>,<z'>);\
+	(<Z<>,<z<>);\
+# digits
+	0;...;9;\
+# symbols
+	.;\,;\;;?;!;:;';`;\";\
+	<-->;-;|;/;\\;\(;\);[;];\<;>;\{;\};\
+	&;<SE>;%;<DO>;<At>;\
+	_;=;^;<-:>;+;<*X>;*;<Nb>;~;<DG>;<Cu>;\
+	<'.>;<''>;<'<>;<'(>;<':>;<'">;<',>;<';>;\
+# controls
+	<NU>;...;<US>;<DT>;<PA>;...;<AC>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/de_DE.ISO8859-1.src src/share/locale/colldef/de_DE.ISO8859-1.src
--- src-orig/share/locale/colldef/de_DE.ISO8859-1.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/de_DE.ISO8859-1.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,39 @@
+# German/ISO 8859-1 (backward compatible with ASCII)
+#
+# $FreeBSD$
+#
+charmap map.ISO8859-1
+substitute <ss> with "ss"
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+#
+	<NS>;<SP>;!;<!I>;\";<<<>;</>/>>;<Nb>;\
+	<Cu>;<Ct>;<DO>;<Pd>;<Ye>;\
+	%;&;<',>;';\(;\);*;+;<+->;<-:>;<*X>;\,;<-->;-;.;/;\
+# digits
+	(0,<14>,<12>,<34>);(1,<1S>);(2,<2S>);(3,<3S>);4;...;9;\
+#
+	:;\;;\<;=;>;?;<?I>;<SE>;<PI>;<Co>;<Rg>;<At>;\
+# capital
+	(A,<A'>,<A!>,<A/>>,<AA>,<A:>,<A?>,<AE>);\
+	B;(C,<C,>);D;(E,<E'>,<E!>,<E/>>,<E:>);\
+	F;G;H;(I,<I'>,<I!>,<I/>>,<I:>);\
+	J;...;M;(N,<N?>);(O,<O'>,<O!>,<O/>>,<O:>,<O?>,<O//>);\
+	P;...;T;(U,<U'>,<U!>,<U/>>,<U:>);\
+	V;W;X;(Y,<Y'>);Z;\
+	<D->;<TH>;\
+#
+	[;\\;];^;<':>;_;<'m>;<''>;`;\
+# small
+	(a,<a'>,<a!>,<a/>>,<aa>,<a:>,<a?>,<ae>);\
+	b;(c,<c,>);d;(e,<e'>,<e!>,<e/>>,<e:>);\
+	f;g;h;(i,<i'>,<i!>,<i/>>,<i:>);\
+	j;...;m;(n,<n?>);(o,<o'>,<o!>,<o/>>,<o:>,<o?>,<o//>);\
+	p;...;t;(u,<u'>,<u!>,<u/>>,<u:>);\
+	v;w;x;(y,<y'>,<y:>);z;\
+	<d->;<th>;\
+#
+	\{;<NO>;|;<BB>;\};~;<.M>;<DG>;<My>;<DT>;\
+# remains
+	<-a>;<-o>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/de_DE.ISO8859-15.src src/share/locale/colldef/de_DE.ISO8859-15.src
--- src-orig/share/locale/colldef/de_DE.ISO8859-15.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/de_DE.ISO8859-15.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,39 @@
+# German/ISO 8859-1 (backward compatible with ASCII)
+#
+# $FreeBSD$
+#
+charmap map.ISO8859-15
+substitute <ss> with "ss"
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+#
+	<NS>;<SP>;!;<!I>;\";<<<>;</>/>>;<Nb>;\
+	<Eu>;<Ct>;<DO>;<Pd>;<Ye>;\
+	%;&;';\(;\);*;+;<+->;<-:>;<*X>;\,;<-->;-;.;/;\
+# digits
+	0;(1,<1S>);(2,<2S>);(3,<3S>);4;...;9;\
+#
+	:;\;;\<;=;>;?;<?I>;<SE>;<PI>;<Co>;<Rg>;<At>;\
+# capital
+	(A,<A'>,<A!>,<A/>>,<AA>,<A:>,<A?>,<AE>);\
+	B;(C,<C,>);D;(E,<E'>,<E!>,<E/>>,<E:>);\
+	F;G;H;(I,<I'>,<I!>,<I/>>,<I:>);\
+	J;...;M;(N,<N?>);(O,<O'>,<O!>,<O/>>,<O:>,<O?>,<O//>,<OE>);\
+	P;...;R;(S,<S<>);T;(U,<U'>,<U!>,<U/>>,<U:>);\
+	V;W;X;(Y,<Y'>,<Y:>);(Z,<Z<>);\
+	<D->;<TH>;\
+#
+	[;\\;];^;_;<'m>;`;\
+# small
+	(a,<a'>,<a!>,<a/>>,<aa>,<a:>,<a?>,<ae>);\
+	b;(c,<c,>);d;(e,<e'>,<e!>,<e/>>,<e:>);\
+	f;g;h;(i,<i'>,<i!>,<i/>>,<i:>);\
+	j;...;m;(n,<n?>);(o,<o'>,<o!>,<o/>>,<o:>,<o?>,<o//>,<oe>);\
+	p;...;r;(s,<s<>);t;(u,<u'>,<u!>,<u/>>,<u:>);\
+	v;w;x;(y,<y'>,<y:>);(z,<z<>);\
+	<d->;<th>;\
+#
+	\{;<NO>;|;\};~;<.M>;<DG>;<My>;<DT>;\
+# remains
+	<-a>;<-o>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/el_GR.ISO8859-7.src src/share/locale/colldef/el_GR.ISO8859-7.src
--- src-orig/share/locale/colldef/el_GR.ISO8859-7.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/el_GR.ISO8859-7.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,34 @@
+# $FreeBSD$
+#
+# Greek/ISO 8859-7 (backward compatible with ASCII)
+#
+charmap map.ISO8859-7
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+#
+	<NS>;<SP>;!;\";<<<>;</>/>>;<Nb>;<DO>;<Pd>;%;&;\
+	';\(;\);*;+;<+->;\,;<-->;-;.;/;\
+# digits
+	(0,<12>);1;(2,<2S>);(3,<3S>);4;...;9;\
+#
+	:;\;;\<;=;>;?;<SE>;<Co>;<At>;\
+# capital
+	A;...;Z;\
+	(<A%>,<A*>);<B*>;<G*>;<D*>;(<E%>,<E*>);<Z*>;(<Y%>,\
+	<Y*>);<H*>;(<J*>,<I%>,<I*>);<K*>;<L*>;<M*>;<N*>;\
+	<C*>;(<O%>,<O*>);<P*>;<R*>;<S*>;<T*>;(<V*>,<U%>,\
+	<U*>);<F*>;<X*>;<Q*>;(<W%>,<W*>);\
+# small
+	a;...;z;\
+	(<a%>,<a*>);<b*>;<g*>;<d*>;(<e%>,<e*>);<z*>;(<y%>,\
+	<y*>);<h*>;(<i3>,<j*>,<i%>,<i*>);<k*>;<l*>;<m*>;\
+	<n*>;<c*>;(<o%>,<o*>);<p*>;<r*>;<s*>;<*s>;<t*>;\
+	(<u3>,<v*>,<u%>,<u*>);<f*>;<x*>;<q*>;(<w%>,<w*>);\
+#
+	[;\\;];<':>;_;<''>;`;\
+#
+	\{;<NO>;|;<BB>;\};~;<.M>;<DG>;<DT>;\
+# remains
+	<'/>>;<9'>;<'9>;<IE>;<DS>;<NJ>;<V%>;<-M>;<'%>;\
+	<v=>;<dz>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/es_CO.ISO8859-1.src src/share/locale/colldef/es_CO.ISO8859-1.src
--- src-orig/share/locale/colldef/es_CO.ISO8859-1.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/es_CO.ISO8859-1.src	Sat Mar 23 08:46:48 2013
@@ -0,0 +1,38 @@
+# Espan~ol (backward compatible with ASCII)
+#
+# Adapted and fixed from FreeBSD (es_ES.ISO8859-1) 
+#
+charmap map.ISO8859-1
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+#
+	<NS>;<SP>;!;<!I>;\";<<<>;</>/>>;<Nb>;\
+	<Cu>;<Ct>;<DO>;<Pd>;<Ye>;\
+	%;&;<',>;';\(;\);*;+;<+->;<-:>;<*X>;\,;<-->;-;.;/;\
+# digits
+	(0,<14>,<12>,<34>);(1,<1S>);(2,<2S>);(3,<3S>);4;...;9;\
+#
+	:;\;;\<;=;>;?;<?I>;<SE>;<PI>;<Co>;<Rg>;<At>;\
+# capital
+	(A,<A'>,<A!>,<A/>>,<AA>,<A:>,<A?>,<AE>);\
+	B;(C,<C,>);{CH,Ch};D;(E,<E'>,<E!>,<E/>>,<E:>);\
+	F;G;H;(I,<I'>,<I!>,<I/>>,<I:>);\
+	J;...;K;L;{LL,Ll};M;N;<N?>;(O,<O'>,<O!>,<O/>>,<O:>,<O?>,<O//>);\
+	P;Q;R;{RR,Rr};S;T;(U,<U'>,<U!>,<U/>>,<U:>);\
+	V;W;X;(Y,<Y'>);Z;\
+	<D->;<TH>;\
+#
+	[;\\;];^;<':>;_;<'m>;<''>;`;\
+# small
+	(a,<a'>,<a!>,<a/>>,<aa>,<a:>,<a?>,<ae>);\
+	b;(c,<c,>);ch;d;(e,<e'>,<e!>,<e/>>,<e:>);\
+	f;g;h;(i,<i'>,<i!>,<i/>>,<i:>);\
+	j;...;k;l;ll;m;n;<n?>;(o,<o'>,<o!>,<o/>>,<o:>,<o?>,<o//>);\
+	p;q;r;rr;s;t;(u,<u'>,<u!>,<u/>>,<u:>);\
+	v;w;x;(y,<y'>,<y:>);z;\
+	<d->;<th>;<ss>;\
+#
+	\{;<NO>;|;<BB>;\};~;<.M>;<DG>;<My>;<DT>;\
+# remains
+	<-a>;<-o>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/es_CO.ISO8859-15.src src/share/locale/colldef/es_CO.ISO8859-15.src
--- src-orig/share/locale/colldef/es_CO.ISO8859-15.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/es_CO.ISO8859-15.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,38 @@
+# Espan~ol (backward compatible with ASCII)
+#
+# Copied from FreeBSD es_ES.ISO8859-15 and fixed
+#
+charmap map.ISO8859-15
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+#
+	<NS>;<SP>;!;<!I>;\";<<<>;</>/>>;<Nb>;\
+	<Eu>;<Ct>;<DO>;<Pd>;<Ye>;\
+	%;&;';\(;\);*;+;<+->;<-:>;<*X>;\,;<-->;-;.;/;\
+# digits
+	0;(1,<1S>);(2,<2S>);(3,<3S>);4;...;9;\
+#
+	:;\;;\<;=;>;?;<?I>;<SE>;<PI>;<Co>;<Rg>;<At>;\
+# capital
+	(A,<A'>,<A!>,<A/>>,<AA>,<A:>,<A?>,<AE>);\
+	B;(C,<C,>);{CH,Ch};D;(E,<E'>,<E!>,<E/>>,<E:>);\
+	F;G;H;(I,<I'>,<I!>,<I/>>,<I:>);\
+	J;...;K;L;{LL,Ll};M;N;<N?>;(O,<O'>,<O!>,<O/>>,<O:>,<O?>,<O//>,<OE>);\
+	P;Q;R;{RR,Rr};(S,<S<>);T;(U,<U'>,<U!>,<U/>>,<U:>);\
+	V;W;X;(Y,<Y'>,<Y:>);(Z,<Z<>);\
+	<D->;<TH>;\
+#
+	[;\\;];^;_;<'m>;`;\
+# small
+	(a,<a'>,<a!>,<a/>>,<aa>,<a:>,<a?>,<ae>);\
+	b;(c,<c,>);ch;d;(e,<e'>,<e!>,<e/>>,<e:>);\
+	f;g;h;(i,<i'>,<i!>,<i/>>,<i:>);\
+	j;...;k;l;ll;m;n;<n?>;(o,<o'>,<o!>,<o/>>,<o:>,<o?>,<o//>,<oe>);\
+	p;q;r;rr;(s,<s<>);t;(u,<u'>,<u!>,<u/>>,<u:>);\
+	v;w;x;(y,<y'>,<y:>);(z,<z<>);\
+	<d->;<th>;<ss>;\
+#
+	\{;<NO>;|;\};~;<.M>;<DG>;<My>;<DT>;\
+# remains
+	<-a>;<-o>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/hy_AM.ARMSCII-8.src src/share/locale/colldef/hy_AM.ARMSCII-8.src
--- src-orig/share/locale/colldef/hy_AM.ARMSCII-8.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/hy_AM.ARMSCII-8.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,31 @@
+# $FreeBSD$
+#
+# LC_COLLATE source for Armenian/ARMSCII-8 (backward compatible with ASCII)
+# Made available by Vahe Khachikyan <vahe@khachikyan.de>
+#
+charmap map.ARMSCII-8
+substitute <armew> with "??"
+order \
+# controls
+	<armeternity>;<NU>;...;<US>;\x80;...;\xA0;\
+#
+	<SP>;(!,<armexclam>,<armaccent>);(\",<armquotleft>,<armquotright>);<Nb>;\
+	<DO>;<armemdash>;\
+	%;&;(',<armapostrophe>);(\(,<armparenleft>);(\),<armparenright>);*;+;\
+	(\,,<armcomma>);(-,<armendash>);<armyentamna>;<armellipsis>;(.,<armfullstop>);/;\
+# digits
+	0;...;9;\
+#
+	(:,<armdot>);<armsep>;\;;\<;=;>;(?,<armquestion>);<At>;\
+# capital
+	A;...;Z;\
+#
+	[;\\;];^;_;`;\
+# small
+	a;...;z;\
+# remaining punktuation etc
+	\{;|;\};~;<DT>;\
+# Armenian
+	<Armayb>;...;<armfe>;\
+# and the rest
+	\xff
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/is_IS.ISO8859-1.src src/share/locale/colldef/is_IS.ISO8859-1.src
--- src-orig/share/locale/colldef/is_IS.ISO8859-1.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/is_IS.ISO8859-1.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,38 @@
+# icelandic (backward compatible with ASCII)
+#
+# $FreeBSD$
+#
+charmap map.ISO8859-1
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+#
+	<NS>;<SP>;!;<!I>;\";<<<>;</>/>>;<Nb>;\
+	<Cu>;<Ct>;<DO>;<Pd>;<Ye>;\
+	%;&;<',>;';\(;\);*;+;<+->;<-:>;<*X>;\,;<-->;-;.;/;\
+# digits
+	(0,<14>,<12>,<34>);(1,<1S>);(2,<2S>);(3,<3S>);4;...;9;\
+#
+	:;\;;\<;=;>;?;<?I>;<SE>;<PI>;<Co>;<Rg>;<At>;\
+# capital
+	(A,<A'>,<A!>,<A/>>,<AA>,<A:>,<A?>);\
+	B;(C,<C,>);(D,<D->);(E,<E'>,<E!>,<E/>>,<E:>);\
+	F;G;H;(I,<I'>,<I!>,<I/>>,<I:>);\
+	J;...;M;(N,<N?>);(O,<O'>,<O!>,<O/>>,<O?>,<O//>);\
+	P;...;T;(U,<U'>,<U!>,<U/>>,<U:>);\
+	V;W;X;(Y,<Y'>);Z;\
+	<TH>;<AE>;<O:>;\
+#
+	[;\\;];^;<':>;_;<'m>;<''>;`;\
+# small
+	(a,<a'>,<a!>,<a/>>,<aa>,<a:>,<a?>);\
+	b;(c,<c,>);(d,<d->);(e,<e'>,<e!>,<e/>>,<e:>);\
+	f;g;h;(i,<i'>,<i!>,<i/>>,<i:>);\
+	j;...;m;(n,<n?>);(o,<o'>,<o!>,<o/>>,<o?>,<o//>);\
+	p;...;t;(u,<u'>,<u!>,<u/>>,<u:>);\
+	v;w;x;(y,<y'>,<y:>);z;\
+	<th>;<ae>;<o:>;<ss>;\
+#
+	\{;<NO>;|;<BB>;\};~;<.M>;<DG>;<My>;<DT>;\
+# remains
+	<-a>;<-o>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/is_IS.ISO8859-15.src src/share/locale/colldef/is_IS.ISO8859-15.src
--- src-orig/share/locale/colldef/is_IS.ISO8859-15.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/is_IS.ISO8859-15.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,38 @@
+# icelandic (backward compatible with ASCII)
+#
+# $FreeBSD$
+#
+charmap map.ISO8859-15
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+#
+	<NS>;<SP>;!;<!I>;\";<<<>;</>/>>;<Nb>;\
+	<Eu>;<Ct>;<DO>;<Pd>;<Ye>;\
+	%;&;';\(;\);*;+;<+->;<-:>;<*X>;\,;<-->;-;.;/;\
+# digits
+	0;(1,<1S>);(2,<2S>);(3,<3S>);4;...;9;\
+#
+	:;\;;\<;=;>;?;<?I>;<SE>;<PI>;<Co>;<Rg>;<At>;\
+# capital
+	(A,<A'>,<A!>,<A/>>,<AA>,<A:>,<A?>);\
+	B;(C,<C,>);(D,<D->);(E,<E'>,<E!>,<E/>>,<E:>);\
+	F;G;H;(I,<I'>,<I!>,<I/>>,<I:>);\
+	J;...;M;(N,<N?>);(O,<O'>,<O!>,<O/>>,<O?>,<O//>,<OE>);\
+	P;...;R;(S,<S<>);T;(U,<U'>,<U!>,<U/>>,<U:>);\
+	V;W;X;(Y,<Y'>,<Y:>);(Z,<Z<>);\
+	<TH>;<AE>;<O:>;\
+#
+	[;\\;];^;_;<'m>;`;\
+# small
+	(a,<a'>,<a!>,<a/>>,<aa>,<a:>,<a?>);\
+	b;(c,<c,>);(d,<d->);(e,<e'>,<e!>,<e/>>,<e:>);\
+	f;g;h;(i,<i'>,<i!>,<i/>>,<i:>);\
+	j;...;m;(n,<n?>);(o,<o'>,<o!>,<o/>>,<o?>,<o//>,<oe>);\
+	p;...;r;(s,<s<>);t;(u,<u'>,<u!>,<u/>>,<u:>);\
+	v;w;x;(y,<y'>,<y:>);(z,<z<>);\
+	<th>;<ae>;<o:>;<ss>;\
+#
+	\{;<NO>;|;\};~;<.M>;<DG>;<My>;<DT>;\
+# remains
+	<-a>;<-o>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/it_IT.ISO8859-1.src src/share/locale/colldef/it_IT.ISO8859-1.src
--- src-orig/share/locale/colldef/it_IT.ISO8859-1.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/it_IT.ISO8859-1.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,39 @@
+# Italian/ISO 8859-1 (backward compatible with ASCII)
+#
+# Based on de_DE.ISO8859-1
+#
+charmap map.ISO8859-1
+
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+#
+	<NS>;<SP>;!;<!I>;\";<<<>;</>/>>;<Nb>;\
+	<Cu>;<Ct>;<DO>;<Pd>;<Ye>;\
+	%;&;<',>;';\(;\);*;+;<+->;<-:>;<*X>;\,;<-->;-;.;/;\
+# digits
+	(0,<14>,<12>,<34>);(1,<1S>);(2,<2S>);(3,<3S>);4;...;9;\
+#
+	:;\;;\<;=;>;?;<?I>;<SE>;<PI>;<Co>;<Rg>;<At>;\
+# capital
+	(A,<A'>,<A!>,<A/>>,<AA>,<A:>,<A?>,<AE>);\
+	B;(C,<C,>);D;(E,<E'>,<E!>,<E/>>,<E:>);\
+	F;G;H;(I,<I'>,<I!>,<I/>>,<I:>);\
+	J;...;M;(N,<N?>);(O,<O'>,<O!>,<O/>>,<O:>,<O?>,<O//>);\
+	P;...;T;(U,<U'>,<U!>,<U/>>,<U:>);\
+	V;W;X;(Y,<Y'>);Z;\
+	<D->;<TH>;\
+#
+	[;\\;];^;<':>;_;<'m>;<''>;`;\
+# small
+	(a,<a'>,<a!>,<a/>>,<aa>,<a:>,<a?>,<ae>);\
+	b;(c,<c,>);d;(e,<e'>,<e!>,<e/>>,<e:>);\
+	f;g;h;(i,<i'>,<i!>,<i/>>,<i:>);\
+	j;...;m;(n,<n?>);(o,<o'>,<o!>,<o/>>,<o:>,<o?>,<o//>);\
+	p;...;t;(u,<u'>,<u!>,<u/>>,<u:>);\
+	v;w;x;(y,<y'>,<y:>);z;\
+	<d->;<th>;<ss>;\
+#
+	\{;<NO>;|;<BB>;\};~;<.M>;<DG>;<My>;<DT>;\
+# remains
+	<-a>;<-o>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/it_IT.ISO8859-15.src src/share/locale/colldef/it_IT.ISO8859-15.src
--- src-orig/share/locale/colldef/it_IT.ISO8859-15.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/it_IT.ISO8859-15.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,39 @@
+# German/ISO 8859-1 (backward compatible with ASCII)
+#
+# $FreeBSD$
+#
+charmap map.ISO8859-15
+substitute <ss> with "ss"
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+#
+	<NS>;<SP>;!;<!I>;\";<<<>;</>/>>;<Nb>;\
+	<Eu>;<Ct>;<DO>;<Pd>;<Ye>;\
+	%;&;';\(;\);*;+;<+->;<-:>;<*X>;\,;<-->;-;.;/;\
+# digits
+	0;(1,<1S>);(2,<2S>);(3,<3S>);4;...;9;\
+#
+	:;\;;\<;=;>;?;<?I>;<SE>;<PI>;<Co>;<Rg>;<At>;\
+# capital
+	(A,<A'>,<A!>,<A/>>,<AA>,<A:>,<A?>,<AE>);\
+	B;(C,<C,>);D;(E,<E'>,<E!>,<E/>>,<E:>);\
+	F;G;H;(I,<I'>,<I!>,<I/>>,<I:>);\
+	J;...;M;(N,<N?>);(O,<O'>,<O!>,<O/>>,<O:>,<O?>,<O//>,<OE>);\
+	P;...;R;(S,<S<>);T;(U,<U'>,<U!>,<U/>>,<U:>);\
+	V;W;X;(Y,<Y'>,<Y:>);(Z,<Z<>);\
+	<D->;<TH>;\
+#
+	[;\\;];^;_;<'m>;`;\
+# small
+	(a,<a'>,<a!>,<a/>>,<aa>,<a:>,<a?>,<ae>);\
+	b;(c,<c,>);d;(e,<e'>,<e!>,<e/>>,<e:>);\
+	f;g;h;(i,<i'>,<i!>,<i/>>,<i:>);\
+	j;...;m;(n,<n?>);(o,<o'>,<o!>,<o/>>,<o:>,<o?>,<o//>,<oe>);\
+	p;...;r;(s,<s<>);t;(u,<u'>,<u!>,<u/>>,<u:>);\
+	v;w;x;(y,<y'>,<y:>);(z,<z<>);\
+	<d->;<th>;\
+#
+	\{;<NO>;|;\};~;<.M>;<DG>;<My>;<DT>;\
+# remains
+	<-a>;<-o>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/lt_LT.ISO8859-13.src src/share/locale/colldef/lt_LT.ISO8859-13.src
--- src-orig/share/locale/colldef/lt_LT.ISO8859-13.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/lt_LT.ISO8859-13.src	Sat Mar 23 08:43:03 2013
@@ -0,0 +1,37 @@
+# Latin-7 / Baltic Rim (backward compatible with ASCII)
+#
+# Comes from la_LN.ISO8859-13 in FreeBSD
+#
+charmap map.ISO8859-13
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+# 
+	<NS>;<SP>;!;\";<"">;<Nb>;\
+	<Cu>;<DO>;<Ct>;<Pd>;\
+	%;&;';\(;\);*;+;<-:>;<*X>;<.M>;\,;<,,>;<``>;<-->;<+->;-;.;<'.>;/;\
+# digits
+	0;...;9;\
+# 
+	:;\;;\<;=;>;<<<>;</>/>>;?;<NO>;<SE>;<At>;\
+# capital
+	(A,<AA>,<A:>,<A;>,<A->,<AE>);\
+	B;(C,<C<>,<C'>);D;(E,<E'>,<E;>,<E->,<E.>);\
+	F;(G,<G,>);H;(I,<I;>,<I->);Y;\
+	J;(K,<K,>);(L,<L,>,<L//>);M;(N,<N'>,<N,>);(O,<O'>,<O:>,<O?>,<O//>,<O->);\
+	P;Q;(R,<R,>);(S,<S'>,<S<>);T;\
+	(U,<U:>,<U;>,<U->);\
+	V;W;X;(Z,<Z'>,<Z.>,<Z<>);\
+#
+	[;\\;];^;_;`;\
+# small
+	(a,<aa>,<a:>,<a;>,<a->,<ae>);\
+	b;(c,<c<>,<c'>);d;(e,<e'>,<e;>,<e->,<e.>);\
+	f;(g,<g,>);h;(i,<i;>,<i->);y;\
+	j;(k,<k,>);(l,<l,>,<l//>);m;(n,<n'>,<n,>);(o,<o'>,<o:>,<o?>,<o//>,<o->);\
+	p;q;(r,<r,>);(s,<s'>,<s<>,<ss>);t;\
+	(u,<u:>,<u;>,<u->);\
+	v;w;x;(z,<z'>,<z.>,<z<>);\
+#
+	\{;|;<BB>;\};~;<DG>;<DT>;<Co>;<Rg>;<My>;<PI>;<1S>;<2S>;<3S>;\
+	<14>;<12>;<34>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/lt_LT.ISO8859-4.src src/share/locale/colldef/lt_LT.ISO8859-4.src
--- src-orig/share/locale/colldef/lt_LT.ISO8859-4.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/lt_LT.ISO8859-4.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,36 @@
+# Lithuanian (backward compatible with ASCII)
+#
+# $FreeBSD$
+#
+charmap map.ISO8859-4
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+# 
+	<NS>;<SP>;!;\";<Nb>;\
+	<Cu>;<DO>;\
+	%;&;<',>;<';>;';\(;\);*;+;<-:>;<*X>;\,;<-->;-;.;<'.>;/;\
+# digits
+	0;...;9;\
+# 
+	:;\;;\<;=;>;?;<SE>;<At>;\
+# capital
+	(A,<A'>,<A/>>,<AA>,<A:>,<A;>,<A?>,<A->,<AE>);\
+	B;(C,<C<>);(D,<D//>);(E,<E'>,<E:>,<E;>,<E->,<E.>);\
+	F;(G,<G,>);H;(I,<I'>,<I/>>,<I?>,<I;>,<I->);Y;\
+	J;(K,<K,>);(L,<L,>);M;(N,<N,>);<NG>;(O,<O/>>,<O:>,<O?>,<O//>,<O->);\
+	P;Q;(R,<R,>);(S,<S<>);(T,<T//>);\
+	(U,<U'>,<U/>>,<U:>,<U;>,<U?>,<U->);\
+	V;W;X;(Z,<Z<>);\
+#
+	[;\\;];^;<':>;<'<>;_;<'m>;<''>;`;\
+# small
+	(a,<a'>,<a/>>,<aa>,<a:>,<a?>,<a;>,<a->,<ae>);\
+	b;(c,<c<>);(d,<d//>);(e,<e'>,<e:>,<e;>,<e->,<e.>);\
+	f;(g,<g,>);h;(i,<i'>,<i/>>,<i?>,<i;>,<i->);y;\
+	j;(k,<k,>);<kk>;(l,<l,>);m;(n,<n,>);<ng>;(o,<o/>>,<o:>,<o?>,<o//>,<o->);\
+	p;q;(r,<r,>);(s,<s<>,<ss>);(t,<t//>);\
+	(u,<u'>,<u/>>,<u:>,<u;>,<u?>,<u->);\
+	v;w;x;(z,<z<>);\
+#
+	\{;|;\};~;<DG>;<DT>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/map.ARMSCII-8 src/share/locale/colldef/map.ARMSCII-8
--- src-orig/share/locale/colldef/map.ARMSCII-8	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/map.ARMSCII-8	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,144 @@
+# $FreeBSD$
+#
+# map.ARMSCII-8 defined by Vahe Khachikyan <vahe@khachikyan.de>
+# 
+NU \x00
+SH \x01
+SX \x02
+EX \x03
+ET \x04
+EQ \x05
+AK \x06
+BL \x07
+BS \x08
+HT \x09
+LF \x0a
+VT \x0b
+FF \x0c
+CR \x0d
+SO \x0e
+SI \x0f
+DL \x10
+D1 \x11
+D2 \x12
+D3 \x13
+D4 \x14
+NK \x15
+SY \x16
+EB \x17
+CN \x18
+EM \x19
+SB \x1a
+EC \x1b
+FS \x1c
+GS \x1d
+RS \x1e
+US \x1f
+SP \x20
+Nb \x23
+DO \x24
+At \x40
+<( \x5b
+// \x5c
+)> \x5d
+'> \x5e
+'! \x60
+(! \x7b
+!! \x7c
+!) \x7d
+'? \x7e
+DT \x7f
+armeternity	\xA1
+armew		\xA2
+armfullstop	\xA3
+armparenright	\xA4
+armparenleft	\xA5
+armquotright	\xA6
+armquotleft	\xA7
+armemdash	\xA8
+armdot		\xA9
+armsep		\xAA
+armcomma	\xAB
+armendash	\xAC
+armyentamna	\xAD
+armellipsis	\xAE
+armexclam	\xAF
+armaccent	\xB0
+armquestion	\xB1
+Armayb		\xB2
+armayb		\xB3
+Armben		\xB4
+armben		\xB5
+Armgim		\xB6
+armgim		\xB7
+Armda		\xB8
+armda		\xB9
+Armyech		\xBA
+armyech		\xBB
+Armza		\xBC
+armza		\xBD
+Arme		\xBE
+arme		\xBF
+Armat		\xC0
+armat		\xC1
+Armto		\xC2
+armto		\xC3
+Armzhe		\xC4
+armzhe		\xC5
+Armini		\xC6
+armini		\xC7
+Armlyun		\xC8
+armlyun		\xC9
+Armkhe		\xCA
+armkhe		\xCB
+Armtsa		\xCC
+armtsa		\xCD
+Armken		\xCE
+armken		\xCF
+Armho		\xD0
+armho		\xD1
+Armdza		\xD2
+armdza		\xD3
+Armghat		\xD4
+armghat		\xD5
+Armtche		\xD6
+armtche		\xD7
+Armmen		\xD8
+armmen		\xD9
+Armhi		\xDA
+armhi		\xDB
+Armnu		\xDC
+armnu		\xDD
+Armsha		\xDE
+armsha		\xDF
+Armvo		\xE0
+armvo		\xE1
+Armcha		\xE2
+armcha		\xE3
+Armpe		\xE4
+armpe		\xE5
+Armje		\xE6
+armje		\xE7
+Armra		\xE8
+armra		\xE9
+Armse		\xEA
+armse		\xEB
+Armvev		\xEC
+armvev		\xED
+Armtyun		\xEE
+armtyun		\xEF
+Armre		\xF0
+armre		\xF1
+Armtso		\xF2
+armtso		\xF3
+Armvyun		\xF4
+armvyun		\xF5
+Armpyur		\xF6
+armpyur		\xF7
+Armke		\xF8
+armke		\xF9
+Armo		\xFA
+armo		\xFB
+Armfe		\xFC
+armfe		\xFD
+armapostrophe	\xFE
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/map.CP1251 src/share/locale/colldef/map.CP1251
--- src-orig/share/locale/colldef/map.CP1251	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/map.CP1251	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,257 @@
+# $FreeBSD$
+NU \x00
+SH \x01
+SX \x02
+EX \x03
+ET \x04
+EQ \x05
+AK \x06
+BL \x07
+BS \x08
+HT \x09
+LF \x0a
+VT \x0b
+FF \x0c
+CR \x0d
+SO \x0e
+SI \x0f
+DL \x10
+D1 \x11
+D2 \x12
+D3 \x13
+D4 \x14
+NK \x15
+SY \x16
+EB \x17
+CN \x18
+EM \x19
+SB \x1a
+EC \x1b
+FS \x1c
+GS \x1d
+RS \x1e
+US \x1f
+SP \x20
+! \x21
+" \x22
+Nb \x23
+DO \x24
+% \x25
+& \x26
+' \x27
+( \x28
+) \x29
+* \x2a
++ \x2b
+, \x2c
+- \x2d
+. \x2e
+/ \x2f
+0 \x30
+1 \x31
+2 \x32
+3 \x33
+4 \x34
+5 \x35
+6 \x36
+7 \x37
+8 \x38
+9 \x39
+: \x3a
+; \x3b
+< \x3c
+= \x3d
+> \x3e
+? \x3f
+At \x40
+A \x41
+B \x42
+C \x43
+D \x44
+E \x45
+F \x46
+G \x47
+H \x48
+I \x49
+J \x4a
+K \x4b
+L \x4c
+M \x4d
+N \x4e
+O \x4f
+P \x50
+Q \x51
+R \x52
+S \x53
+T \x54
+U \x55
+V \x56
+W \x57
+X \x58
+Y \x59
+Z \x5a
+<( \x5b
+// \x5c
+)> \x5d
+'> \x5e
+_ \x5f
+'! \x60
+a \x61
+b \x62
+c \x63
+d \x64
+e \x65
+f \x66
+g \x67
+h \x68
+i \x69
+j \x6a
+k \x6b
+l \x6c
+m \x6d
+n \x6e
+o \x6f
+p \x70
+q \x71
+r \x72
+s \x73
+t \x74
+u \x75
+v \x76
+w \x77
+x \x78
+y \x79
+z \x7a
+(! \x7b
+!! \x7c
+!) \x7d
+'? \x7e
+DT \x7f
+D% \x80
+G% \x81
+.9 \x82
+g% \x83
+:9 \x84
+.3 \x85
+/- \x86
+/= \x87
+Eu \x88
+%0 \x89
+LJ \x8a
+<1 \x8b
+NJ \x8c
+KJ \x8d
+Ts \x8e
+DZ \x8f
+d% \x90
+'6 \x91
+'9 \x92
+"6 \x93
+"9 \x94
+sb \x95
+-N \x96
+-M \x97
+FB \x98
+TM \x99
+lj \x9a
+>1 \x9b
+nj \x9c
+kj \x9d
+ts \x9e
+dz \x9f
+NS \xa0
+V% \xa1
+v% \xa2
+J% \xa3
+Cu \xa4
+G3 \xa5
+BB \xa6
+SE \xa7
+IO \xa8
+Co \xa9
+IE \xaa
+<< \xab
+NO \xac
+-- \xad
+Rg \xae
+YI \xaf
+DG \xb0
++- \xb1
+II \xb2
+ii \xb3
+g3 \xb4
+My \xb5
+PI \xb6
+.M \xb7
+io \xb8
+N0 \xb9
+ie \xba
+>> \xbb
+j% \xbc
+DS \xbd
+ds \xbe
+yi \xbf
+A= \xc0
+B= \xc1
+V= \xc2
+G= \xc3
+D= \xc4
+E= \xc5
+Z% \xc6
+Z= \xc7
+I= \xc8
+J= \xc9
+K= \xca
+L= \xcb
+M= \xcc
+N= \xcd
+O= \xce
+P= \xcf
+R= \xd0
+S= \xd1
+T= \xd2
+U= \xd3
+F= \xd4
+H= \xd5
+C= \xd6
+C% \xd7
+S% \xd8
+Sc \xd9
+=" \xda
+Y= \xdb
+%" \xdc
+JE \xdd
+JU \xde
+JA \xdf
+a= \xe0
+b= \xe1
+v= \xe2
+g= \xe3
+d= \xe4
+e= \xe5
+z% \xe6
+z= \xe7
+i= \xe8
+j= \xe9
+k= \xea
+l= \xeb
+m= \xec
+n= \xed
+o= \xee
+p= \xef
+r= \xf0
+s= \xf1
+t= \xf2
+u= \xf3
+f= \xf4
+h= \xf5
+c= \xf6
+c% \xf7
+s% \xf8
+sc \xf9
+=' \xfa
+y= \xfb
+%' \xfc
+je \xfd
+ju \xfe
+ja \xff
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/map.CP866 src/share/locale/colldef/map.CP866
--- src-orig/share/locale/colldef/map.CP866	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/map.CP866	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,175 @@
+# $FreeBSD$
+NU \x00
+SH \x01
+SX \x02
+EX \x03
+ET \x04
+EQ \x05
+AK \x06
+BL \x07
+BS \x08
+HT \x09
+LF \x0a
+VT \x0b
+FF \x0c
+CR \x0d
+SO \x0e
+SI \x0f
+DL \x10
+D1 \x11
+D2 \x12
+D3 \x13
+D4 \x14
+NK \x15
+SY \x16
+EB \x17
+CN \x18
+EM \x19
+SB \x1a
+EC \x1b
+FS \x1c
+GS \x1d
+RS \x1e
+US \x1f
+SP \x20
+Nb \x23
+DO \x24
+At \x40
+<( \x5b
+// \x5c
+)> \x5d
+'> \x5e
+'! \x60
+(! \x7b
+!! \x7c
+!) \x7d
+'? \x7e
+DT \x7f
+A= \x80
+B= \x81
+V= \x82
+G= \x83
+D= \x84
+E= \x85
+Z% \x86
+Z= \x87
+I= \x88
+J= \x89
+K= \x8a
+L= \x8b
+M= \x8c
+N= \x8d
+O= \x8e
+P= \x8f
+R= \x90
+S= \x91
+T= \x92
+U= \x93
+F= \x94
+H= \x95
+C= \x96
+C% \x97
+S% \x98
+Sc \x99
+=" \x9a
+Y= \x9b
+%" \x9c
+JE \x9d
+JU \x9e
+JA \x9f
+a= \xa0
+b= \xa1
+v= \xa2
+g= \xa3
+d= \xa4
+e= \xa5
+z% \xa6
+z= \xa7
+i= \xa8
+j= \xa9
+k= \xaa
+l= \xab
+m= \xac
+n= \xad
+o= \xae
+p= \xaf
+.S \xb0
+:S \xb1
+?S \xb2
+vv \xb3
+vl \xb4
+vL \xb5
+Vl \xb6
+Dl \xb7
+dL \xb8
+VL \xb9
+VV \xba
+LD \xbb
+UL \xbc
+Ul \xbd
+uL \xbe
+dl \xbf
+ur \xc0
+uh \xc1
+dh \xc2
+vr \xc3
+hh \xc4
+vh \xc5
+vR \xc6
+Vr \xc7
+UR \xc8
+DR \xc9
+UH \xca
+DH \xcb
+VR \xcc
+HH \xcd
+VH \xce
+uH \xcf
+Uh \xd0
+dH \xd1
+Dh \xd2
+Ur \xd3
+uR \xd4
+dR \xd5
+Dr \xd6
+Vh \xd7
+vH \xd8
+ul \xd9
+dr \xda
+FB \xdb
+LB \xdc
+lB \xdd
+RB \xde
+TB \xdf
+r= \xe0
+s= \xe1
+t= \xe2
+u= \xe3
+f= \xe4
+h= \xe5
+c= \xe6
+c% \xe7
+s% \xe8
+sc \xe9
+=' \xea
+y= \xeb
+%' \xec
+je \xed
+ju \xee
+ja \xef
+IO \xf0
+io \xf1
+IE \xf2
+ie \xf3
+YI \xf4
+yi \xf5
+V% \xf6
+v% \xf7
+DG \xf8
+Sb \xf9
+.M \xfa
+RT \xfb
+N0 \xfc
+Cu \xfd
+fS \xfe
+NS \xff
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/map.ISO8859-1 src/share/locale/colldef/map.ISO8859-1
--- src-orig/share/locale/colldef/map.ISO8859-1	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/map.ISO8859-1	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,174 @@
+NU \x00
+SH \x01
+SX \x02
+EX \x03
+ET \x04
+EQ \x05
+AK \x06
+BL \x07
+BS \x08
+HT \x09
+LF \x0a
+VT \x0b
+FF \x0c
+CR \x0d
+SO \x0e
+SI \x0f
+DL \x10
+D1 \x11
+D2 \x12
+D3 \x13
+D4 \x14
+NK \x15
+SY \x16
+EB \x17
+CN \x18
+EM \x19
+SB \x1a
+EC \x1b
+FS \x1c
+GS \x1d
+RS \x1e
+US \x1f
+SP \x20
+Nb \x23
+DO \x24
+At \x40
+<( \x5b
+// \x5c
+)> \x5d
+'> \x5e
+'! \x60
+(! \x7b
+!! \x7c
+!) \x7d
+'? \x7e
+DT \x7f
+PA \x80
+HO \x81
+BH \x82
+NH \x83
+IN \x84
+NL \x85
+SA \x86
+ES \x87
+HS \x88
+HJ \x89
+VS \x8a
+PD \x8b
+PU \x8c
+RI \x8d
+S2 \x8e
+S3 \x8f
+DC \x90
+P1 \x91
+P2 \x92
+TS \x93
+CC \x94
+MW \x95
+SG \x96
+EG \x97
+SS \x98
+GC \x99
+SC \x9a
+CI \x9b
+ST \x9c
+OC \x9d
+PM \x9e
+AC \x9f
+NS \xa0
+!I \xa1
+Ct \xa2
+Pd \xa3
+Cu \xa4
+Ye \xa5
+BB \xa6
+SE \xa7
+': \xa8
+Co \xa9
+-a \xaa
+<< \xab
+NO \xac
+-- \xad
+Rg \xae
+'m \xaf
+DG \xb0
++- \xb1
+2S \xb2
+3S \xb3
+'' \xb4
+My \xb5
+PI \xb6
+.M \xb7
+', \xb8
+1S \xb9
+-o \xba
+>> \xbb
+14 \xbc
+12 \xbd
+34 \xbe
+?I \xbf
+A! \xc0
+A' \xc1
+A> \xc2
+A? \xc3
+A: \xc4
+AA \xc5
+AE \xc6
+C, \xc7
+E! \xc8
+E' \xc9
+E> \xca
+E: \xcb
+I! \xcc
+I' \xcd
+I> \xce
+I: \xcf
+D- \xd0
+N? \xd1
+O! \xd2
+O' \xd3
+O> \xd4
+O? \xd5
+O: \xd6
+*X \xd7
+O/ \xd8
+U! \xd9
+U' \xda
+U> \xdb
+U: \xdc
+Y' \xdd
+TH \xde
+ss \xdf
+a! \xe0
+a' \xe1
+a> \xe2
+a? \xe3
+a: \xe4
+aa \xe5
+ae \xe6
+c, \xe7
+e! \xe8
+e' \xe9
+e> \xea
+e: \xeb
+i! \xec
+i' \xed
+i> \xee
+i: \xef
+d- \xf0
+n? \xf1
+o! \xf2
+o' \xf3
+o> \xf4
+o? \xf5
+o: \xf6
+-: \xf7
+o/ \xf8
+u! \xf9
+u' \xfa
+u> \xfb
+u: \xfc
+y' \xfd
+th \xfe
+y: \xff
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/map.ISO8859-13 src/share/locale/colldef/map.ISO8859-13
--- src-orig/share/locale/colldef/map.ISO8859-13	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/map.ISO8859-13	Sat Mar 23 08:43:17 2013
@@ -0,0 +1,175 @@
+# $FreeBSD$
+NU \x00
+SH \x01
+SX \x02
+EX \x03
+ET \x04
+EQ \x05
+AK \x06
+BL \x07
+BS \x08
+HT \x09
+LF \x0a
+VT \x0b
+FF \x0c
+CR \x0d
+SO \x0e
+SI \x0f
+DL \x10
+D1 \x11
+D2 \x12
+D3 \x13
+D4 \x14
+NK \x15
+SY \x16
+EB \x17
+CN \x18
+EM \x19
+SB \x1a
+EC \x1b
+FS \x1c
+GS \x1d
+RS \x1e
+US \x1f
+SP \x20
+Nb \x23
+DO \x24
+At \x40
+<( \x5b
+// \x5c
+)> \x5d
+'> \x5e
+'! \x60
+(! \x7b
+!! \x7c
+!) \x7d
+'? \x7e
+DT \x7f
+PA \x80
+HO \x81
+BH \x82
+NH \x83
+IN \x84
+NL \x85
+SA \x86
+ES \x87
+HS \x88
+HJ \x89
+VS \x8a
+PD \x8b
+PU \x8c
+RI \x8d
+S2 \x8e
+S3 \x8f
+DC \x90
+P1 \x91
+P2 \x92
+TS \x93
+CC \x94
+MW \x95
+SG \x96
+EG \x97
+SS \x98
+GC \x99
+SC \x9a
+CI \x9b
+ST \x9c
+OC \x9d
+PM \x9e
+AC \x9f
+NS \xa0
+"" \xa1
+Ct \xa2
+Pd \xa3
+Cu \xa4
+,, \xa5
+BB \xa6
+SE \xa7
+O/ \xa8
+Co \xa9
+R, \xaa
+<< \xab
+NO \xac
+-- \xad
+Rg \xae
+AE \xaf
+DG \xb0
++- \xb1
+2S \xb2
+3S \xb3
+`` \xb4
+My \xb5
+PI \xb6
+.M \xb7
+o/ \xb8
+1S \xb9
+r, \xba
+>> \xbb
+14 \xbc
+12 \xbd
+34 \xbe
+ae \xbf
+A; \xc0
+I; \xc1
+A- \xc2
+C' \xc3
+A: \xc4
+AA \xc5
+E; \xc6
+E- \xc7
+C< \xc8
+E' \xc9
+Z' \xca
+E. \xcb
+G, \xcc
+K, \xcd
+I- \xce
+L, \xcf
+S< \xd0
+N' \xd1
+N, \xd2
+O' \xd3
+O- \xd4
+O? \xd5
+O: \xd6
+*X \xd7
+U; \xd8
+L/ \xd9
+S' \xda
+U- \xdb
+U: \xdc
+Z. \xdd
+Z< \xde
+ss \xdf
+a; \xe0
+i; \xe1
+a- \xe2
+c' \xe3
+a: \xe4
+aa \xe5
+e; \xe6
+e- \xe7
+c< \xe8
+e' \xe9
+z' \xea
+e. \xeb
+g, \xec
+k, \xed
+i- \xee
+l, \xef
+s< \xf0
+n' \xf1
+n, \xf2
+o' \xf3
+o- \xf4
+o? \xf5
+o: \xf6
+-: \xf7
+u; \xf8
+l/ \xf9
+s' \xfa
+u- \xfb
+u: \xfc
+z. \xfd
+z< \xfe
+'. \xff
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/map.ISO8859-15 src/share/locale/colldef/map.ISO8859-15
--- src-orig/share/locale/colldef/map.ISO8859-15	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/map.ISO8859-15	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,174 @@
+NU \x00
+SH \x01
+SX \x02
+EX \x03
+ET \x04
+EQ \x05
+AK \x06
+BL \x07
+BS \x08
+HT \x09
+LF \x0a
+VT \x0b
+FF \x0c
+CR \x0d
+SO \x0e
+SI \x0f
+DL \x10
+D1 \x11
+D2 \x12
+D3 \x13
+D4 \x14
+NK \x15
+SY \x16
+EB \x17
+CN \x18
+EM \x19
+SB \x1a
+EC \x1b
+FS \x1c
+GS \x1d
+RS \x1e
+US \x1f
+SP \x20
+Nb \x23
+DO \x24
+At \x40
+<( \x5b
+// \x5c
+)> \x5d
+'> \x5e
+'! \x60
+(! \x7b
+!! \x7c
+!) \x7d
+'? \x7e
+DT \x7f
+PA \x80
+HO \x81
+BH \x82
+NH \x83
+IN \x84
+NL \x85
+SA \x86
+ES \x87
+HS \x88
+HJ \x89
+VS \x8a
+PD \x8b
+PU \x8c
+RI \x8d
+S2 \x8e
+S3 \x8f
+DC \x90
+P1 \x91
+P2 \x92
+TS \x93
+CC \x94
+MW \x95
+SG \x96
+EG \x97
+SS \x98
+GC \x99
+SC \x9a
+CI \x9b
+ST \x9c
+OC \x9d
+PM \x9e
+AC \x9f
+NS \xa0
+!I \xa1
+Ct \xa2
+Pd \xa3
+Eu \xa4
+Ye \xa5
+S< \xa6
+SE \xa7
+s< \xa8
+Co \xa9
+-a \xaa
+<< \xab
+NO \xac
+-- \xad
+Rg \xae
+'m \xaf
+DG \xb0
++- \xb1
+2S \xb2
+3S \xb3
+Z< \xb4
+My \xb5
+PI \xb6
+.M \xb7
+z< \xb8
+1S \xb9
+-o \xba
+>> \xbb
+OE \xbc
+oe \xbd
+Y: \xbe
+?I \xbf
+A! \xc0
+A' \xc1
+A> \xc2
+A? \xc3
+A: \xc4
+AA \xc5
+AE \xc6
+C, \xc7
+E! \xc8
+E' \xc9
+E> \xca
+E: \xcb
+I! \xcc
+I' \xcd
+I> \xce
+I: \xcf
+D- \xd0
+N? \xd1
+O! \xd2
+O' \xd3
+O> \xd4
+O? \xd5
+O: \xd6
+*X \xd7
+O/ \xd8
+U! \xd9
+U' \xda
+U> \xdb
+U: \xdc
+Y' \xdd
+TH \xde
+ss \xdf
+a! \xe0
+a' \xe1
+a> \xe2
+a? \xe3
+a: \xe4
+aa \xe5
+ae \xe6
+c, \xe7
+e! \xe8
+e' \xe9
+e> \xea
+e: \xeb
+i! \xec
+i' \xed
+i> \xee
+i: \xef
+d- \xf0
+n? \xf1
+o! \xf2
+o' \xf3
+o> \xf4
+o? \xf5
+o: \xf6
+-: \xf7
+o/ \xf8
+u! \xf9
+u' \xfa
+u> \xfb
+u: \xfc
+y' \xfd
+th \xfe
+y: \xff
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/map.ISO8859-2 src/share/locale/colldef/map.ISO8859-2
--- src-orig/share/locale/colldef/map.ISO8859-2	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/map.ISO8859-2	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,174 @@
+NU \x00
+SH \x01
+SX \x02
+EX \x03
+ET \x04
+EQ \x05
+AK \x06
+BL \x07
+BS \x08
+HT \x09
+LF \x0a
+VT \x0b
+FF \x0c
+CR \x0d
+SO \x0e
+SI \x0f
+DL \x10
+D1 \x11
+D2 \x12
+D3 \x13
+D4 \x14
+NK \x15
+SY \x16
+EB \x17
+CN \x18
+EM \x19
+SB \x1a
+EC \x1b
+FS \x1c
+GS \x1d
+RS \x1e
+US \x1f
+SP \x20
+Nb \x23
+DO \x24
+At \x40
+<( \x5b
+// \x5c
+)> \x5d
+'> \x5e
+'! \x60
+(! \x7b
+!! \x7c
+!) \x7d
+'? \x7e
+DT \x7f
+PA \x80
+HO \x81
+BH \x82
+NH \x83
+IN \x84
+NL \x85
+SA \x86
+ES \x87
+HS \x88
+HJ \x89
+VS \x8a
+PD \x8b
+PU \x8c
+RI \x8d
+S2 \x8e
+S3 \x8f
+DC \x90
+P1 \x91
+P2 \x92
+TS \x93
+CC \x94
+MW \x95
+SG \x96
+EG \x97
+SS \x98
+GC \x99
+SC \x9a
+CI \x9b
+ST \x9c
+OC \x9d
+PM \x9e
+AC \x9f
+NS \xa0
+A; \xa1
+'( \xa2
+L/ \xa3
+Cu \xa4
+L< \xa5
+S' \xa6
+SE \xa7
+': \xa8
+S< \xa9
+S, \xaa
+T< \xab
+Z' \xac
+-- \xad
+Z< \xae
+Z. \xaf
+DG \xb0
+a; \xb1
+'; \xb2
+l/ \xb3
+'' \xb4
+l< \xb5
+s' \xb6
+'< \xb7
+', \xb8
+s< \xb9
+s, \xba
+t< \xbb
+z' \xbc
+'" \xbd
+z< \xbe
+z. \xbf
+R' \xc0
+A' \xc1
+A> \xc2
+A( \xc3
+A: \xc4
+L' \xc5
+C' \xc6
+C, \xc7
+C< \xc8
+E' \xc9
+E; \xca
+E: \xcb
+E< \xcc
+I' \xcd
+I> \xce
+D< \xcf
+D/ \xd0
+N' \xd1
+N< \xd2
+O' \xd3
+O> \xd4
+O" \xd5
+O: \xd6
+*X \xd7
+R< \xd8
+U0 \xd9
+U' \xda
+U" \xdb
+U: \xdc
+Y' \xdd
+T, \xde
+ss \xdf
+r' \xe0
+a' \xe1
+a> \xe2
+a( \xe3
+a: \xe4
+l' \xe5
+c' \xe6
+c, \xe7
+c< \xe8
+e' \xe9
+e; \xea
+e: \xeb
+e< \xec
+i' \xed
+i> \xee
+d< \xef
+d/ \xf0
+n' \xf1
+n< \xf2
+o' \xf3
+o> \xf4
+o" \xf5
+o: \xf6
+-: \xf7
+r< \xf8
+u0 \xf9
+u' \xfa
+u" \xfb
+u: \xfc
+y' \xfd
+t, \xfe
+'. \xff
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/map.ISO8859-4 src/share/locale/colldef/map.ISO8859-4
--- src-orig/share/locale/colldef/map.ISO8859-4	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/map.ISO8859-4	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,175 @@
+# $FreeBSD$
+NU \x00
+SH \x01
+SX \x02
+EX \x03
+ET \x04
+EQ \x05
+AK \x06
+BL \x07
+BS \x08
+HT \x09
+LF \x0a
+VT \x0b
+FF \x0c
+CR \x0d
+SO \x0e
+SI \x0f
+DL \x10
+D1 \x11
+D2 \x12
+D3 \x13
+D4 \x14
+NK \x15
+SY \x16
+EB \x17
+CN \x18
+EM \x19
+SB \x1a
+EC \x1b
+FS \x1c
+GS \x1d
+RS \x1e
+US \x1f
+SP \x20
+Nb \x23
+DO \x24
+At \x40
+<( \x5b
+// \x5c
+)> \x5d
+'> \x5e
+'! \x60
+(! \x7b
+!! \x7c
+!) \x7d
+'? \x7e
+DT \x7f
+PA \x80
+HO \x81
+BH \x82
+NH \x83
+IN \x84
+NL \x85
+SA \x86
+ES \x87
+HS \x88
+HJ \x89
+VS \x8a
+PD \x8b
+PU \x8c
+RI \x8d
+S2 \x8e
+S3 \x8f
+DC \x90
+P1 \x91
+P2 \x92
+TS \x93
+CC \x94
+MW \x95
+SG \x96
+EG \x97
+SS \x98
+GC \x99
+SC \x9a
+CI \x9b
+ST \x9c
+OC \x9d
+PM \x9e
+AC \x9f
+NS \xa0
+A; \xa1
+kk \xa2
+R, \xa3
+Cu \xa4
+I? \xa5
+L, \xa6
+SE \xa7
+': \xa8
+S< \xa9
+E- \xaa
+G, \xab
+T/ \xac
+-- \xad
+Z< \xae
+'m \xaf
+DG \xb0
+a; \xb1
+'; \xb2
+r, \xb3
+'' \xb4
+i? \xb5
+l, \xb6
+'< \xb7
+', \xb8
+s< \xb9
+e- \xba
+g, \xbb
+t/ \xbc
+NG \xbd
+z< \xbe
+ng \xbf
+A- \xc0
+A' \xc1
+A> \xc2
+A? \xc3
+A: \xc4
+AA \xc5
+AE \xc6
+I; \xc7
+C< \xc8
+E' \xc9
+E; \xca
+E: \xcb
+E. \xcc
+I' \xcd
+I> \xce
+I- \xcf
+D/ \xd0
+N, \xd1
+O- \xd2
+K, \xd3
+O> \xd4
+O? \xd5
+O: \xd6
+*X \xd7
+O/ \xd8
+U; \xd9
+U' \xda
+U> \xdb
+U: \xdc
+U? \xdd
+U- \xde
+ss \xdf
+a- \xe0
+a' \xe1
+a> \xe2
+a? \xe3
+a: \xe4
+aa \xe5
+ae \xe6
+i; \xe7
+c< \xe8
+e' \xe9
+e; \xea
+e: \xeb
+e. \xec
+i' \xed
+i> \xee
+i- \xef
+d/ \xf0
+n, \xf1
+o- \xf2
+k, \xf3
+o> \xf4
+o? \xf5
+o: \xf6
+-: \xf7
+o/ \xf8
+u; \xf9
+u' \xfa
+u> \xfb
+u: \xfc
+u? \xfd
+u- \xfe
+'. \xff
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/map.ISO8859-5 src/share/locale/colldef/map.ISO8859-5
--- src-orig/share/locale/colldef/map.ISO8859-5	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/map.ISO8859-5	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,175 @@
+# $FreeBSD$
+NU \x00
+SH \x01
+SX \x02
+EX \x03
+ET \x04
+EQ \x05
+AK \x06
+BL \x07
+BS \x08
+HT \x09
+LF \x0a
+VT \x0b
+FF \x0c
+CR \x0d
+SO \x0e
+SI \x0f
+DL \x10
+D1 \x11
+D2 \x12
+D3 \x13
+D4 \x14
+NK \x15
+SY \x16
+EB \x17
+CN \x18
+EM \x19
+SB \x1a
+EC \x1b
+FS \x1c
+GS \x1d
+RS \x1e
+US \x1f
+SP \x20
+Nb \x23
+DO \x24
+At \x40
+<( \x5b
+// \x5c
+)> \x5d
+'> \x5e
+'! \x60
+(! \x7b
+!! \x7c
+!) \x7d
+'? \x7e
+DT \x7f
+PA \x80
+HO \x81
+BH \x82
+NH \x83
+IN \x84
+NL \x85
+SA \x86
+ES \x87
+HS \x88
+HJ \x89
+VS \x8a
+PD \x8b
+PU \x8c
+RI \x8d
+S2 \x8e
+S3 \x8f
+DC \x90
+P1 \x91
+P2 \x92
+TS \x93
+CC \x94
+MW \x95
+SG \x96
+EG \x97
+SS \x98
+GC \x99
+SC \x9a
+CI \x9b
+ST \x9c
+OC \x9d
+PM \x9e
+AC \x9f
+NS \xa0
+IO \xa1
+D% \xa2
+G% \xa3
+IE \xa4
+DS \xa5
+II \xa6
+YI \xa7
+J% \xa8
+LJ \xa9
+NJ \xaa
+Ts \xab
+KJ \xac
+-- \xad
+V% \xae
+DZ \xaf
+A= \xb0
+B= \xb1
+V= \xb2
+G= \xb3
+D= \xb4
+E= \xb5
+Z% \xb6
+Z= \xb7
+I= \xb8
+J= \xb9
+K= \xba
+L= \xbb
+M= \xbc
+N= \xbd
+O= \xbe
+P= \xbf
+R= \xc0
+S= \xc1
+T= \xc2
+U= \xc3
+F= \xc4
+H= \xc5
+C= \xc6
+C% \xc7
+S% \xc8
+Sc \xc9
+=" \xca
+Y= \xcb
+%" \xcc
+JE \xcd
+JU \xce
+JA \xcf
+a= \xd0
+b= \xd1
+v= \xd2
+g= \xd3
+d= \xd4
+e= \xd5
+z% \xd6
+z= \xd7
+i= \xd8
+j= \xd9
+k= \xda
+l= \xdb
+m= \xdc
+n= \xdd
+o= \xde
+p= \xdf
+r= \xe0
+s= \xe1
+t= \xe2
+u= \xe3
+f= \xe4
+h= \xe5
+c= \xe6
+c% \xe7
+s% \xe8
+sc \xe9
+=' \xea
+y= \xeb
+%' \xec
+je \xed
+ju \xee
+ja \xef
+N0 \xf0
+io \xf1
+d% \xf2
+g% \xf3
+ie \xf4
+ds \xf5
+ii \xf6
+yi \xf7
+j% \xf8
+lj \xf9
+nj \xfa
+ts \xfb
+kj \xfc
+SE \xfd
+v% \xfe
+dz \xff
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/map.ISO8859-7 src/share/locale/colldef/map.ISO8859-7
--- src-orig/share/locale/colldef/map.ISO8859-7	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/map.ISO8859-7	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,175 @@
+# $FreeBSD$
+NU \x00
+SH \x01
+SX \x02
+EX \x03
+ET \x04
+EQ \x05
+AK \x06
+BL \x07
+BS \x08
+HT \x09
+LF \x0a
+VT \x0b
+FF \x0c
+CR \x0d
+SO \x0e
+SI \x0f
+DL \x10
+D1 \x11
+D2 \x12
+D3 \x13
+D4 \x14
+NK \x15
+SY \x16
+EB \x17
+CN \x18
+EM \x19
+SB \x1a
+EC \x1b
+FS \x1c
+GS \x1d
+RS \x1e
+US \x1f
+SP \x20
+Nb \x23
+DO \x24
+At \x40
+<( \x5b
+// \x5c
+)> \x5d
+'> \x5e
+'! \x60
+(! \x7b
+!! \x7c
+!) \x7d
+'? \x7e
+DT \x7f
+PA \x80
+HO \x81
+BH \x82
+NH \x83
+IN \x84
+NL \x85
+SA \x86
+ES \x87
+HS \x88
+HJ \x89
+VS \x8a
+PD \x8b
+PU \x8c
+RI \x8d
+S2 \x8e
+S3 \x8f
+DC \x90
+P1 \x91
+P2 \x92
+TS \x93
+CC \x94
+MW \x95
+SG \x96
+EG \x97
+SS \x98
+GC \x99
+SC \x9a
+CI \x9b
+ST \x9c
+OC \x9d
+PM \x9e
+AC \x9f
+NS \xa0
+9' \xa1
+'9 \xa2
+Pd \xa3
+IE \xa4
+DS \xa5
+BB \xa6
+SE \xa7
+': \xa8
+Co \xa9
+NJ \xaa
+<< \xab
+NO \xac
+-- \xad
+V% \xae
+-M \xaf
+DG \xb0
++- \xb1
+2S \xb2
+3S \xb3
+'' \xb4
+'% \xb5
+A% \xb6
+.M \xb7
+E% \xb8
+Y% \xb9
+I% \xba
+>> \xbb
+O% \xbc
+12 \xbd
+U% \xbe
+W% \xbf
+i3 \xc0
+A* \xc1
+B* \xc2
+G* \xc3
+D* \xc4
+E* \xc5
+Z* \xc6
+Y* \xc7
+H* \xc8
+I* \xc9
+K* \xca
+L* \xcb
+M* \xcc
+N* \xcd
+C* \xce
+O* \xcf
+P* \xd0
+R* \xd1
+v= \xd2
+S* \xd3
+T* \xd4
+U* \xd5
+F* \xd6
+X* \xd7
+Q* \xd8
+W* \xd9
+J* \xda
+V* \xdb
+a% \xdc
+e% \xdd
+y% \xde
+i% \xdf
+u3 \xe0
+a* \xe1
+b* \xe2
+g* \xe3
+d* \xe4
+e* \xe5
+z* \xe6
+y* \xe7
+h* \xe8
+i* \xe9
+k* \xea
+l* \xeb
+m* \xec
+n* \xed
+c* \xee
+o* \xef
+p* \xf0
+r* \xf1
+*s \xf2
+s* \xf3
+t* \xf4
+u* \xf5
+f* \xf6
+x* \xf7
+q* \xf8
+w* \xf9
+j* \xfa
+v* \xfb
+o% \xfc
+u% \xfd
+w% \xfe
+dz \xff
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/map.ISO8859-9 src/share/locale/colldef/map.ISO8859-9
--- src-orig/share/locale/colldef/map.ISO8859-9	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/map.ISO8859-9	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,175 @@
+# $FreeBSD$
+NU \x00
+SH \x01
+SX \x02
+EX \x03
+ET \x04
+EQ \x05
+AK \x06
+BL \x07
+BS \x08
+HT \x09
+LF \x0a
+VT \x0b
+FF \x0c
+CR \x0d
+SO \x0e
+SI \x0f
+DL \x10
+D1 \x11
+D2 \x12
+D3 \x13
+D4 \x14
+NK \x15
+SY \x16
+EB \x17
+CN \x18
+EM \x19
+SB \x1a
+EC \x1b
+FS \x1c
+GS \x1d
+RS \x1e
+US \x1f
+SP \x20
+Nb \x23
+DO \x24
+At \x40
+<( \x5b
+// \x5c
+)> \x5d
+'> \x5e
+'! \x60
+(! \x7b
+!! \x7c
+!) \x7d
+'? \x7e
+DT \x7f
+PA \x80
+HO \x81
+BH \x82
+NH \x83
+IN \x84
+NL \x85
+SA \x86
+ES \x87
+HS \x88
+HJ \x89
+VS \x8a
+PD \x8b
+PU \x8c
+RI \x8d
+S2 \x8e
+S3 \x8f
+DC \x90
+P1 \x91
+P2 \x92
+TS \x93
+CC \x94
+MW \x95
+SG \x96
+EG \x97
+SS \x98
+GC \x99
+SC \x9a
+CI \x9b
+ST \x9c
+OC \x9d
+PM \x9e
+AC \x9f
+NS \xa0
+!I \xa1
+Ct \xa2
+Pd \xa3
+Cu \xa4
+Ye \xa5
+BB \xa6
+SE \xa7
+': \xa8
+Co \xa9
+-a \xaa
+<< \xab
+NO \xac
+-- \xad
+Rg \xae
+'m \xaf
+DG \xb0
++- \xb1
+2S \xb2
+3S \xb3
+'' \xb4
+My \xb5
+PI \xb6
+.M \xb7
+', \xb8
+1S \xb9
+-o \xba
+>> \xbb
+14 \xbc
+12 \xbd
+34 \xbe
+?I \xbf
+A! \xc0
+A' \xc1
+A> \xc2
+A? \xc3
+A: \xc4
+AA \xc5
+AE \xc6
+C, \xc7
+E! \xc8
+E' \xc9
+E> \xca
+E: \xcb
+I! \xcc
+I' \xcd
+I> \xce
+I: \xcf
+G( \xd0
+N? \xd1
+O! \xd2
+O' \xd3
+O> \xd4
+O? \xd5
+O: \xd6
+*X \xd7
+O/ \xd8
+U! \xd9
+U' \xda
+U> \xdb
+U: \xdc
+I. \xdd
+S, \xde
+ss \xdf
+a! \xe0
+a' \xe1
+a> \xe2
+a? \xe3
+a: \xe4
+aa \xe5
+ae \xe6
+c, \xe7
+e! \xe8
+e' \xe9
+e; \xea
+e: \xeb
+e. \xec
+i' \xed
+i> \xee
+i- \xef
+g( \xf0
+n? \xf1
+o! \xf2
+o' \xf3
+o> \xf4
+o? \xf5
+o: \xf6
+-: \xf7
+o/ \xf8
+u! \xf9
+u' \xfa
+u> \xfb
+u: \xfc
+i. \xfd
+s, \xfe
+y: \xff
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/map.KOI8-R src/share/locale/colldef/map.KOI8-R
--- src-orig/share/locale/colldef/map.KOI8-R	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/map.KOI8-R	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,175 @@
+# $FreeBSD$
+NU \x00
+SH \x01
+SX \x02
+EX \x03
+ET \x04
+EQ \x05
+AK \x06
+BL \x07
+BS \x08
+HT \x09
+LF \x0a
+VT \x0b
+FF \x0c
+CR \x0d
+SO \x0e
+SI \x0f
+DL \x10
+D1 \x11
+D2 \x12
+D3 \x13
+D4 \x14
+NK \x15
+SY \x16
+EB \x17
+CN \x18
+EM \x19
+SB \x1a
+EC \x1b
+FS \x1c
+GS \x1d
+RS \x1e
+US \x1f
+SP \x20
+Nb \x23
+DO \x24
+At \x40
+<( \x5b
+// \x5c
+)> \x5d
+'> \x5e
+'! \x60
+(! \x7b
+!! \x7c
+!) \x7d
+'? \x7e
+DT \x7f
+hh \x80
+vv \x81
+dr \x82
+dl \x83
+ur \x84
+ul \x85
+vr \x86
+vl \x87
+dh \x88
+uh \x89
+vh \x8a
+TB \x8b
+LB \x8c
+FB \x8d
+lB \x8e
+RB \x8f
+.S \x90
+:S \x91
+?S \x92
+Iu \x93
+fS \x94
+Sb \x95
+RT \x96
+?2 \x97
+=< \x98
+>= \x99
+NS \x9a
+Il \x9b
+DG \x9c
+2S \x9d
+.M \x9e
+-: \x9f
+HH \xa0
+VV \xa1
+dR \xa2
+io \xa3
+Dr \xa4
+DR \xa5
+dL \xa6
+Dl \xa7
+LD \xa8
+uR \xa9
+Ur \xaa
+UR \xab
+uL \xac
+Ul \xad
+UL \xae
+vR \xaf
+Vr \xb0
+VR \xb1
+vL \xb2
+IO \xb3
+Vl \xb4
+VL \xb5
+dH \xb6
+Dh \xb7
+DH \xb8
+uH \xb9
+Uh \xba
+UH \xbb
+vH \xbc
+Vh \xbd
+VH \xbe
+Co \xbf
+ju \xc0
+a= \xc1
+b= \xc2
+c= \xc3
+d= \xc4
+e= \xc5
+f= \xc6
+g= \xc7
+h= \xc8
+i= \xc9
+j= \xca
+k= \xcb
+l= \xcc
+m= \xcd
+n= \xce
+o= \xcf
+p= \xd0
+ja \xd1
+r= \xd2
+s= \xd3
+t= \xd4
+u= \xd5
+z% \xd6
+v= \xd7
+%' \xd8
+y= \xd9
+z= \xda
+s% \xdb
+je \xdc
+sc \xdd
+c% \xde
+=' \xdf
+JU \xe0
+A= \xe1
+B= \xe2
+C= \xe3
+D= \xe4
+E= \xe5
+F= \xe6
+G= \xe7
+H= \xe8
+I= \xe9
+J= \xea
+K= \xeb
+L= \xec
+M= \xed
+N= \xee
+O= \xef
+P= \xf0
+JA \xf1
+R= \xf2
+S= \xf3
+T= \xf4
+U= \xf5
+Z% \xf6
+V= \xf7
+%" \xf8
+Y= \xf9
+Z= \xfa
+S% \xfb
+JE \xfc
+Sc \xfd
+C% \xfe
+=" \xff
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/map.KOI8-U src/share/locale/colldef/map.KOI8-U
--- src-orig/share/locale/colldef/map.KOI8-U	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/map.KOI8-U	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,175 @@
+# $FreeBSD$
+NU \x00
+SH \x01
+SX \x02
+EX \x03
+ET \x04
+EQ \x05
+AK \x06
+BL \x07
+BS \x08
+HT \x09
+LF \x0a
+VT \x0b
+FF \x0c
+CR \x0d
+SO \x0e
+SI \x0f
+DL \x10
+D1 \x11
+D2 \x12
+D3 \x13
+D4 \x14
+NK \x15
+SY \x16
+EB \x17
+CN \x18
+EM \x19
+SB \x1a
+EC \x1b
+FS \x1c
+GS \x1d
+RS \x1e
+US \x1f
+SP \x20
+Nb \x23
+DO \x24
+At \x40
+<( \x5b
+// \x5c
+)> \x5d
+'> \x5e
+'! \x60
+(! \x7b
+!! \x7c
+!) \x7d
+'? \x7e
+DT \x7f
+hh \x80
+vv \x81
+dr \x82
+dl \x83
+ur \x84
+ul \x85
+vr \x86
+vl \x87
+dh \x88
+uh \x89
+vh \x8a
+TB \x8b
+LB \x8c
+FB \x8d
+lB \x8e
+RB \x8f
+.S \x90
+:S \x91
+?S \x92
+Iu \x93
+fS \x94
+Sb \x95
+RT \x96
+?2 \x97
+=< \x98
+>= \x99
+NS \x9a
+Il \x9b
+DG \x9c
+2S \x9d
+.M \x9e
+-: \x9f
+HH \xa0
+VV \xa1
+dR \xa2
+io \xa3
+ie \xa4
+DR \xa5
+ii \xa6
+yi \xa7
+LD \xa8
+uR \xa9
+Ur \xaa
+UR \xab
+uL \xac
+g3 \xad
+UL \xae
+vR \xaf
+Vr \xb0
+VR \xb1
+vL \xb2
+IO \xb3
+IE \xb4
+VL \xb5
+II \xb6
+YI \xb7
+DH \xb8
+uH \xb9
+Uh \xba
+UH \xbb
+vH \xbc
+G3 \xbd
+VH \xbe
+Co \xbf
+ju \xc0
+a= \xc1
+b= \xc2
+c= \xc3
+d= \xc4
+e= \xc5
+f= \xc6
+g= \xc7
+h= \xc8
+i= \xc9
+j= \xca
+k= \xcb
+l= \xcc
+m= \xcd
+n= \xce
+o= \xcf
+p= \xd0
+ja \xd1
+r= \xd2
+s= \xd3
+t= \xd4
+u= \xd5
+z% \xd6
+v= \xd7
+%' \xd8
+y= \xd9
+z= \xda
+s% \xdb
+je \xdc
+sc \xdd
+c% \xde
+=' \xdf
+JU \xe0
+A= \xe1
+B= \xe2
+C= \xe3
+D= \xe4
+E= \xe5
+F= \xe6
+G= \xe7
+H= \xe8
+I= \xe9
+J= \xea
+K= \xeb
+L= \xec
+M= \xed
+N= \xee
+O= \xef
+P= \xf0
+JA \xf1
+R= \xf2
+S= \xf3
+T= \xf4
+U= \xf5
+Z% \xf6
+V= \xf7
+%" \xf8
+Y= \xf9
+Z= \xfa
+S% \xfb
+JE \xfc
+Sc \xfd
+C% \xfe
+=" \xff
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/map.PT154 src/share/locale/colldef/map.PT154
--- src-orig/share/locale/colldef/map.PT154	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/map.PT154	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,258 @@
+# $FreeBSD$
+# Birsh T <birsh@mail.kz>, 2003-12-12
+NU \x00
+SH \x01
+SX \x02
+EX \x03
+ET \x04
+EQ \x05
+AK \x06
+BL \x07
+BS \x08
+HT \x09
+LF \x0a
+VT \x0b
+FF \x0c
+CR \x0d
+SO \x0e
+SI \x0f
+DL \x10
+D1 \x11
+D2 \x12
+D3 \x13
+D4 \x14
+NK \x15
+SY \x16
+EB \x17
+CN \x18
+EM \x19
+SB \x1a
+EC \x1b
+FS \x1c
+GS \x1d
+RS \x1e
+US \x1f
+SP \x20
+! \x21
+" \x22
+Nb \x23
+DO \x24
+% \x25
+& \x26
+' \x27
+( \x28
+) \x29
+* \x2a
++ \x2b
+, \x2c
+- \x2d
+. \x2e
+/ \x2f
+0 \x30
+1 \x31
+2 \x32
+3 \x33
+4 \x34
+5 \x35
+6 \x36
+7 \x37
+8 \x38
+9 \x39
+: \x3a
+; \x3b
+< \x3c
+= \x3d
+> \x3e
+? \x3f
+At \x40
+A \x41
+B \x42
+C \x43
+D \x44
+E \x45
+F \x46
+G \x47
+H \x48
+I \x49
+J \x4a
+K \x4b
+L \x4c
+M \x4d
+N \x4e
+O \x4f
+P \x50
+Q \x51
+R \x52
+S \x53
+T \x54
+U \x55
+V \x56
+W \x57
+X \x58
+Y \x59
+Z \x5a
+<( \x5b
+// \x5c
+)> \x5d
+'> \x5e
+_ \x5f
+'! \x60
+a \x61
+b \x62
+c \x63
+d \x64
+e \x65
+f \x66
+g \x67
+h \x68
+i \x69
+j \x6a
+k \x6b
+l \x6c
+m \x6d
+n \x6e
+o \x6f
+p \x70
+q \x71
+r \x72
+s \x73
+t \x74
+u \x75
+v \x76
+w \x77
+x \x78
+y \x79
+z \x7a
+(! \x7b
+!! \x7c
+!) \x7d
+'? \x7e
+DT \x7f
+Z. \x80
+G- \x81
+U' \x82
+g- \x83
+:9 \x84
+.3 \x85
+C. \x86
+Y" \x87
+H% \x88
+y" \x89
+BK \x8a
+I' \x8b
+N% \x8c
+K% \x8d
+HH \x8e
+C! \x8f
+z. \x90
+'6 \x91
+'9 \x92
+"6 \x93
+"9 \x94
+sb \x95
+-N \x96
+-M \x97
+h% \x98
+c. \x99
+bk \x9a
+i' \x9b
+n% \x9c
+k% \x9d
+hh \x9e
+c! \x9f
+NS \xa0
+V% \xa1
+v% \xa2
+J% \xa3
+O- \xa4
+X% \xa5
+Y- \xa6
+SE \xa7
+IO \xa8
+Co \xa9
+HW \xaa
+<< \xab
+NO \xac
+u' \xad
+Rg \xae
+K! \xaf
+DG \xb0
+y- \xb1
+II \xb2
+ii \xb3
+x% \xb4
+o- \xb5
+PI \xb6
+.M \xb7
+io \xb8
+N0 \xb9
+hw \xba
+>> \xbb
+j% \xbc
+DS \xbd
+ds \xbe
+k! \xbf
+A= \xc0
+B= \xc1
+V= \xc2
+G= \xc3
+D= \xc4
+E= \xc5
+Z% \xc6
+Z= \xc7
+I= \xc8
+J= \xc9
+K= \xca
+L= \xcb
+M= \xcc
+N= \xcd
+O= \xce
+P= \xcf
+R= \xd0
+S= \xd1
+T= \xd2
+U= \xd3
+F= \xd4
+H= \xd5
+C= \xd6
+C% \xd7
+S% \xd8
+Sc \xd9
+=" \xda
+Y= \xdb
+%" \xdc
+JE \xdd
+JU \xde
+JA \xdf
+a= \xe0
+b= \xe1
+v= \xe2
+g= \xe3
+d= \xe4
+e= \xe5
+z% \xe6
+z= \xe7
+i= \xe8
+j= \xe9
+k= \xea
+l= \xeb
+m= \xec
+n= \xed
+o= \xee
+p= \xef
+r= \xf0
+s= \xf1
+t= \xf2
+u= \xf3
+f= \xf4
+h= \xf5
+c= \xf6
+c% \xf7
+s% \xf8
+sc \xf9
+=' \xfa
+y= \xfb
+%' \xfc
+je \xfd
+ju \xfe
+ja \xff
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/no_NO.ISO8859-1.src src/share/locale/colldef/no_NO.ISO8859-1.src
--- src-orig/share/locale/colldef/no_NO.ISO8859-1.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/no_NO.ISO8859-1.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,42 @@
+# Norwegian/ISO 8859-1 (backward compatible with ASCII)
+#
+# (Based on the Swedish sv_SE.ISO_8859-1)
+#
+# $FreeBSD$
+#
+charmap map.ISO8859-1
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+#
+	<NS>;<SP>;!;<!I>;\";<<<>;</>/>>;<Nb>;\
+	<Cu>;<Ct>;<DO>;<Pd>;<Ye>;\
+	%;&;<',>;';\(;\);*;+;<+->;<-:>;<*X>;\,;<-->;-;.;/;\
+# digits
+	(0,<14>,<12>,<34>);(1,<1S>);(2,<2S>);(3,<3S>);4;...;9;\
+#
+	:;\;;\<;=;>;?;<?I>;<SE>;<PI>;<Co>;<Rg>;<At>;\
+# capital
+	(A,<A'>,<A!>,<A/>>,<A?>);\
+	B;(C,<C,>);(D,<D->);(E,<E'>,<E!>,<E/>>,<E:>);\
+	F;G;H;(I,<I'>,<I!>,<I/>>,<I:>);\
+	J;...;M;(N,<N?>);(O,<O'>,<O!>,<O?>,<O/>>);\
+	P;...;T;(U,<U'>,<U!>,<U/>>);\
+	V;W;X;(Y,<Y'>,<U:>);Z;\
+	<TH>;\
+	(<AE>,<A:>);(<O//>,<O:>);<AA>;\
+#
+	[;\\;];^;<':>;_;<'m>;<''>;`;\
+# small
+	(a,<a'>,<a!>,<a/>>,<a?>);\
+	b;(c,<c,>);(d,<d->);(e,<e'>,<e!>,<e/>>,<e:>);\
+	f;g;h;(i,<i'>,<i!>,<i/>>,<i:>);\
+	j;...;m;(n,<n?>);(o,<o'>,<o!>,<o?>,<o/>>);\
+	p;...;t;(u,<u'>,<u!>,<u/>>);\
+	v;w;x;(y,<y'>,<y:>,<u:>);z;\
+	<th>;\
+	(<ae>,<a:>);(<o//>,<o:>);<aa>;\
+#
+	\{;<NO>;|;<BB>;\};~;<.M>;<DG>;<My>;<DT>;\
+# remains
+	<-a>;<ss>;<-o>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/no_NO.ISO8859-15.src src/share/locale/colldef/no_NO.ISO8859-15.src
--- src-orig/share/locale/colldef/no_NO.ISO8859-15.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/no_NO.ISO8859-15.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,42 @@
+# Norwegian/ISO 8859-15 (backward compatible with ASCII)
+#
+# (Based on the Swedish sv_SE.ISO_8859-15)
+#
+# $FreeBSD$
+#
+charmap map.ISO8859-15
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+#
+	<NS>;<SP>;!;<!I>;\";<<<>;</>/>>;<Nb>;\
+	<Eu>;<Ct>;<DO>;<Pd>;<Ye>;\
+	%;&;';\(;\);*;+;<+->;<-:>;<*X>;\,;<-->;-;.;/;\
+# digits
+	0;(1,<1S>);(2,<2S>);(3,<3S>);4;...;9;\
+#
+	:;\;;\<;=;>;?;<?I>;<SE>;<PI>;<Co>;<Rg>;<At>;\
+# capital
+	(A,<A'>,<A!>,<A/>>,<A?>);\
+	B;(C,<C,>);(D,<D->);(E,<E'>,<E!>,<E/>>,<E:>);\
+	F;G;H;(I,<I'>,<I!>,<I/>>,<I:>);\
+	J;...;M;(N,<N?>);(O,<O'>,<O!>,<O?>,<O/>>,<OE>);\
+	P;Q;R;(S,<S<>);T;(U,<U'>,<U!>,<U/>>);\
+	V;W;X;(Y,<Y'>,<Y:>,<U:>);(Z,<Z<>);\
+	<TH>;\
+	(<AE>,<A:>);(<O//>,<O:>);<AA>;\
+#
+	[;\\;];^;_;<'m>;`;\
+# small
+	(a,<a'>,<a!>,<a/>>,<a?>);\
+	b;(c,<c,>);(d,<d->);(e,<e'>,<e!>,<e/>>,<e:>);\
+	f;g;h;(i,<i'>,<i!>,<i/>>,<i:>);\
+	j;...;m;(n,<n?>);(o,<o'>,<o!>,<o?>,<o/>>,<oe>);\
+	p;q;r;(s,<s<>,<ss>);t;(u,<u'>,<u!>,<u/>>);\
+	v;w;x;(y,<y'>,<y:>,<u:>);(z,<z<>);\
+	<th>;\
+	(<ae>,<a:>);(<o//>,<o:>);<aa>;\
+#
+	\{;<NO>;|;\};~;<.M>;<DG>;<My>;<DT>;\
+# remains
+	<-a>;<-o>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/pl_PL.ISO8859-2.src src/share/locale/colldef/pl_PL.ISO8859-2.src
--- src-orig/share/locale/colldef/pl_PL.ISO8859-2.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/pl_PL.ISO8859-2.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,37 @@
+# Latin2 (for Polish) by Michal Pasternak <michal@pasternak.w.lub.pl> 
+# with much help from Adam Liberacki and Jan Srzednicki
+#
+# $FreeBSD$
+#
+charmap map.ISO8859-2
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+# 
+	<NS>;<SP>;!;\";<Nb>;\
+	<Cu>;<DO>;\
+	%;&;<',>;<';>;';\(;\);*;+;<-:>;<*X>;\,;<-->;-;.;<'.>;/;\
+# digits
+	0;...;9;\
+# 
+	:;\;;\<;=;>;?;<SE>;<At>;\
+# capital
+	(A,<A'>,<A/>>,<A:>,<A(>);\
+	<A;>;B;(C,<C,>,<C<>);<C'>;(D,<D<>,<D//>);(E,<E'>,<E:>,<E<>);<E;>;\
+	F;G;H;(I,<I'>,<I/>>);\
+	J;K;(L,<L<>,<L'>);<L//>;M;(N,<N<>);<N'>;(O,<O/>>,<O:>,<O">);<O'>;\
+	P;Q;(R,<R'>,<R<>);(S,<S<>,<S,>);<S'>;(T,<T<>,<T,>);\
+	(U,<U'>,<U:>,<U0>,<U">);\
+	V;W;X;(Y,<Y'>);(Z,<Z<>);<Z'>;<Z.>;\
+#
+	[;\\;];^;<':>;<'">;<'<>;<'(>;_;<''>;`;\
+# small
+	(a,<a'>,<a/>>,<a:>,<a(>);<a;>;\
+	b;(c,<c,>,<c<>);<c'>;(d,<d<>,<d//>);(e,<e'>,<e:>,<e<>);<e;>;\
+	f;g;h;(i,<i'>,<i/>>);\
+	j;k;(l,<l<>,<l'>);<l//>;m;(n,<n<>);<n'>;(o,<o/>>,<o:>,<o">);<o'>;\
+	p;q;(r,<r'>,<r<>);(s,<s<>,<s,>,<ss>);<s'>;(t,<t<>,<t,>);\
+	(u,<u'>,<u:>,<u0>,<u">);\
+	v;w;x;(y,<y'>);(z,<z<>);<z'>;<z.>;\
+#
+	\{;|;\};~;<DG>;<DT>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/ru_RU.CP866.src src/share/locale/colldef/ru_RU.CP866.src
--- src-orig/share/locale/colldef/ru_RU.CP866.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/ru_RU.CP866.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,40 @@
+# CP866 (backward compatible with ASCII)
+#
+# $FreeBSD$
+#
+charmap map.CP866
+order \
+# controls
+	<NU>;...;<US>;\
+#
+	<NS>;<SP>;!;\";<Nb>;<Cu>;<DO>;\
+	%;&;';\(;\);*;+;\,;-;.;/;\
+# digits
+	0;...;9;\
+#
+	:;\;;\<;=;>;?;<At>;\
+# capital
+	A;...;Z;\
+	<A=>;<B=>;<V=>;<G=>;<D=>;<E=>;<IO>;<Z%>;<Z=>;\
+	<I=>;<J=>;<K=>;<L=>;<M=>;<N=>;<O=>;<P=>;<R=>;\
+	<S=>;<T=>;<U=>;<F=>;<H=>;<C=>;<C%>;<S%>;<Sc>;\
+	<=">;<Y=>;<%">;<JE>;<JU>;<JA>;\
+#
+	[;\\;];^;_;`;\
+# small
+	a;...;z;\
+	<a=>;<b=>;<v=>;<g=>;<d=>;<e=>;<io>;<z%>;<z=>;\
+	<i=>;<j=>;<k=>;<l=>;<m=>;<n=>;<o=>;<p=>;<r=>;\
+	<s=>;<t=>;<u=>;<f=>;<h=>;<c=>;<c%>;<s%>;<sc>;\
+	<='>;<y=>;<%'>;<je>;<ju>;<ja>;\
+#
+	\{;|;\};~;<.M>;<DG>;<Sb>;<N0>;<RT>;\
+#
+	<hh>;<HH>;<vv>;<VV>;<dr>;<dR>;<Dr>;<DR>;\
+	<dl>;<dL>;<Dl>;<LD>;<ur>;<uR>;<Ur>;<UR>;\
+	<ul>;<uL>;<Ul>;<UL>;<vr>;<vR>;<Vr>;<VR>;\
+	<vl>;<vL>;<Vl>;<VL>;<dh>;<dH>;<Dh>;<DH>;\
+	<uh>;<uH>;<Uh>;<UH>;<vh>;<vH>;<Vh>;<VH>;\
+	<TB>;<LB>;<FB>;<lB>;<RB>;<.S>;<:S>;<?S>;<fS>;<DT>;\
+#
+	<IE>;<ie>;<YI>;<yi>;<V%>;<v%>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/ru_RU.ISO8859-5.src src/share/locale/colldef/ru_RU.ISO8859-5.src
--- src-orig/share/locale/colldef/ru_RU.ISO8859-5.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/ru_RU.ISO8859-5.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,39 @@
+# Russian part of ISO8859-5 (backward compatible with ASCII)
+#
+# $FreeBSD$
+#
+charmap map.ISO8859-5
+order \
+# controls
+	<NU>;...;<US>;\
+#
+	<NS>;<SP>;!;\";<Nb>;<DO>;\
+	%;&;';\(;\);*;+;\,;<-->;-;.;/;\
+# digits
+	0;...;9;\
+#
+	:;\;;\<;=;>;?;<At>;\
+# capital
+	A;...;Z;\
+	<A=>;<B=>;<V=>;<G=>;<D=>;<E=>;<IO>;<Z%>;<Z=>;\
+	<I=>;<J=>;<K=>;<L=>;<M=>;<N=>;<O=>;<P=>;<R=>;\
+	<S=>;<T=>;<U=>;<F=>;<H=>;<C=>;<C%>;<S%>;<Sc>;\
+	<=">;<Y=>;<%">;<JE>;<JU>;<JA>;\
+#
+	[;\\;];^;_;`;\
+# small
+	a;...;z;\
+	<a=>;<b=>;<v=>;<g=>;<d=>;<e=>;<io>;<z%>;<z=>;\
+	<i=>;<j=>;<k=>;<l=>;<m=>;<n=>;<o=>;<p=>;<r=>;\
+	<s=>;<t=>;<u=>;<f=>;<h=>;<c=>;<c%>;<s%>;<sc>;\
+	<='>;<y=>;<%'>;<je>;<ju>;<ja>;\
+#
+	\{;|;\};~;<N0>;<DT>;\
+#
+	<PA>;<HO>;<BH>;<NH>;<IN>;<NL>;\
+	<SA>;<ES>;<HS>;<HJ>;<VS>;<PD>;<PU>;<RI>;<S2>;\
+	<S3>;<DC>;<P1>;<P2>;<TS>;<CC>;<MW>;<SG>;<EG>;\
+	<SS>;<GC>;<SC>;<CI>;<ST>;<OC>;<PM>;<AC>;<D%>;\
+	<G%>;<IE>;<DS>;<II>;<YI>;<J%>;<LJ>;<NJ>;<Ts>;\
+	<KJ>;<V%>;<DZ>;<d%>;<g%>;<ie>;<ds>;\
+	<ii>;<yi>;<j%>;<lj>;<nj>;<ts>;<kj>;<SE>;<v%>;<dz>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/ru_RU.KOI8-R.src src/share/locale/colldef/ru_RU.KOI8-R.src
--- src-orig/share/locale/colldef/ru_RU.KOI8-R.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/ru_RU.KOI8-R.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,39 @@
+# koi8-r (backward compatible with ASCII)
+#
+# $FreeBSD$
+#
+charmap map.KOI8-R
+order \
+# controls
+	<NU>;...;<US>;\
+#
+	<NS>;<SP>;!;\";<Nb>;<DO>;\
+	%;&;';\(;\);*;+;<-:>;\,;-;.;/;\
+# digits
+	0;1;(2,<2S>);3;...;9;\
+#
+	:;\;;\<;<=<>;=;</>=>;>;?;<Co>;<At>;\
+# capital
+	A;...;Z;\
+	<A=>;<B=>;<V=>;<G=>;<D=>;<E=>;<IO>;<Z%>;<Z=>;\
+	<I=>;<J=>;<K=>;<L=>;<M=>;<N=>;<O=>;<P=>;<R=>;\
+	<S=>;<T=>;<U=>;<F=>;<H=>;<C=>;<C%>;<S%>;<Sc>;\
+	<=">;<Y=>;<%">;<JE>;<JU>;<JA>;\
+#
+	[;\\;];^;_;`;\
+# small
+	a;...;z;\
+	<a=>;<b=>;<v=>;<g=>;<d=>;<e=>;<io>;<z%>;<z=>;\
+	<i=>;<j=>;<k=>;<l=>;<m=>;<n=>;<o=>;<p=>;<r=>;\
+	<s=>;<t=>;<u=>;<f=>;<h=>;<c=>;<c%>;<s%>;<sc>;\
+	<='>;<y=>;<%'>;<je>;<ju>;<ja>;\
+#
+	\{;|;\};~;<.M>;<DG>;\
+#
+	<Sb>;<RT>;<?2>;<Iu>;<Il>;\
+	<hh>;<HH>;<vv>;<VV>;<dr>;<dR>;<Dr>;<DR>;\
+	<dl>;<dL>;<Dl>;<LD>;<ur>;<uR>;<Ur>;<UR>;\
+	<ul>;<uL>;<Ul>;<UL>;<vr>;<vR>;<Vr>;<VR>;\
+	<vl>;<vL>;<Vl>;<VL>;<dh>;<dH>;<Dh>;<DH>;\
+	<uh>;<uH>;<Uh>;<UH>;<vh>;<vH>;<Vh>;<VH>;\
+	<TB>;<LB>;<FB>;<lB>;<RB>;<.S>;<:S>;<?S>;<fS>;<DT>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/sl_SI.ISO8859-2.src src/share/locale/colldef/sl_SI.ISO8859-2.src
--- src-orig/share/locale/colldef/sl_SI.ISO8859-2.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/sl_SI.ISO8859-2.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,39 @@
+#
+# Slovenian collation sequence
+# 2003-03-20 simon.zekar@literal.si
+#
+# $FreeBSD$
+#
+
+charmap map.ISO8859-2
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+# 
+	<NS>;<SP>;!;\";<Nb>;\
+	<Cu>;<DO>;\
+	%;&;<',>;<';>;';\(;\);*;+;<-:>;<*X>;\,;<-->;-;.;<'.>;/;\
+# digits
+	0;...;9;\
+# 
+	:;\;;\<;=;>;?;<SE>;<At>;\
+# capital
+	(A,<A'>,<A/>>,<A:>,<A;>,<A(>);\
+	B;(C,<C,>);<C<>;<C'>;(D,<D<>);<D//>;(E,<E'>,<E:>,<E;>,<E<>);\
+	F;G;H;(I,<I'>,<I/>>);\
+	J;K;(L,<L//>,<L<>,<L'>);M;(N,<N'>,<N<>);(O,<O'>,<O/>>,<O:>,<O">);\
+	P;Q;(R,<R'>,<R<>);(S,<S'>,<S,>);<S<>;(T,<T<>,<T,>);\
+	(U,<U'>,<U:>,<U0>,<U">);\
+	V;W;X;(Y,<Y'>);(Z,<Z'>,<Z.>);<Z<>;\
+#
+	[;\\;];^;<':>;<'">;<'<>;<'(>;_;<''>;`;\
+# small
+	(a,<a'>,<a/>>,<a:>,<a;>,<a(>);\
+	b;(c,<c,>);<c<>;<c'>;(d,<d<>);<d//>;(e,<e'>,<e:>,<e;>,<e<>);\
+	f;g;h;(i,<i'>,<i/>>);\
+	j;k;(l,<l//>,<l<>,<l'>);m;(n,<n'>,<n<>);(o,<o'>,<o/>>,<o:>,<o">);\
+	p;q;(r,<r'>,<r<>);(s,<s'>,<s,>,<ss>);<s<>;(t,<t<>,<t,>);\
+	(u,<u'>,<u:>,<u0>,<u">);\
+	v;w;x;(y,<y'>);(z,<z'>,<z.>);<z<>;\
+#
+	\{;|;\};~;<DG>;<DT>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/sv_SE.ISO8859-1.src src/share/locale/colldef/sv_SE.ISO8859-1.src
--- src-orig/share/locale/colldef/sv_SE.ISO8859-1.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/sv_SE.ISO8859-1.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,40 @@
+# Swedish/ISO 8859-1 (backward compatible with ASCII)
+#
+# (Based on the German de_DE.ISO_8859-1)
+#
+# $FreeBSD$
+#
+charmap map.ISO8859-1
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+#
+	<NS>;<SP>;!;<!I>;\";<<<>;</>/>>;<Nb>;\
+	<Cu>;<Ct>;<DO>;<Pd>;<Ye>;\
+	%;&;<',>;';\(;\);*;+;<+->;<-:>;<*X>;\,;<-->;-;.;/;\
+# digits
+	(0,<14>,<12>,<34>);(1,<1S>);(2,<2S>);(3,<3S>);4;...;9;\
+#
+	:;\;;\<;=;>;?;<?I>;<SE>;<PI>;<Co>;<Rg>;<At>;\
+# capital
+	(A,<A'>,<A!>,<A/>>,<A?>);\
+	B;(C,<C,>);(D,<D->);(E,<E'>,<E!>,<E/>>,<E:>);\
+	F;G;H;(I,<I'>,<I!>,<I/>>,<I:>);\
+	J;...;M;(N,<N?>);(O,<O'>,<O!>,<O?>,<O/>>);\
+	P;...;T;(U,<U'>,<U!>,<U/>>,<U:>);\
+	V;W;X;(Y,<Y'>);Z;<AA>;(<A:>,<AE>);(<O:>,<O//>);\
+	<TH>;\
+#
+	[;\\;];^;<':>;_;<'m>;<''>;`;\
+# small
+	(a,<a'>,<a!>,<a/>>,<a?>);\
+	b;(c,<c,>);(d,<d->);(e,<e'>,<e!>,<e/>>,<e:>);\
+	f;g;h;(i,<i'>,<i!>,<i/>>,<i:>);\
+	j;...;m;(n,<n?>);(o,<o'>,<o!>,<o?>,<o/>>);\
+	p;...;t;(u,<u'>,<u!>,<u/>>,<u:>);\
+	v;w;x;(y,<y'>,<y:>);z;<aa>;(<a:>,<ae>);(<o:>,<o//>);\
+	<th>;\
+#
+	\{;<NO>;|;<BB>;\};~;<.M>;<DG>;<My>;<DT>;\
+# remains
+	<-a>;<ss>;<-o>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/sv_SE.ISO8859-15.src src/share/locale/colldef/sv_SE.ISO8859-15.src
--- src-orig/share/locale/colldef/sv_SE.ISO8859-15.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/sv_SE.ISO8859-15.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,40 @@
+# Swedish/DIS 8859-15 (backward compatible with ASCII)
+#
+# (Based on the German de_DE.ISO_8859-15)
+#
+# $FreeBSD$
+#
+charmap map.ISO8859-15
+order \
+# controls
+	<NU>;...;<US>;<PA>;...;<AC>;\
+#
+	<NS>;<SP>;!;<!I>;\";<<<>;</>/>>;<Nb>;\
+	<Eu>;<Ct>;<DO>;<Pd>;<Ye>;\
+	%;&;';\(;\);*;+;<+->;<-:>;<*X>;\,;<-->;-;.;/;\
+# digits
+	0;(1,<1S>);(2,<2S>);(3,<3S>);4;...;9;\
+#
+	:;\;;\<;=;>;?;<?I>;<SE>;<PI>;<Co>;<Rg>;<At>;\
+# capital
+	(A,<A'>,<A!>,<A/>>,<A?>);\
+	B;(C,<C,>);(D,<D->);(E,<E'>,<E!>,<E/>>,<E:>);\
+	F;G;H;(I,<I'>,<I!>,<I/>>,<I:>);\
+	J;...;M;(N,<N?>);(O,<O'>,<O!>,<O?>,<O/>>,<OE>);\
+	P;Q;R;(S,<S<>);T;(U,<U'>,<U!>,<U/>>,<U:>);\
+	V;W;X;(Y,<Y'>,<Y:>);(Z,<Z<>);<AA>;(<A:>,<AE>);(<O:>,<O//>);\
+	<TH>;\
+#
+	[;\\;];^;_;<'m>;`;\
+# small
+	(a,<a'>,<a!>,<a/>>,<a?>);\
+	b;(c,<c,>);(d,<d->);(e,<e'>,<e!>,<e/>>,<e:>);\
+	f;g;h;(i,<i'>,<i!>,<i/>>,<i:>);\
+	j;...;m;(n,<n?>);(o,<o'>,<o!>,<o?>,<o/>>,<oe>);\
+	p;q;r;(s,<s<>,<ss>);t;(u,<u'>,<u!>,<u/>>,<u:>);\
+	v;w;x;(y,<y'>,<y:>);(z,<z<>);<aa>;(<a:>,<ae>);(<o:>,<o//>);\
+	<th>;\
+#
+	\{;<NO>;|;\};~;<.M>;<DG>;<My>;<DT>;\
+# remains
+	<-a>;<-o>
diff -ruN -x obj -x CVS -x *~ src-orig/share/locale/colldef/uk_UA.KOI8-U.src src/share/locale/colldef/uk_UA.KOI8-U.src
--- src-orig/share/locale/colldef/uk_UA.KOI8-U.src	Wed Dec 31 19:00:00 1969
+++ src/share/locale/colldef/uk_UA.KOI8-U.src	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,39 @@
+# koi8-u (backward compatible with ASCII)
+#
+# $FreeBSD$
+#
+charmap map.KOI8-U
+order \
+# controls
+	<NU>;...;<US>;\
+#
+	<NS>;<SP>;!;\";<Nb>;<DO>;\
+	%;&;';\(;\);*;+;<-:>;\,;-;.;/;\
+# digits
+	0;1;(2,<2S>);3;...;9;\
+#
+	:;\;;\<;<=<>;=;</>=>;>;?;<Co>;<At>;\
+# capital
+	A;...;Z;\
+	<A=>;<B=>;<V=>;<G=>;<G3>;<D=>;<E=>;<IE>;<IO>;<Z%>;<Z=>;\
+	<I=>;<II>;<YI>;<J=>;<K=>;<L=>;<M=>;<N=>;<O=>;<P=>;<R=>;\
+	<S=>;<T=>;<U=>;<F=>;<H=>;<C=>;<C%>;<S%>;<Sc>;\
+	<=">;<Y=>;<JE>;<JU>;<JA>;<%">;\
+#
+	[;\\;];^;_;`;\
+# small
+	a;...;z;\
+	<a=>;<b=>;<v=>;<g=>;<g3>;<d=>;<e=>;<ie>;<io>;<z%>;<z=>;\
+	<i=>;<ii>;<yi>;<j=>;<k=>;<l=>;<m=>;<n=>;<o=>;<p=>;<r=>;\
+	<s=>;<t=>;<u=>;<f=>;<h=>;<c=>;<c%>;<s%>;<sc>;\
+	<='>;<y=>;<je>;<ju>;<ja>;<%'>;\
+#
+	\{;|;\};~;<.M>;<DG>;\
+#
+	<Sb>;<RT>;<?2>;<Iu>;<Il>;\
+	<hh>;<HH>;<vv>;<VV>;<dr>;<dR>;<DR>;\
+	<dl>;<LD>;<ur>;<uR>;<Ur>;<UR>;\
+	<ul>;<uL>;<UL>;<vr>;<vR>;<Vr>;<VR>;\
+	<vl>;<vL>;<VL>;<dh>;<DH>;\
+	<uh>;<uH>;<Uh>;<UH>;<vh>;<vH>;<VH>;\
+	<TB>;<LB>;<FB>;<lB>;<RB>;<.S>;<:S>;<?S>;<fS>;<DT>
diff -ruN -x obj -x CVS -x *~ src-orig/usr.bin/Makefile src/usr.bin/Makefile
--- src-orig/usr.bin/Makefile	Tue Mar 19 21:58:38 2013
+++ src/usr.bin/Makefile	Fri Mar 22 21:51:28 2013
@@ -4,7 +4,7 @@
 
 SUBDIR= apply apropos ar arch asa asn1_compile at aucat audioctl awk banner \
 	basename bc bdes bgplg \
-	biff cal calendar cap_mkdb cdio chpass cmp col colrm \
+	biff cal calendar cap_mkdb cdio chpass cmp col colldef colrm \
 	column comm compile_et compress cpp crontab csplit ctags cut \
 	dc deroff diff diff3 dirname du encrypt env expand false file \
 	file2c find fgen finger fmt fold from fsplit fstat ftp gencat getcap \
diff -ruN -x obj -x CVS -x *~ src-orig/usr.bin/colldef/Makefile src/usr.bin/colldef/Makefile
--- src-orig/usr.bin/colldef/Makefile	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/Makefile	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,14 @@
+# From FreeBSD
+
+
+PROG=	colldef
+SRCS=	parse.y scan.l 
+LFLAGS=	-8 -i -d
+CFLAGS+=-I. -I${.CURDIR} -I${.CURDIR}/../../lib/libc/locale
+CFLAGS+=-DCOLLATE_DEBUG -DYY_NO_UNPUT -DYY_NO_INPUT
+LDADD=	-ll
+DPADD=	${LIBL}
+
+WARNS?=	2
+
+.include <bsd.prog.mk>
diff -ruN -x obj -x CVS -x *~ src-orig/usr.bin/colldef/colldef.1 src/usr.bin/colldef/colldef.1
--- src-orig/usr.bin/colldef/colldef.1	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/colldef.1	Sat Mar 23 05:53:09 2013
@@ -0,0 +1,288 @@
+.\" Copyright (c) 1995 Alex Tatmanjants <alex@elvisti.kiev.ua>
+.\"		at Electronni Visti IA, Kiev, Ukraine.
+.\"			All rights reserved.
+.\"
+.\" Redistribution and use in source and binary forms, with or without
+.\" modification, are permitted provided that the following conditions
+.\" are met:
+.\" 1. Redistributions of source code must retain the above copyright
+.\"    notice, this list of conditions and the following disclaimer.
+.\" 2. Redistributions in binary form must reproduce the above copyright
+.\"    notice, this list of conditions and the following disclaimer in the
+.\"    documentation and/or other materials provided with the distribution.
+.\"
+.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
+.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
+.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+.\" SUCH DAMAGE.
+.\"
+.\" $FreeBSD$
+.\"
+.Dd March 23, 2013
+.Dt COLLDEF 1
+.Os
+.Sh NAME
+.Nm colldef
+.Nd convert collation sequence source definition
+.Sh SYNOPSIS
+.Nm
+.Op Fl I Ar map_dir
+.Op Fl o Ar out_file
+.Op Ar filename
+.Sh DESCRIPTION
+The
+.Nm
+utility converts a collation sequence source definition
+into a format usable by the
+.Fn strxfrm ,
+.Fn strcoll ,
+.Fn wcscoll
+and
+.Fn wcsxfrm
+functions.
+It is used to define the many ways in which
+strings can be ordered and collated.
+The
+.Fn strxfrm
+and
+.Fn wcsxfrm
+functions transform
+their second argument and place the result in its first
+argument.
+The transformed string is such that it can be
+correctly ordered with other transformed strings by using
+.Fn strcmp
+and
+.Fn wcscmp
+respectevily
+(as well as other function with similar purpose like
+.Fn strncmp ,
+.Fn wcsncmp
+or
+.Fn memcmp )
+The
+.Fn strcoll
+and
+.Fn wcscoll
+functions transform their arguments and do a comparison.
+.Pp
+The
+.Nm
+utility reads the collation sequence source definition
+from the standard input and stores the converted definition in filename.
+The output file produced contains the
+database with collating sequence information in a form
+usable by system commands and routines.
+.Pp
+The following options are available:
+.Bl -tag -width indent
+.It Fl I Ar map_dir
+Set directory name where
+.Ar charmap
+files can be found, current directory by default.
+.It Fl o Ar out_file
+Set output file name,
+.Ar LC_COLLATE
+by default.
+.El
+.Pp
+The collation sequence definition specifies a set of collating elements and
+the rules defining how strings containing these should be ordered.
+This is most useful for different language definitions.
+.Pp
+The specification file can consist of three statements:
+.Ar charmap ,
+.Ar substitute
+and
+.Ar order .
+.Pp
+Of these, only the
+.Ar order
+statement is required.
+When
+.Ar charmap
+or
+.Ar substitute
+is
+supplied, these statements must be ordered as above.
+Any
+statements after the order statement are ignored.
+.Pp
+Lines in the specification file beginning with a
+.Ql #
+are
+treated as comments and are ignored.
+Blank lines are also
+ignored.
+.Pp
+.Dl "charmap charmapfile"
+.Pp
+.Ar Charmap
+defines where a mapping of the character
+and collating element symbols to the actual
+character encoding can be found.
+.Pp
+The format of
+.Ar charmapfile
+is shown below.
+Symbol
+names are separated from their values by TAB or
+SPACE characters.
+Symbol-value can be specified in
+a hexadecimal (\ex\fI??\fR) or octal (\e\fI???\fR)
+representation, and can be only one character in length.
+.Bd -literal -offset indent
+symbol-name1 symbol-value1
+symbol-name2 symbol-value2
+\&...
+.Ed
+.Pp
+Symbol names cannot be specified in
+.Ar substitute
+fields.
+.Pp
+The
+.Ar charmap
+statement is optional.
+.Bd -literal -offset indent
+substitute "symbol" with "repl_string"
+.Ed
+.Pp
+The
+.Ar substitute
+statement substitutes the character
+.Ar symbol
+with the string
+.Ar repl_string .
+Symbol names cannot be specified in
+.Ar repl_string
+field.
+The
+.Ar substitute
+statement is optional.
+.Pp
+.Dl "order order_list"
+.Pp
+.Ar Order_list
+is a list of symbols, separated by semi colons, that defines the
+collating sequence.
+The
+special symbol
+.Ar ...
+specifies, in a short-hand
+form, symbols that are sequential in machine code
+order.
+.Pp
+An order list element
+can be represented in any one of the following
+ways:
+.Bl -bullet
+.It
+The symbol itself (for example,
+.Ar a
+for the lower-case letter
+.Ar a ) .
+.It
+The symbol in octal representation (for example,
+.Ar \e141
+for the letter
+.Ar a ) .
+.It
+The symbol in hexadecimal representation (for example,
+.Ar \ex61
+for the letter
+.Ar a ) .
+.It
+The symbol name as defined in the
+.Ar charmap
+file (for example,
+.Ar <letterA>
+for
+.Ar letterA \e023
+record in
+.Ar charmapfile ) .
+If character map name have
+.Ar >
+character, it must be escaped as
+.Ar /> ,
+single
+.Ar /
+must be escaped as
+.Ar // .
+.It
+Symbols
+.Ar \ea ,
+.Ar \eb ,
+.Ar \ef ,
+.Ar \en ,
+.Ar \er ,
+.Ar \ev
+are permitted in its usual C-language meaning.
+.It
+The symbol chain (for example:
+.Ar abc ,
+.Ar <letterA><letterB>c ,
+.Ar \exf1b\exf2 )
+.It
+The symbol range (for example,
+.Ar a;...;z ) .
+.It
+Comma-separated symbols, ranges and chains enclosed in parenthesis (for example
+.Ar \&(
+.Ar sym1 ,
+.Ar sym2 ,
+.Ar ...
+.Ar \&) )
+are assigned the
+same primary ordering but different secondary
+ordering.
+.It
+Comma-separated symbols, ranges and chains enclosed in curly brackets (for example
+.Ar \&{
+.Ar sym1 ,
+.Ar sym2 ,
+.Ar ...
+.Ar \&} )
+are assigned the same primary ordering only.
+.El
+.Pp
+The backslash character
+.Ar \e
+is used for continuation.
+In this case, no characters are permitted
+after the backslash character.
+.Sh FILES
+.Bl -tag -width indent
+.It Pa /usr/share/locale/ Ns Ao Ar language Ac Ns Pa /LC_COLLATE
+The standard shared location for collation orders
+under the locale
+.Aq Ar language .
+.El
+.Sh EXIT STATUS
+The
+.Nm
+utility exits with the following values:
+.Bl -tag -width indent
+.It Li 0
+No errors were found and the output was successfully created.
+.It Li !=0
+Errors were found.
+.El
+.Sh SEE ALSO
+.Xr mklocale 1 ,
+.Xr setlocale 3 ,
+.Xr strcoll 3 ,
+.Xr wcscoll 3 ,
+.Xr strxfrm 3 ,
+.Xr wcsxfrm 3
+.Sh HISTORY
+The
+.Nm
+utility first appeared in FreeBSD 2.0.5
diff -ruN -x obj -x CVS -x *~ src-orig/usr.bin/colldef/common.h src/usr.bin/colldef/common.h
--- src-orig/usr.bin/colldef/common.h	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/common.h	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,11 @@
+/*
+ * $FreeBSD$
+ */
+
+#define CHARMAP_SYMBOL_LEN 64
+#define BUFSIZE 80
+
+extern int line_no;
+
+extern u_char charmap_table[UCHAR_MAX + 1][CHARMAP_SYMBOL_LEN];
+extern char map_name[FILENAME_MAX];
diff -ruN -x obj -x CVS -x *~ src-orig/usr.bin/colldef/parse.c src/usr.bin/colldef/parse.c
--- src-orig/usr.bin/colldef/parse.c	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/parse.c	Sat Mar 30 09:10:26 2013
@@ -0,0 +1,937 @@
+#include <stdlib.h>
+#include <string.h>
+#define YYBYACC 1
+#define YYMAJOR 1
+#define YYMINOR 9
+#define YYLEX yylex()
+#define YYEMPTY -1
+#define yyclearin (yychar=(YYEMPTY))
+#define yyerrok (yyerrflag=0)
+#define YYRECOVERING() (yyerrflag!=0)
+#define YYPREFIX "yy"
+#line 2 "parse.y"
+/*-
+ * Copyright (c) 1995 Alex Tatmanjants <alex@elvisti.kiev.ua>
+ *		at Electronni Visti IA, Kiev, Ukraine.
+ *			All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <sys/cdefs.h>
+
+#include <sys/types.h>
+#include <arpa/inet.h>
+#include <err.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <sysexits.h>
+#include <syslog.h>
+#include "collate.h"
+#include "common.h"
+
+extern FILE *yyin;
+void yyerror(const char *, ...);
+int yyparse(void);
+int yylex(void);
+static void usage(void);
+static void collate_print_tables(void);
+
+char map_name[FILENAME_MAX] = ".";
+char curr_chain[COLLATE_MAX_STR_LEN];
+
+char __collate_version[COLLATE_MAX_STR_LEN];
+u_char charmap_table[UCHAR_MAX + 1][CHARMAP_SYMBOL_LEN];
+
+#undef __collate_substitute_table
+u_char __collate_substitute_table[UCHAR_MAX + 1][COLLATE_MAX_STR_LEN];
+#undef __collate_char_pri_table
+struct __collate_st_char_pri __collate_char_pri_table[UCHAR_MAX + 1];
+struct __collate_st_chain_pri *__collate_chain_pri_table;
+struct __collate_st_chain_pri *nc = NULL;
+
+int chain_index = 0;
+int prim_pri = 1, sec_pri = 1;
+#ifdef COLLATE_DEBUG
+int debug;
+#endif
+
+const char *out_file = "LC_COLLATE";
+#line 71 "parse.y"
+#ifndef YYSTYPE_DEFINED
+#define YYSTYPE_DEFINED
+typedef union {
+	u_char ch;
+	u_char str[BUFSIZE];
+} YYSTYPE;
+#endif /* YYSTYPE_DEFINED */
+#line 90 "y.tab.c"
+#define SUBSTITUTE 257
+#define WITH 258
+#define ORDER 259
+#define RANGE 260
+#define STRING 261
+#define DEFN 262
+#define CHAR 263
+#define YYERRCODE 256
+#if defined(__cplusplus) || defined(__STDC__)
+const short yylhs[] =
+#else
+short yylhs[] =
+#endif
+	{                                        -1,
+    0,    1,    1,    2,    2,    2,    2,    3,    4,    5,
+    6,    6,    8,    8,    7,    7,    7,    7,    7,    9,
+    9,   10,   10,   11,   11,   11,   12,   12,   12,
+};
+#if defined(__cplusplus) || defined(__STDC__)
+const short yylen[] =
+#else
+short yylen[] =
+#endif
+	{                                         2,
+    1,    1,    3,    0,    1,    1,    1,    2,    4,    2,
+    1,    3,    2,    2,    1,    1,    3,    3,    3,    1,
+    3,    1,    3,    1,    3,    1,    1,    3,    1,
+};
+#if defined(__cplusplus) || defined(__STDC__)
+const short yydefred[] =
+#else
+short yydefred[] =
+#endif
+	{                                      0,
+    0,    0,    0,    0,    0,    2,    5,    6,    7,    0,
+    0,    0,    0,    0,   11,    0,    8,    0,    0,    0,
+   13,    0,    0,    0,   20,    0,    0,    0,   22,    0,
+   14,    3,    9,   17,    0,   18,    0,    0,   19,    0,
+   12,   25,   21,   28,   23,
+};
+#if defined(__cplusplus) || defined(__STDC__)
+const short yydgoto[] =
+#else
+short yydgoto[] =
+#endif
+	{                                       4,
+    5,    6,    7,    8,    9,   14,   15,   16,   24,   28,
+   25,   29,
+};
+#if defined(__cplusplus) || defined(__STDC__)
+const short yysindex[] =
+#else
+short yysindex[] =
+#endif
+	{                                   -246,
+ -253,  -40, -248,    0,   18,    0,    0,    0,    0, -225,
+ -243, -228, -227,  -22,    0, -224,    0, -246, -223, -222,
+    0, -239, -224,  -43,    0, -238, -224,  -18,    0,  -40,
+    0,    0,    0,    0, -221,    0, -228, -220,    0, -227,
+    0,    0,    0,    0,    0,};
+#if defined(__cplusplus) || defined(__STDC__)
+const short yyrindex[] =
+#else
+short yyrindex[] =
+#endif
+	{                                      8,
+    0,    0,    0,    0,   40,    0,    0,    0,    0,    0,
+    2,    0,    0,    9,    0,    4,    0,    8,    0,    0,
+    0,  -41,  -39,    0,    0,  -14,  -12,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,};
+#if defined(__cplusplus) || defined(__STDC__)
+const short yygindex[] =
+#else
+short yygindex[] =
+#endif
+	{                                      0,
+    0,   26,    0,    0,    0,    0,   15,   -6,    0,    0,
+   10,    6,
+};
+#define YYTABLESIZE 223
+#if defined(__cplusplus) || defined(__STDC__)
+const short yytable[] =
+#else
+short yytable[] =
+#endif
+	{                                      13,
+   37,   15,   24,   16,   26,   23,   27,    4,   10,   10,
+    1,   15,    2,   16,   17,    3,   20,    4,   10,   21,
+   35,   38,   39,   21,   21,   40,   27,   18,   29,   27,
+   23,   29,   19,   27,   22,   26,   30,   33,   31,    1,
+   34,   42,   44,   32,   41,   45,   43,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+   15,    0,   16,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,   36,   12,   24,    0,   26,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,   11,
+};
+#if defined(__cplusplus) || defined(__STDC__)
+const short yycheck[] =
+#else
+short yycheck[] =
+#endif
+	{                                      40,
+   44,    0,   44,    0,   44,   12,   13,    0,    0,  263,
+  257,   10,  259,   10,  263,  262,  260,   10,   10,  263,
+  260,  260,   41,  263,  263,   44,   41,   10,   41,   44,
+   37,   44,  258,   40,  263,  263,   59,  261,  263,    0,
+  263,  263,  263,   18,   30,   40,   37,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   59,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,  125,  123,  125,   -1,  125,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,  263,
+};
+#define YYFINAL 4
+#ifndef YYDEBUG
+#define YYDEBUG 0
+#endif
+#define YYMAXTOKEN 263
+#if YYDEBUG
+#if defined(__cplusplus) || defined(__STDC__)
+const char * const yyname[] =
+#else
+char *yyname[] =
+#endif
+	{
+"end-of-file",0,0,0,0,0,0,0,0,0,"'\\n'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,"'('","')'",0,0,"','",0,0,0,0,0,0,0,0,0,0,0,0,0,0,"';'",0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'{'",0,"'}'",0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+"SUBSTITUTE","WITH","ORDER","RANGE","STRING","DEFN","CHAR",
+};
+#if defined(__cplusplus) || defined(__STDC__)
+const char * const yyrule[] =
+#else
+char *yyrule[] =
+#endif
+	{"$accept : collate",
+"collate : statment_list",
+"statment_list : statment",
+"statment_list : statment_list '\\n' statment",
+"statment :",
+"statment : charmap",
+"statment : substitute",
+"statment : order",
+"charmap : DEFN CHAR",
+"substitute : SUBSTITUTE CHAR WITH STRING",
+"order : ORDER order_list",
+"order_list : item",
+"order_list : order_list ';' item",
+"chain : CHAR CHAR",
+"chain : chain CHAR",
+"item : CHAR",
+"item : chain",
+"item : CHAR RANGE CHAR",
+"item : '{' prim_order_list '}'",
+"item : '(' sec_order_list ')'",
+"prim_order_list : prim_sub_item",
+"prim_order_list : prim_order_list ',' prim_sub_item",
+"sec_order_list : sec_sub_item",
+"sec_order_list : sec_order_list ',' sec_sub_item",
+"prim_sub_item : CHAR",
+"prim_sub_item : CHAR RANGE CHAR",
+"prim_sub_item : chain",
+"sec_sub_item : CHAR",
+"sec_sub_item : CHAR RANGE CHAR",
+"sec_sub_item : chain",
+};
+#endif
+#ifdef YYSTACKSIZE
+#undef YYMAXDEPTH
+#define YYMAXDEPTH YYSTACKSIZE
+#else
+#ifdef YYMAXDEPTH
+#define YYSTACKSIZE YYMAXDEPTH
+#else
+#define YYSTACKSIZE 10000
+#define YYMAXDEPTH 10000
+#endif
+#endif
+#define YYINITSTACKSIZE 200
+/* LINTUSED */
+int yydebug;
+int yynerrs;
+int yyerrflag;
+int yychar;
+short *yyssp;
+YYSTYPE *yyvsp;
+YYSTYPE yyval;
+YYSTYPE yylval;
+short *yyss;
+short *yysslim;
+YYSTYPE *yyvs;
+int yystacksize;
+#line 321 "parse.y"
+extern int yy_flex_debug;
+int
+main(int ac, char **av)
+{
+	int ch;
+	yy_flex_debug = 0;
+#ifdef COLLATE_DEBUG
+	while((ch = getopt(ac, av, ":do:I:")) != -1) {
+#else
+	while((ch = getopt(ac, av, ":o:I:")) != -1) {
+#endif
+		switch (ch)
+		{
+#ifdef COLLATE_DEBUG
+		  case 'd':
+			debug++;
+			yy_flex_debug = 1;
+			break;
+#endif
+		  case 'o':
+			out_file = optarg;
+			break;
+
+		  case 'I':
+			strlcpy(map_name, optarg, sizeof(map_name));
+			break;
+
+		  default:
+			usage();
+		}
+	}
+	ac -= optind;
+	av += optind;
+	if (ac > 0) {
+		if ((yyin = fopen(*av, "r")) == NULL)
+			err(EX_UNAVAILABLE, "can't open source file %s", *av);
+	}
+	for (ch = 0; ch <= UCHAR_MAX; ch++)
+		__collate_substitute_table[ch][0] = ch;
+	yyparse();
+	return 0;
+}
+
+static void
+usage(void)
+{
+	fprintf(stderr, "usage: colldef [-I map_dir] [-o out_file] [filename]\n");
+	exit(EX_USAGE);
+}
+
+void
+yyerror(const char *fmt, ...)
+{
+ 	va_list ap;
+	char msg[128];
+
+	va_start(ap, fmt);
+	vsnprintf(msg, sizeof(msg), fmt, ap);
+	va_end(ap);
+	errx(EX_UNAVAILABLE, "%s near line %d", msg, line_no);
+}
+
+#ifdef COLLATE_DEBUG
+static void
+collate_print_tables(void)
+{
+	int i;
+
+	printf("Substitute table:\n");
+	for (i = 0; i < UCHAR_MAX + 1; i++)
+	    if (i != *__collate_substitute_table[i])
+		printf("\t'%c' --> \"%s\"\n", i,
+		       __collate_substitute_table[i]);
+	printf("Chain priority table:\n");
+	for (i = 0; i < chain_index - 1; i++)
+		printf("\t\"%s\" : %d %d\n",
+		    __collate_chain_pri_table[i].str,
+		    __collate_chain_pri_table[i].prim,
+		    __collate_chain_pri_table[i].sec);
+	printf("Char priority table:\n");
+	for (i = 0; i < UCHAR_MAX + 1; i++)
+		printf("\t'%c' : %d %d\n", i, __collate_char_pri_table[i].prim,
+		       __collate_char_pri_table[i].sec);
+}
+#endif
+#line 349 "y.tab.c"
+/* allocate initial stack or double stack size, up to YYMAXDEPTH */
+#if defined(__cplusplus) || defined(__STDC__)
+static int yygrowstack(void)
+#else
+static int yygrowstack()
+#endif
+{
+    int newsize, i;
+    short *newss;
+    YYSTYPE *newvs;
+
+    if ((newsize = yystacksize) == 0)
+        newsize = YYINITSTACKSIZE;
+    else if (newsize >= YYMAXDEPTH)
+        return -1;
+    else if ((newsize *= 2) > YYMAXDEPTH)
+        newsize = YYMAXDEPTH;
+    i = yyssp - yyss;
+#ifdef SIZE_MAX
+#define YY_SIZE_MAX SIZE_MAX
+#else
+#define YY_SIZE_MAX 0xffffffffU
+#endif
+    if (newsize && YY_SIZE_MAX / newsize < sizeof *newss)
+        goto bail;
+    newss = yyss ? (short *)realloc(yyss, newsize * sizeof *newss) :
+      (short *)malloc(newsize * sizeof *newss); /* overflow check above */
+    if (newss == NULL)
+        goto bail;
+    yyss = newss;
+    yyssp = newss + i;
+    if (newsize && YY_SIZE_MAX / newsize < sizeof *newvs)
+        goto bail;
+    newvs = yyvs ? (YYSTYPE *)realloc(yyvs, newsize * sizeof *newvs) :
+      (YYSTYPE *)malloc(newsize * sizeof *newvs); /* overflow check above */
+    if (newvs == NULL)
+        goto bail;
+    yyvs = newvs;
+    yyvsp = newvs + i;
+    yystacksize = newsize;
+    yysslim = yyss + newsize - 1;
+    return 0;
+bail:
+    if (yyss)
+            free(yyss);
+    if (yyvs)
+            free(yyvs);
+    yyss = yyssp = NULL;
+    yyvs = yyvsp = NULL;
+    yystacksize = 0;
+    return -1;
+}
+
+#define YYABORT goto yyabort
+#define YYREJECT goto yyabort
+#define YYACCEPT goto yyaccept
+#define YYERROR goto yyerrlab
+int
+#if defined(__cplusplus) || defined(__STDC__)
+yyparse(void)
+#else
+yyparse()
+#endif
+{
+    int yym, yyn, yystate;
+#if YYDEBUG
+#if defined(__cplusplus) || defined(__STDC__)
+    const char *yys;
+#else /* !(defined(__cplusplus) || defined(__STDC__)) */
+    char *yys;
+#endif /* !(defined(__cplusplus) || defined(__STDC__)) */
+
+    if ((yys = getenv("YYDEBUG")))
+    {
+        yyn = *yys;
+        if (yyn >= '0' && yyn <= '9')
+            yydebug = yyn - '0';
+    }
+#endif /* YYDEBUG */
+
+    yynerrs = 0;
+    yyerrflag = 0;
+    yychar = (-1);
+
+    if (yyss == NULL && yygrowstack()) goto yyoverflow;
+    yyssp = yyss;
+    yyvsp = yyvs;
+    *yyssp = yystate = 0;
+
+yyloop:
+    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
+    if (yychar < 0)
+    {
+        if ((yychar = yylex()) < 0) yychar = 0;
+#if YYDEBUG
+        if (yydebug)
+        {
+            yys = 0;
+            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
+            if (!yys) yys = "illegal-symbol";
+            printf("%sdebug: state %d, reading %d (%s)\n",
+                    YYPREFIX, yystate, yychar, yys);
+        }
+#endif
+    }
+    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
+            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
+    {
+#if YYDEBUG
+        if (yydebug)
+            printf("%sdebug: state %d, shifting to state %d\n",
+                    YYPREFIX, yystate, yytable[yyn]);
+#endif
+        if (yyssp >= yysslim && yygrowstack())
+        {
+            goto yyoverflow;
+        }
+        *++yyssp = yystate = yytable[yyn];
+        *++yyvsp = yylval;
+        yychar = (-1);
+        if (yyerrflag > 0)  --yyerrflag;
+        goto yyloop;
+    }
+    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
+            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
+    {
+        yyn = yytable[yyn];
+        goto yyreduce;
+    }
+    if (yyerrflag) goto yyinrecovery;
+#if defined(lint) || defined(__GNUC__)
+    goto yynewerror;
+#endif
+yynewerror:
+    yyerror("syntax error");
+#if defined(lint) || defined(__GNUC__)
+    goto yyerrlab;
+#endif
+yyerrlab:
+    ++yynerrs;
+yyinrecovery:
+    if (yyerrflag < 3)
+    {
+        yyerrflag = 3;
+        for (;;)
+        {
+            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
+                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
+            {
+#if YYDEBUG
+                if (yydebug)
+                    printf("%sdebug: state %d, error recovery shifting\
+ to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
+#endif
+                if (yyssp >= yysslim && yygrowstack())
+                {
+                    goto yyoverflow;
+                }
+                *++yyssp = yystate = yytable[yyn];
+                *++yyvsp = yylval;
+                goto yyloop;
+            }
+            else
+            {
+#if YYDEBUG
+                if (yydebug)
+                    printf("%sdebug: error recovery discarding state %d\n",
+                            YYPREFIX, *yyssp);
+#endif
+                if (yyssp <= yyss) goto yyabort;
+                --yyssp;
+                --yyvsp;
+            }
+        }
+    }
+    else
+    {
+        if (yychar == 0) goto yyabort;
+#if YYDEBUG
+        if (yydebug)
+        {
+            yys = 0;
+            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
+            if (!yys) yys = "illegal-symbol";
+            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
+                    YYPREFIX, yystate, yychar, yys);
+        }
+#endif
+        yychar = (-1);
+        goto yyloop;
+    }
+yyreduce:
+#if YYDEBUG
+    if (yydebug)
+        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
+                YYPREFIX, yystate, yyn, yyrule[yyn]);
+#endif
+    yym = yylen[yyn];
+    if (yym)
+        yyval = yyvsp[1-yym];
+    else
+        memset(&yyval, 0, sizeof yyval);
+    switch (yyn)
+    {
+case 8:
+#line 90 "parse.y"
+{
+	if (strlen(yyvsp[-1].str) + 1 > CHARMAP_SYMBOL_LEN)
+		yyerror("Charmap symbol name '%s' is too long", yyvsp[-1].str);
+	strlcpy(charmap_table[yyvsp[0].ch], yyvsp[-1].str, CHARMAP_SYMBOL_LEN);
+}
+break;
+case 9:
+#line 96 "parse.y"
+{
+	if (yyvsp[-2].ch == '\0')
+		yyerror("NUL character can't be substituted");
+	if (strchr(yyvsp[0].str, yyvsp[-2].ch) != NULL)
+		yyerror("Char 0x%02x substitution is recursive", yyvsp[-2].ch);
+	if (strlen(yyvsp[0].str) + 1 > COLLATE_MAX_STR_LEN)
+		yyerror("Char 0x%02x substitution is too long", yyvsp[-2].ch);
+	strlcpy(__collate_substitute_table[yyvsp[-2].ch], yyvsp[0].str, COLLATE_MAX_STR_LEN);
+}
+break;
+case 10:
+#line 106 "parse.y"
+{
+	FILE *fp;
+	int ch, substed, ordered;
+	uint32_t u32;
+
+	for (ch = 0; ch < UCHAR_MAX + 1; ch++) {
+		substed = (__collate_substitute_table[ch][0] != ch);
+		ordered = !!__collate_char_pri_table[ch].prim;
+		if (!ordered && !substed)
+			yyerror("Char 0x%02x not found", ch);
+		if (substed && ordered)
+			yyerror("Char 0x%02x can't be ordered since substituted", ch);
+	}
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	chain_index++;
+
+#ifdef COLLATE_DEBUG
+	if (debug)
+		collate_print_tables();
+#endif
+	if ((fp = fopen(out_file, "w")) == NULL)
+		err(EX_UNAVAILABLE, "can't open destination file %s",
+		    out_file);
+
+	strlcpy(__collate_version, COLLATE_VERSION1_2, COLLATE_MAX_STR_LEN);
+	if (fwrite(__collate_version, sizeof(__collate_version), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting collate version to destination file %s",
+		    out_file);
+	u32 = htonl(chain_index);
+	if (fwrite(&u32, sizeof(u32), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting chains number to destination file %s",
+		    out_file);
+	if (fwrite(__collate_substitute_table,
+		   sizeof(__collate_substitute_table), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting substitute table to destination file %s",
+		    out_file);
+	for (ch = 0; ch < UCHAR_MAX + 1; ch++) {
+		__collate_char_pri_table[ch].prim =
+		    htonl(__collate_char_pri_table[ch].prim);
+		__collate_char_pri_table[ch].sec =
+		    htonl(__collate_char_pri_table[ch].sec);
+	}
+	if (fwrite(__collate_char_pri_table,
+		   sizeof(__collate_char_pri_table), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting char table to destination file %s",
+		    out_file);
+	for (ch = 0; ch < chain_index; ch++) {
+		__collate_chain_pri_table[ch].prim =
+		    htonl(__collate_chain_pri_table[ch].prim);
+		__collate_chain_pri_table[ch].sec =
+		    htonl(__collate_chain_pri_table[ch].sec);
+	}
+	if (fwrite(__collate_chain_pri_table,
+		   sizeof(*__collate_chain_pri_table), chain_index, fp) !=
+		   (size_t)chain_index)
+		err(EX_IOERR,
+		"IO error writting chain table to destination file %s",
+		    out_file);
+	if (fclose(fp) != 0)
+		err(EX_IOERR, "IO error closing destination file %s",
+		    out_file);
+	exit(EX_OK);
+}
+break;
+case 13:
+#line 185 "parse.y"
+{
+	curr_chain[0] = yyvsp[-1].ch;
+	curr_chain[1] = yyvsp[0].ch;
+	if (curr_chain[0] == '\0' || curr_chain[1] == '\0')
+		yyerror("\\0 can't be chained");
+	curr_chain[2] = '\0';
+}
+break;
+case 14:
+#line 192 "parse.y"
+{
+	static char tb[2];
+
+	tb[0] = yyvsp[0].ch;
+	if (tb[0] == '\0')
+		yyerror("\\0 can't be chained");
+	if (strlen(curr_chain) + 2 > COLLATE_MAX_STR_LEN)
+		yyerror("Chain '%s' grows too long", curr_chain);
+	(void)strlcat(curr_chain, tb, COLLATE_MAX_STR_LEN);
+}
+break;
+case 15:
+#line 203 "parse.y"
+{
+	if (__collate_char_pri_table[yyvsp[0].ch].prim)
+		yyerror("Char 0x%02x duplicated", yyvsp[0].ch);
+	__collate_char_pri_table[yyvsp[0].ch].prim = prim_pri++;
+}
+break;
+case 16:
+#line 208 "parse.y"
+{
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	(void)strlcpy(__collate_chain_pri_table[chain_index].str, curr_chain, 
+		COLLATE_MAX_STR_LEN);
+	__collate_chain_pri_table[chain_index].prim = prim_pri++;
+	chain_index++;
+}
+break;
+case 17:
+#line 223 "parse.y"
+{
+	u_int i;
+
+	if (yyvsp[0].ch <= yyvsp[-2].ch)
+		yyerror("Illegal range 0x%02x -- 0x%02x", yyvsp[-2].ch, yyvsp[0].ch);
+
+	for (i = yyvsp[-2].ch; i <= yyvsp[0].ch; i++) {
+		if (__collate_char_pri_table[(u_char)i].prim)
+			yyerror("Char 0x%02x duplicated", (u_char)i);
+		__collate_char_pri_table[(u_char)i].prim = prim_pri++;
+	}
+}
+break;
+case 18:
+#line 235 "parse.y"
+{
+	prim_pri++;
+}
+break;
+case 19:
+#line 238 "parse.y"
+{
+	prim_pri++;
+	sec_pri = 1;
+}
+break;
+case 24:
+#line 249 "parse.y"
+{
+	if (__collate_char_pri_table[yyvsp[0].ch].prim)
+		yyerror("Char 0x%02x duplicated", yyvsp[0].ch);
+	__collate_char_pri_table[yyvsp[0].ch].prim = prim_pri;
+}
+break;
+case 25:
+#line 254 "parse.y"
+{
+	u_int i;
+
+	if (yyvsp[0].ch <= yyvsp[-2].ch)
+		yyerror("Illegal range 0x%02x -- 0x%02x",
+			yyvsp[-2].ch, yyvsp[0].ch);
+
+	for (i = yyvsp[-2].ch; i <= yyvsp[0].ch; i++) {
+		if (__collate_char_pri_table[(u_char)i].prim)
+			yyerror("Char 0x%02x duplicated", (u_char)i);
+		__collate_char_pri_table[(u_char)i].prim = prim_pri;
+	}
+}
+break;
+case 26:
+#line 267 "parse.y"
+{
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	(void)strlcpy(__collate_chain_pri_table[chain_index].str, curr_chain,
+		COLLATE_MAX_STR_LEN);
+	__collate_chain_pri_table[chain_index].prim = prim_pri;
+	chain_index++;
+}
+break;
+case 27:
+#line 283 "parse.y"
+{
+	if (__collate_char_pri_table[yyvsp[0].ch].prim)
+		yyerror("Char 0x%02x duplicated", yyvsp[0].ch);
+	__collate_char_pri_table[yyvsp[0].ch].prim = prim_pri;
+	__collate_char_pri_table[yyvsp[0].ch].sec = sec_pri++;
+}
+break;
+case 28:
+#line 289 "parse.y"
+{
+	u_int i;
+
+	if (yyvsp[0].ch <= yyvsp[-2].ch)
+		yyerror("Illegal range 0x%02x -- 0x%02x",
+			yyvsp[-2].ch, yyvsp[0].ch);
+
+	for (i = yyvsp[-2].ch; i <= yyvsp[0].ch; i++) {
+		if (__collate_char_pri_table[(u_char)i].prim)
+			yyerror("Char 0x%02x duplicated", (u_char)i);
+		__collate_char_pri_table[(u_char)i].prim = prim_pri;
+		__collate_char_pri_table[(u_char)i].sec = sec_pri++;
+	}
+}
+break;
+case 29:
+#line 303 "parse.y"
+{
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	(void)strlcpy(__collate_chain_pri_table[chain_index].str, curr_chain,
+		COLLATE_MAX_STR_LEN);
+	__collate_chain_pri_table[chain_index].prim = prim_pri;
+	__collate_chain_pri_table[chain_index].sec = sec_pri++;
+	chain_index++;
+}
+break;
+#line 816 "y.tab.c"
+    }
+    yyssp -= yym;
+    yystate = *yyssp;
+    yyvsp -= yym;
+    yym = yylhs[yyn];
+    if (yystate == 0 && yym == 0)
+    {
+#if YYDEBUG
+        if (yydebug)
+            printf("%sdebug: after reduction, shifting from state 0 to\
+ state %d\n", YYPREFIX, YYFINAL);
+#endif
+        yystate = YYFINAL;
+        *++yyssp = YYFINAL;
+        *++yyvsp = yyval;
+        if (yychar < 0)
+        {
+            if ((yychar = yylex()) < 0) yychar = 0;
+#if YYDEBUG
+            if (yydebug)
+            {
+                yys = 0;
+                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
+                if (!yys) yys = "illegal-symbol";
+                printf("%sdebug: state %d, reading %d (%s)\n",
+                        YYPREFIX, YYFINAL, yychar, yys);
+            }
+#endif
+        }
+        if (yychar == 0) goto yyaccept;
+        goto yyloop;
+    }
+    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
+            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
+        yystate = yytable[yyn];
+    else
+        yystate = yydgoto[yym];
+#if YYDEBUG
+    if (yydebug)
+        printf("%sdebug: after reduction, shifting from state %d \
+to state %d\n", YYPREFIX, *yyssp, yystate);
+#endif
+    if (yyssp >= yysslim && yygrowstack())
+    {
+        goto yyoverflow;
+    }
+    *++yyssp = yystate;
+    *++yyvsp = yyval;
+    goto yyloop;
+yyoverflow:
+    yyerror("yacc stack overflow");
+yyabort:
+    if (yyss)
+            free(yyss);
+    if (yyvs)
+            free(yyvs);
+    yyss = yyssp = NULL;
+    yyvs = yyvsp = NULL;
+    yystacksize = 0;
+    return (1);
+yyaccept:
+    if (yyss)
+            free(yyss);
+    if (yyvs)
+            free(yyvs);
+    yyss = yyssp = NULL;
+    yyvs = yyvsp = NULL;
+    yystacksize = 0;
+    return (0);
+}
diff -ruN -x obj -x CVS -x *~ src-orig/usr.bin/colldef/parse.y src/usr.bin/colldef/parse.y
--- src-orig/usr.bin/colldef/parse.y	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/parse.y	Fri Mar 29 21:26:07 2013
@@ -0,0 +1,405 @@
+%{
+/*-
+ * Copyright (c) 1995 Alex Tatmanjants <alex@elvisti.kiev.ua>
+ *		at Electronni Visti IA, Kiev, Ukraine.
+ *			All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <sys/cdefs.h>
+
+#include <sys/types.h>
+#include <arpa/inet.h>
+#include <err.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <sysexits.h>
+#include <syslog.h>
+#include "collate.h"
+#include "common.h"
+
+extern FILE *yyin;
+void yyerror(const char *, ...);
+int yyparse(void);
+int yylex(void);
+static void usage(void);
+static void collate_print_tables(void);
+
+char map_name[FILENAME_MAX] = ".";
+char curr_chain[COLLATE_MAX_STR_LEN];
+
+char __collate_version[COLLATE_MAX_STR_LEN];
+u_char charmap_table[UCHAR_MAX + 1][CHARMAP_SYMBOL_LEN];
+
+#undef __collate_substitute_table
+u_char __collate_substitute_table[UCHAR_MAX + 1][COLLATE_MAX_STR_LEN];
+#undef __collate_char_pri_table
+struct __collate_st_char_pri __collate_char_pri_table[UCHAR_MAX + 1];
+struct __collate_st_chain_pri *__collate_chain_pri_table;
+struct __collate_st_chain_pri *nc = NULL;
+
+int chain_index = 0;
+int prim_pri = 1, sec_pri = 1;
+#ifdef COLLATE_DEBUG
+int debug;
+#endif
+
+const char *out_file = "LC_COLLATE";
+%}
+%union {
+	u_char ch;
+	u_char str[BUFSIZE];
+}
+%token SUBSTITUTE WITH ORDER RANGE
+%token <str> STRING
+%token <str> DEFN
+%token <ch> CHAR
+%%
+collate : statment_list
+;
+statment_list : statment
+	| statment_list '\n' statment
+;
+statment :
+	| charmap
+	| substitute
+	| order
+;
+charmap : DEFN CHAR {
+	if (strlen($1) + 1 > CHARMAP_SYMBOL_LEN)
+		yyerror("Charmap symbol name '%s' is too long", $1);
+	strlcpy(charmap_table[$2], $1, CHARMAP_SYMBOL_LEN);
+}
+;
+substitute : SUBSTITUTE CHAR WITH STRING {
+	if ($2 == '\0')
+		yyerror("NUL character can't be substituted");
+	if (strchr($4, $2) != NULL)
+		yyerror("Char 0x%02x substitution is recursive", $2);
+	if (strlen($4) + 1 > COLLATE_MAX_STR_LEN)
+		yyerror("Char 0x%02x substitution is too long", $2);
+	strlcpy(__collate_substitute_table[$2], $4, COLLATE_MAX_STR_LEN);
+}
+;
+order : ORDER order_list {
+	FILE *fp;
+	int ch, substed, ordered;
+	uint32_t u32;
+
+	for (ch = 0; ch < UCHAR_MAX + 1; ch++) {
+		substed = (__collate_substitute_table[ch][0] != ch);
+		ordered = !!__collate_char_pri_table[ch].prim;
+		if (!ordered && !substed)
+			yyerror("Char 0x%02x not found", ch);
+		if (substed && ordered)
+			yyerror("Char 0x%02x can't be ordered since substituted", ch);
+	}
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	chain_index++;
+
+#ifdef COLLATE_DEBUG
+	if (debug)
+		collate_print_tables();
+#endif
+	if ((fp = fopen(out_file, "w")) == NULL)
+		err(EX_UNAVAILABLE, "can't open destination file %s",
+		    out_file);
+
+	strlcpy(__collate_version, COLLATE_VERSION1_2, COLLATE_MAX_STR_LEN);
+	if (fwrite(__collate_version, sizeof(__collate_version), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting collate version to destination file %s",
+		    out_file);
+	u32 = htonl(chain_index);
+	if (fwrite(&u32, sizeof(u32), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting chains number to destination file %s",
+		    out_file);
+	if (fwrite(__collate_substitute_table,
+		   sizeof(__collate_substitute_table), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting substitute table to destination file %s",
+		    out_file);
+	for (ch = 0; ch < UCHAR_MAX + 1; ch++) {
+		__collate_char_pri_table[ch].prim =
+		    htonl(__collate_char_pri_table[ch].prim);
+		__collate_char_pri_table[ch].sec =
+		    htonl(__collate_char_pri_table[ch].sec);
+	}
+	if (fwrite(__collate_char_pri_table,
+		   sizeof(__collate_char_pri_table), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting char table to destination file %s",
+		    out_file);
+	for (ch = 0; ch < chain_index; ch++) {
+		__collate_chain_pri_table[ch].prim =
+		    htonl(__collate_chain_pri_table[ch].prim);
+		__collate_chain_pri_table[ch].sec =
+		    htonl(__collate_chain_pri_table[ch].sec);
+	}
+	if (fwrite(__collate_chain_pri_table,
+		   sizeof(*__collate_chain_pri_table), chain_index, fp) !=
+		   (size_t)chain_index)
+		err(EX_IOERR,
+		"IO error writting chain table to destination file %s",
+		    out_file);
+	if (fclose(fp) != 0)
+		err(EX_IOERR, "IO error closing destination file %s",
+		    out_file);
+	exit(EX_OK);
+}
+;
+order_list : item
+	| order_list ';' item
+;
+chain : CHAR CHAR {
+	curr_chain[0] = $1;
+	curr_chain[1] = $2;
+	if (curr_chain[0] == '\0' || curr_chain[1] == '\0')
+		yyerror("\\0 can't be chained");
+	curr_chain[2] = '\0';
+}
+	| chain CHAR {
+	static char tb[2];
+
+	tb[0] = $2;
+	if (tb[0] == '\0')
+		yyerror("\\0 can't be chained");
+	if (strlen(curr_chain) + 2 > COLLATE_MAX_STR_LEN)
+		yyerror("Chain '%s' grows too long", curr_chain);
+	(void)strlcat(curr_chain, tb, COLLATE_MAX_STR_LEN);
+}
+;
+item :  CHAR {
+	if (__collate_char_pri_table[$1].prim)
+		yyerror("Char 0x%02x duplicated", $1);
+	__collate_char_pri_table[$1].prim = prim_pri++;
+}
+	| chain {
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	(void)strlcpy(__collate_chain_pri_table[chain_index].str, curr_chain, 
+		COLLATE_MAX_STR_LEN);
+	__collate_chain_pri_table[chain_index].prim = prim_pri++;
+	chain_index++;
+}
+	| CHAR RANGE CHAR {
+	u_int i;
+
+	if ($3 <= $1)
+		yyerror("Illegal range 0x%02x -- 0x%02x", $1, $3);
+
+	for (i = $1; i <= $3; i++) {
+		if (__collate_char_pri_table[(u_char)i].prim)
+			yyerror("Char 0x%02x duplicated", (u_char)i);
+		__collate_char_pri_table[(u_char)i].prim = prim_pri++;
+	}
+}
+	| '{' prim_order_list '}' {
+	prim_pri++;
+}
+	| '(' sec_order_list ')' {
+	prim_pri++;
+	sec_pri = 1;
+}
+;
+prim_order_list : prim_sub_item
+	| prim_order_list ',' prim_sub_item 
+;
+sec_order_list : sec_sub_item
+	| sec_order_list ',' sec_sub_item 
+;
+prim_sub_item : CHAR {
+	if (__collate_char_pri_table[$1].prim)
+		yyerror("Char 0x%02x duplicated", $1);
+	__collate_char_pri_table[$1].prim = prim_pri;
+}
+	| CHAR RANGE CHAR {
+	u_int i;
+
+	if ($3 <= $1)
+		yyerror("Illegal range 0x%02x -- 0x%02x",
+			$1, $3);
+
+	for (i = $1; i <= $3; i++) {
+		if (__collate_char_pri_table[(u_char)i].prim)
+			yyerror("Char 0x%02x duplicated", (u_char)i);
+		__collate_char_pri_table[(u_char)i].prim = prim_pri;
+	}
+}
+	| chain {
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	(void)strlcpy(__collate_chain_pri_table[chain_index].str, curr_chain,
+		COLLATE_MAX_STR_LEN);
+	__collate_chain_pri_table[chain_index].prim = prim_pri;
+	chain_index++;
+}
+;
+sec_sub_item : CHAR {
+	if (__collate_char_pri_table[$1].prim)
+		yyerror("Char 0x%02x duplicated", $1);
+	__collate_char_pri_table[$1].prim = prim_pri;
+	__collate_char_pri_table[$1].sec = sec_pri++;
+}
+	| CHAR RANGE CHAR {
+	u_int i;
+
+	if ($3 <= $1)
+		yyerror("Illegal range 0x%02x -- 0x%02x",
+			$1, $3);
+
+	for (i = $1; i <= $3; i++) {
+		if (__collate_char_pri_table[(u_char)i].prim)
+			yyerror("Char 0x%02x duplicated", (u_char)i);
+		__collate_char_pri_table[(u_char)i].prim = prim_pri;
+		__collate_char_pri_table[(u_char)i].sec = sec_pri++;
+	}
+}
+	| chain {
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	(void)strlcpy(__collate_chain_pri_table[chain_index].str, curr_chain,
+		COLLATE_MAX_STR_LEN);
+	__collate_chain_pri_table[chain_index].prim = prim_pri;
+	__collate_chain_pri_table[chain_index].sec = sec_pri++;
+	chain_index++;
+}
+;
+%%
+extern int yy_flex_debug;
+int
+main(int ac, char **av)
+{
+	int ch;
+	yy_flex_debug = 0;
+#ifdef COLLATE_DEBUG
+	while((ch = getopt(ac, av, ":do:I:")) != -1) {
+#else
+	while((ch = getopt(ac, av, ":o:I:")) != -1) {
+#endif
+		switch (ch)
+		{
+#ifdef COLLATE_DEBUG
+		  case 'd':
+			debug++;
+			yy_flex_debug = 1;
+			break;
+#endif
+		  case 'o':
+			out_file = optarg;
+			break;
+
+		  case 'I':
+			strlcpy(map_name, optarg, sizeof(map_name));
+			break;
+
+		  default:
+			usage();
+		}
+	}
+	ac -= optind;
+	av += optind;
+	if (ac > 0) {
+		if ((yyin = fopen(*av, "r")) == NULL)
+			err(EX_UNAVAILABLE, "can't open source file %s", *av);
+	}
+	for (ch = 0; ch <= UCHAR_MAX; ch++)
+		__collate_substitute_table[ch][0] = ch;
+	yyparse();
+	return 0;
+}
+
+static void
+usage(void)
+{
+	fprintf(stderr, "usage: colldef [-I map_dir] [-o out_file] [filename]\n");
+	exit(EX_USAGE);
+}
+
+void
+yyerror(const char *fmt, ...)
+{
+ 	va_list ap;
+	char msg[128];
+
+	va_start(ap, fmt);
+	vsnprintf(msg, sizeof(msg), fmt, ap);
+	va_end(ap);
+	errx(EX_UNAVAILABLE, "%s near line %d", msg, line_no);
+}
+
+#ifdef COLLATE_DEBUG
+static void
+collate_print_tables(void)
+{
+	int i;
+
+	printf("Substitute table:\n");
+	for (i = 0; i < UCHAR_MAX + 1; i++)
+	    if (i != *__collate_substitute_table[i])
+		printf("\t'%c' --> \"%s\"\n", i,
+		       __collate_substitute_table[i]);
+	printf("Chain priority table:\n");
+	for (i = 0; i < chain_index - 1; i++)
+		printf("\t\"%s\" : %d %d\n",
+		    __collate_chain_pri_table[i].str,
+		    __collate_chain_pri_table[i].prim,
+		    __collate_chain_pri_table[i].sec);
+	printf("Char priority table:\n");
+	for (i = 0; i < UCHAR_MAX + 1; i++)
+		printf("\t'%c' : %d %d\n", i, __collate_char_pri_table[i].prim,
+		       __collate_char_pri_table[i].sec);
+}
+#endif
diff -ruN -x obj -x CVS -x *~ src-orig/usr.bin/colldef/scan.c src/usr.bin/colldef/scan.c
--- src-orig/usr.bin/colldef/scan.c	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/scan.c	Sat Mar 30 09:10:26 2013
@@ -0,0 +1,2131 @@
+/*	$OpenBSD: flex.skl,v 1.11 2010/08/04 18:24:50 millert Exp $	*/
+
+/* A lexical scanner generated by flex */
+
+/* Scanner skeleton version:
+ * $Header: /cvs/src/usr.bin/lex/flex.skl,v 1.11 2010/08/04 18:24:50 millert Exp $
+ */
+
+#define FLEX_SCANNER
+#define YY_FLEX_MAJOR_VERSION 2
+#define YY_FLEX_MINOR_VERSION 5
+
+#include <stdio.h>
+#include <errno.h>
+
+
+/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
+#ifdef c_plusplus
+#ifndef __cplusplus
+#define __cplusplus
+#endif
+#endif
+
+
+#ifdef __cplusplus
+
+#include <stdlib.h>
+#include <unistd.h>
+
+/* Use prototypes in function declarations. */
+#define YY_USE_PROTOS
+
+/* The "const" storage-class-modifier is valid. */
+#define YY_USE_CONST
+
+#else	/* ! __cplusplus */
+
+#ifdef __STDC__
+
+#define YY_USE_PROTOS
+#define YY_USE_CONST
+
+#endif	/* __STDC__ */
+#endif	/* ! __cplusplus */
+
+#ifdef __TURBOC__
+ #pragma warn -rch
+ #pragma warn -use
+#include <io.h>
+#include <stdlib.h>
+#define YY_USE_CONST
+#define YY_USE_PROTOS
+#endif
+
+#ifdef YY_USE_CONST
+#define yyconst const
+#else
+#define yyconst
+#endif
+
+
+#ifdef YY_USE_PROTOS
+#define YY_PROTO(proto) proto
+#else
+#define YY_PROTO(proto) ()
+#endif
+
+/* Returned upon end-of-file. */
+#define YY_NULL 0
+
+/* Promotes a possibly negative, possibly signed char to an unsigned
+ * integer for use as an array index.  If the signed char is negative,
+ * we want to instead treat it as an 8-bit unsigned char, hence the
+ * double cast.
+ */
+#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
+
+/* Enter a start condition.  This macro really ought to take a parameter,
+ * but we do it the disgusting crufty way forced on us by the ()-less
+ * definition of BEGIN.
+ */
+#define BEGIN yy_start = 1 + 2 *
+
+/* Translate the current start state into a value that can be later handed
+ * to BEGIN to return to the state.  The YYSTATE alias is for lex
+ * compatibility.
+ */
+#define YY_START ((yy_start - 1) / 2)
+#define YYSTATE YY_START
+
+/* Action number for EOF rule of a given start state. */
+#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
+
+/* Special action meaning "start processing a new file". */
+#define YY_NEW_FILE yyrestart( yyin )
+
+#define YY_END_OF_BUFFER_CHAR 0
+
+/* Size of default input buffer. */
+#define YY_BUF_SIZE 16384
+
+typedef struct yy_buffer_state *YY_BUFFER_STATE;
+
+extern int yyleng;
+extern FILE *yyin, *yyout;
+
+#define EOB_ACT_CONTINUE_SCAN 0
+#define EOB_ACT_END_OF_FILE 1
+#define EOB_ACT_LAST_MATCH 2
+
+/* The funky do-while in the following #define is used to turn the definition
+ * int a single C statement (which needs a semi-colon terminator).  This
+ * avoids problems with code like:
+ *
+ * 	if ( condition_holds )
+ *		yyless( 5 );
+ *	else
+ *		do_something_else();
+ *
+ * Prior to using the do-while the compiler would get upset at the
+ * "else" because it interpreted the "if" statement as being all
+ * done when it reached the ';' after the yyless() call.
+ */
+
+/* Return all but the first 'n' matched characters back to the input stream. */
+
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+		*yy_cp = yy_hold_char; \
+		YY_RESTORE_YY_MORE_OFFSET \
+		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
+		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
+		} \
+	while ( 0 )
+
+#define unput(c) yyunput( c, yytext_ptr )
+
+/* The following is because we cannot portably get our hands on size_t
+ * (without autoconf's help, which isn't available because we want
+ * flex-generated scanners to compile on their own).
+ */
+typedef unsigned int yy_size_t;
+
+
+struct yy_buffer_state
+	{
+	FILE *yy_input_file;
+
+	char *yy_ch_buf;		/* input buffer */
+	char *yy_buf_pos;		/* current position in input buffer */
+
+	/* Size of input buffer in bytes, not including room for EOB
+	 * characters.
+	 */
+	yy_size_t yy_buf_size;
+
+	/* Number of characters read into yy_ch_buf, not including EOB
+	 * characters.
+	 */
+	int yy_n_chars;
+
+	/* Whether we "own" the buffer - i.e., we know we created it,
+	 * and can realloc() it to grow it, and should free() it to
+	 * delete it.
+	 */
+	int yy_is_our_buffer;
+
+	/* Whether this is an "interactive" input source; if so, and
+	 * if we're using stdio for input, then we want to use getc()
+	 * instead of fread(), to make sure we stop fetching input after
+	 * each newline.
+	 */
+	int yy_is_interactive;
+
+	/* Whether we're considered to be at the beginning of a line.
+	 * If so, '^' rules will be active on the next match, otherwise
+	 * not.
+	 */
+	int yy_at_bol;
+
+	/* Whether to try to fill the input buffer when we reach the
+	 * end of it.
+	 */
+	int yy_fill_buffer;
+
+	int yy_buffer_status;
+#define YY_BUFFER_NEW 0
+#define YY_BUFFER_NORMAL 1
+	/* When an EOF's been seen but there's still some text to process
+	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
+	 * shouldn't try reading from the input source any more.  We might
+	 * still have a bunch of tokens to match, though, because of
+	 * possible backing-up.
+	 *
+	 * When we actually see the EOF, we change the status to "new"
+	 * (via yyrestart()), so that the user can continue scanning by
+	 * just pointing yyin at a new input file.
+	 */
+#define YY_BUFFER_EOF_PENDING 2
+	};
+
+static YY_BUFFER_STATE yy_current_buffer = 0;
+
+/* We provide macros for accessing buffer states in case in the
+ * future we want to put the buffer states in a more general
+ * "scanner state".
+ */
+#define YY_CURRENT_BUFFER yy_current_buffer
+
+
+/* yy_hold_char holds the character lost when yytext is formed. */
+static char yy_hold_char;
+
+static int yy_n_chars;		/* number of characters read into yy_ch_buf */
+
+
+int yyleng;
+
+/* Points to current character in buffer. */
+static char *yy_c_buf_p = (char *) 0;
+static int yy_init = 1;		/* whether we need to initialize */
+static int yy_start = 0;	/* start state number */
+
+/* Flag which is used to allow yywrap()'s to do buffer switches
+ * instead of setting up a fresh yyin.  A bit of a hack ...
+ */
+static int yy_did_buffer_switch_on_eof;
+
+void yyrestart YY_PROTO(( FILE *input_file ));
+
+void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
+void yy_load_buffer_state YY_PROTO(( void ));
+YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
+void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
+void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
+void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
+#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )
+
+YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
+YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
+YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));
+
+static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
+static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
+static void yy_flex_free YY_PROTO(( void * ));
+
+#define yy_new_buffer yy_create_buffer
+
+#define yy_set_interactive(is_interactive) \
+	{ \
+	if ( ! yy_current_buffer ) \
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
+	yy_current_buffer->yy_is_interactive = is_interactive; \
+	}
+
+#define yy_set_bol(at_bol) \
+	{ \
+	if ( ! yy_current_buffer ) \
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
+	yy_current_buffer->yy_at_bol = at_bol; \
+	}
+
+#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
+
+
+#define FLEX_DEBUG
+typedef unsigned char YY_CHAR;
+FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
+typedef int yy_state_type;
+
+#define FLEX_DEBUG
+extern char *yytext;
+#define yytext_ptr yytext
+
+static yy_state_type yy_get_previous_state YY_PROTO(( void ));
+static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
+static int yy_get_next_buffer YY_PROTO(( void ));
+static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
+
+/* Done after the current pattern has been matched and before the
+ * corresponding action - sets up yytext.
+ */
+#define YY_DO_BEFORE_ACTION \
+	yytext_ptr = yy_bp; \
+	yyleng = (int) (yy_cp - yy_bp); \
+	yy_hold_char = *yy_cp; \
+	*yy_cp = '\0'; \
+	yy_c_buf_p = yy_cp;
+
+#define YY_NUM_RULES 49
+#define YY_END_OF_BUFFER 50
+static yyconst short int yy_accept[116] =
+    {   0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,   50,   26,    1,   16,
+       17,   17,    4,   26,   26,   26,   26,    6,   26,   46,
+       42,   33,   46,   34,   34,   32,   47,    1,   48,   28,
+       34,   26,   49,    3,   26,   15,    2,    1,    0,    0,
+       25,    7,   25,   14,   10,   11,    9,   13,    8,   12,
+       25,    0,    0,    0,    0,    5,   45,   31,   45,   41,
+       36,   37,   39,   40,   35,   38,   45,   29,   30,   47,
+       28,    0,   27,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,   23,   24,    0,    0,    0,   44,
+
+       43,   19,    0,   22,    0,   20,    0,    0,    0,   21,
+        0,    0,    0,   18,    0
+    } ;
+
+static yyconst int yy_ec[256] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    2,    1,    4,    5,    1,    1,    1,    1,    6,
+        6,    1,    1,    6,    1,    7,    8,    9,    9,    9,
+        9,    9,    9,    9,    9,   10,   10,    1,   11,   12,
+        1,   13,    1,    1,   15,   16,   17,   18,   19,   20,
+        1,   21,   22,    1,    1,    1,   23,   24,   25,   26,
+        1,   27,   28,   29,   30,   31,   32,   33,    1,    1,
+        1,   14,    1,    1,    1,    1,   15,   16,   17,   18,
+
+       19,   20,    1,   21,   22,    1,    1,    1,   23,   24,
+       25,   26,    1,   27,   28,   29,   30,   31,   32,   33,
+        1,    1,    6,    1,    6,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1
+    } ;
+
+static yyconst int yy_meta[34] =
+    {   0,
+        1,    2,    3,    1,    1,    1,    1,    1,    4,    4,
+        1,    1,    1,    1,    4,    4,    4,    4,    4,    4,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1
+    } ;
+
+static yyconst short int yy_base[130] =
+    {   0,
+        0,   27,    1,    4,   13,   32,    7,   17,   20,   44,
+       34,   40,   54,   85,   56,   59,  114,  250,  111,  250,
+      250,   62,  250,  115,   91,   84,   80,  250,  106,  250,
+      250,  250,  145,  250,   57,  250,    0,  106,  250,  105,
+      103,  176,  250,  250,   83,  250,  250,  102,   65,   96,
+      250,  250,   93,  250,  250,  250,  250,  250,  250,  250,
+        0,   86,   82,   82,   93,  250,  250,  250,   86,  250,
+      250,  250,  250,  250,  250,  250,    0,  250,  250,    0,
+       92,   90,  250,   63,   84,   81,    0,   62,   66,   56,
+       74,    0,   60,   69,  250,  250,   56,   51,   48,  250,
+
+      250,  250,   71,  250,   61,  250,   53,   48,   24,  250,
+       21,   21,   15,  250,  250,  209,  213,  217,  221,  225,
+      229,  233,  237,  241,  245,   27,   23,   20,    9
+    } ;
+
+static yyconst short int yy_def[130] =
+    {   0,
+      116,  116,  117,  117,  118,  118,  119,  119,  118,  118,
+      116,  116,  116,  116,  120,  120,  115,  115,  115,  115,
+      115,  115,  115,  121,  115,  115,  115,  115,  122,  115,
+      115,  115,  123,  115,  115,  115,  124,  115,  115,  115,
+      125,  121,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      126,  115,  115,  115,  122,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  127,  115,  115,  124,
+      115,  125,  115,  115,  115,  115,  128,  115,  115,  115,
+      115,  129,  115,  115,  115,  115,  115,  115,  115,  115,
+
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,    0,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115
+    } ;
+
+static yyconst short int yy_nxt[284] =
+    {   0,
+      115,   19,   20,   31,   32,   21,   31,   32,   38,   39,
+       22,   23,  101,   24,   33,   31,   25,   33,   38,   39,
+       35,   40,   31,   96,   26,   36,   92,   27,   19,   28,
+       87,   29,   21,  114,   31,   19,   20,   22,   23,   35,
+       24,   19,   20,   25,   36,   40,   31,   42,   41,  113,
+      112,   26,  111,   42,   27,   19,   43,   38,   46,   47,
+       38,   46,   47,   49,   78,   44,   49,   42,   50,   79,
+      103,   50,  103,  110,  109,  108,  107,  106,  105,  104,
+      102,  104,  100,   99,   98,   45,   19,   43,   97,   95,
+       94,   93,   83,   81,   91,   66,   44,   90,   42,   89,
+
+       88,   86,   85,   48,   84,   83,   81,   48,   66,   64,
+       63,   62,   48,  115,  115,  115,   45,   52,  115,  115,
+      115,  115,  115,   53,  115,  115,  115,  115,  115,   54,
+       55,  115,  115,  115,   56,  115,  115,  115,   57,  115,
+      115,   58,  115,   59,  115,   60,  115,   61,   68,  115,
+      115,  115,  115,   69,  115,  115,  115,  115,  115,   70,
+       71,  115,  115,  115,   72,  115,  115,  115,   73,  115,
+      115,   74,  115,   75,  115,   76,  115,   77,  115,  115,
+      115,  115,  115,  115,   53,  115,  115,  115,  115,  115,
+       54,   55,  115,  115,  115,   56,  115,  115,  115,   57,
+
+      115,  115,   58,  115,   59,  115,   60,  115,   61,   18,
+       18,   18,   18,   30,   30,   30,   30,   34,   34,   34,
+       34,   37,   37,   37,   37,   43,   43,   43,   43,   51,
+       51,   51,   51,   65,   65,   65,   65,   67,   67,  115,
+       67,   80,  115,  115,   80,   82,   82,   82,   82,   17,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115
+    } ;
+
+static yyconst short int yy_chk[284] =
+    {   0,
+        0,    1,    1,    3,    3,    1,    4,    4,    7,    7,
+        1,    1,  129,    1,    3,    5,    1,    4,    8,    8,
+        5,    9,    9,  128,    1,    5,  127,    1,    2,    2,
+      126,    2,    2,  113,    6,   11,   11,    2,    2,    6,
+        2,   12,   12,    2,    6,   10,   10,   11,   10,  112,
+      111,    2,  109,   12,    2,   13,   13,   15,   15,   15,
+       16,   16,   16,   22,   35,   13,   49,   13,   22,   35,
+       94,   49,  103,  108,  107,  105,   99,   98,   97,   94,
+       93,  103,   91,   90,   89,   13,   14,   14,   88,   86,
+       85,   84,   82,   81,   69,   65,   14,   64,   14,   63,
+
+       62,   53,   50,   48,   45,   41,   40,   38,   29,   27,
+       26,   25,   19,   17,    0,    0,   14,   24,    0,    0,
+        0,    0,    0,   24,    0,    0,    0,    0,    0,   24,
+       24,    0,    0,    0,   24,    0,    0,    0,   24,    0,
+        0,   24,    0,   24,    0,   24,    0,   24,   33,    0,
+        0,    0,    0,   33,    0,    0,    0,    0,    0,   33,
+       33,    0,    0,    0,   33,    0,    0,    0,   33,    0,
+        0,   33,    0,   33,    0,   33,    0,   33,   42,    0,
+        0,    0,    0,    0,   42,    0,    0,    0,    0,    0,
+       42,   42,    0,    0,    0,   42,    0,    0,    0,   42,
+
+        0,    0,   42,    0,   42,    0,   42,    0,   42,  116,
+      116,  116,  116,  117,  117,  117,  117,  118,  118,  118,
+      118,  119,  119,  119,  119,  120,  120,  120,  120,  121,
+      121,  121,  121,  122,  122,  122,  122,  123,  123,    0,
+      123,  124,    0,    0,  124,  125,  125,  125,  125,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115
+    } ;
+
+static yy_state_type yy_last_accepting_state;
+static char *yy_last_accepting_cpos;
+
+extern int yy_flex_debug;
+int yy_flex_debug = 1;
+
+static yyconst short int yy_rule_linenum[49] =
+    {   0,
+       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
+       62,   63,   64,   65,   66,   71,   79,   80,   81,   82,
+       83,   84,   85,   92,   99,  100,  101,  102,  111,  117,
+      123,  129,  150,  156,  167,  173,  179,  185,  191,  197,
+      203,  209,  219,  225,  231,  237,  243,  257
+    } ;
+
+/* The intent behind this definition is that it'll catch
+ * any uses of REJECT which flex missed.
+ */
+#define REJECT reject_used_but_not_detected
+#define yymore() yymore_used_but_not_detected
+#define YY_MORE_ADJ 0
+#define YY_RESTORE_YY_MORE_OFFSET
+char *yytext;
+#line 1 "scan.l"
+#define INITIAL 0
+#define string 1
+#define name 2
+#define charmap 3
+#define defn 4
+#define nchar 5
+#define subs 6
+#define subs2 7
+
+#line 3 "scan.l"
+/*-
+ * Copyright (c) 1995 Alex Tatmanjants <alex@elvisti.kiev.ua>
+ *		at Electronni Visti IA, Kiev, Ukraine.
+ *			All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <sys/cdefs.h>
+
+#include <sys/types.h>
+#include <ctype.h>
+#include <err.h>
+#include <limits.h>
+#include <unistd.h>
+#include <string.h>
+#include <sysexits.h>
+#include "common.h"
+#include "y.tab.h"
+
+int line_no = 1, save_no, fromsubs;
+u_char buf[BUFSIZE], *ptr;
+FILE *map_fp;
+YY_BUFFER_STATE main_buf, map_buf;
+#ifdef FLEX_DEBUG
+YYSTYPE yylval;
+#endif /* FLEX_DEBUG */
+int yylex(void);
+#line 539 "lex.yy.c"
+
+/* Macros after this point can all be overridden by user definitions in
+ * section 1.
+ */
+
+#ifndef YY_SKIP_YYWRAP
+#ifdef __cplusplus
+extern "C" int yywrap YY_PROTO(( void ));
+#else
+extern int yywrap YY_PROTO(( void ));
+#endif
+#endif
+
+#ifndef YY_NO_UNPUT
+static void yyunput YY_PROTO(( int c, char *buf_ptr ));
+#endif
+
+#ifndef yytext_ptr
+static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
+#endif
+
+#ifdef YY_NEED_STRLEN
+static int yy_flex_strlen YY_PROTO(( yyconst char * ));
+#endif
+
+#ifndef YY_NO_INPUT
+#ifdef __cplusplus
+static int yyinput YY_PROTO(( void ));
+#else
+static int input YY_PROTO(( void ));
+#endif
+#endif
+
+#if defined(YY_STACK_USED) && YY_STACK_USED
+static int yy_start_stack_ptr = 0;
+static int yy_start_stack_depth = 0;
+static int *yy_start_stack = 0;
+#ifndef YY_NO_PUSH_STATE
+static void yy_push_state YY_PROTO(( int new_state ));
+#endif
+#ifndef YY_NO_POP_STATE
+static void yy_pop_state YY_PROTO(( void ));
+#endif
+#ifndef YY_NO_TOP_STATE
+static int yy_top_state YY_PROTO(( void ));
+#endif
+
+#else
+#define YY_NO_PUSH_STATE 1
+#define YY_NO_POP_STATE 1
+#define YY_NO_TOP_STATE 1
+#endif
+
+#ifdef YY_MALLOC_DECL
+YY_MALLOC_DECL
+#else
+#ifdef __STDC__
+#ifndef __cplusplus
+#include <stdlib.h>
+#endif
+#else
+/* Just try to get by without declaring the routines.  This will fail
+ * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
+ * or sizeof(void*) != sizeof(int).
+ */
+#endif
+#endif
+
+/* Amount of stuff to slurp up with each read. */
+#ifndef YY_READ_BUF_SIZE
+#define YY_READ_BUF_SIZE 8192
+#endif
+
+/* Copy whatever the last rule matched to the standard output. */
+
+#ifndef ECHO
+/* This used to be an fputs(), but since the string might contain NUL's,
+ * we now use fwrite().
+ */
+#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
+#endif
+
+/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
+ * is returned in "result".
+ */
+#ifndef YY_INPUT
+#define YY_INPUT(buf,result,max_size) \
+	if ( yy_current_buffer->yy_is_interactive ) \
+		{ \
+		int c = '*', n; \
+		for ( n = 0; n < max_size && \
+			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
+			buf[n] = (char) c; \
+		if ( c == '\n' ) \
+			buf[n++] = (char) c; \
+		if ( c == EOF && ferror( yyin ) ) \
+			YY_FATAL_ERROR( "input in flex scanner failed" ); \
+		result = n; \
+		} \
+	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
+		  && ferror( yyin ) ) \
+		YY_FATAL_ERROR( "input in flex scanner failed" );
+#endif
+
+/* No semi-colon after return; correct usage is to write "yyterminate();" -
+ * we don't want an extra ';' after the "return" because that will cause
+ * some compilers to complain about unreachable statements.
+ */
+#ifndef yyterminate
+#define yyterminate() return YY_NULL
+#endif
+
+/* Number of entries by which start-condition stack grows. */
+#ifndef YY_START_STACK_INCR
+#define YY_START_STACK_INCR 25
+#endif
+
+/* Report a fatal error. */
+#ifndef YY_FATAL_ERROR
+#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
+#endif
+
+/* Default declaration of generated scanner - a define so the user can
+ * easily add parameters.
+ */
+#ifndef YY_DECL
+#define YY_DECL int yylex YY_PROTO(( void ))
+#endif
+
+/* Code executed at the beginning of each rule, after yytext and yyleng
+ * have been set up.
+ */
+#ifndef YY_USER_ACTION
+#define YY_USER_ACTION
+#endif
+
+/* Code executed at the end of each rule. */
+#ifndef YY_BREAK
+#define YY_BREAK break;
+#endif
+
+#define YY_RULE_SETUP \
+	if ( yyleng > 0 ) \
+		yy_current_buffer->yy_at_bol = \
+				(yytext[yyleng - 1] == '\n'); \
+	YY_USER_ACTION
+
+YY_DECL
+	{
+	register yy_state_type yy_current_state;
+	register char *yy_cp, *yy_bp;
+	register int yy_act;
+
+#line 51 "scan.l"
+
+#line 695 "lex.yy.c"
+
+	if ( yy_init )
+		{
+		yy_init = 0;
+
+#ifdef YY_USER_INIT
+		YY_USER_INIT;
+#endif
+
+		if ( ! yy_start )
+			yy_start = 1;	/* first start state */
+
+		if ( ! yyin )
+			yyin = stdin;
+
+		if ( ! yyout )
+			yyout = stdout;
+
+		if ( ! yy_current_buffer )
+			yy_current_buffer =
+				yy_create_buffer( yyin, YY_BUF_SIZE );
+
+		yy_load_buffer_state();
+		}
+
+	while ( 1 )		/* loops until end-of-file is reached */
+		{
+		yy_cp = yy_c_buf_p;
+
+		/* Support of yytext. */
+		*yy_cp = yy_hold_char;
+
+		/* yy_bp points to the position in yy_ch_buf of the start of
+		 * the current run.
+		 */
+		yy_bp = yy_cp;
+
+		yy_current_state = yy_start;
+		yy_current_state += YY_AT_BOL();
+yy_match:
+		do
+			{
+			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
+			if ( yy_accept[yy_current_state] )
+				{
+				yy_last_accepting_state = yy_current_state;
+				yy_last_accepting_cpos = yy_cp;
+				}
+			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+				{
+				yy_current_state = (int) yy_def[yy_current_state];
+				if ( yy_current_state >= 116 )
+					yy_c = yy_meta[(unsigned int) yy_c];
+				}
+			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+			++yy_cp;
+			}
+		while ( yy_base[yy_current_state] != 250 );
+
+yy_find_action:
+		yy_act = yy_accept[yy_current_state];
+		if ( yy_act == 0 )
+			{ /* have to back up */
+			yy_cp = yy_last_accepting_cpos;
+			yy_current_state = yy_last_accepting_state;
+			yy_act = yy_accept[yy_current_state];
+			}
+
+		YY_DO_BEFORE_ACTION;
+
+
+do_action:	/* This label is used only to access EOF actions. */
+
+		if ( yy_flex_debug )
+			{
+			if ( yy_act == 0 )
+				fprintf( stderr, "--scanner backing up\n" );
+			else if ( yy_act < 49 )
+				fprintf( stderr, "--accepting rule at line %d (\"%s\")\n",
+				         yy_rule_linenum[yy_act], yytext );
+			else if ( yy_act == 49 )
+				fprintf( stderr, "--accepting default rule (\"%s\")\n",
+				         yytext );
+			else if ( yy_act == 50 )
+				fprintf( stderr, "--(end of buffer or a NUL)\n" );
+			else
+				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
+			}
+
+		switch ( yy_act )
+	{ /* beginning of action switch */
+			case 0: /* must back up */
+			/* undo the effects of YY_DO_BEFORE_ACTION */
+			*yy_cp = yy_hold_char;
+			yy_cp = yy_last_accepting_cpos;
+			yy_current_state = yy_last_accepting_state;
+			goto yy_find_action;
+
+case 1:
+YY_RULE_SETUP
+#line 52 "scan.l"
+;
+	YY_BREAK
+case 2:
+YY_RULE_SETUP
+#line 53 "scan.l"
+{ ptr = buf; BEGIN(string); }
+	YY_BREAK
+case 3:
+YY_RULE_SETUP
+#line 54 "scan.l"
+{ ptr = buf; fromsubs = 1; BEGIN(name); }
+	YY_BREAK
+case 4:
+YY_RULE_SETUP
+#line 55 "scan.l"
+{ ptr = buf; fromsubs = 0; BEGIN(name); }
+	YY_BREAK
+case 5:
+YY_RULE_SETUP
+#line 56 "scan.l"
+line_no++;
+	YY_BREAK
+case 6:
+YY_RULE_SETUP
+#line 57 "scan.l"
+line_no++;
+	YY_BREAK
+case 7:
+YY_RULE_SETUP
+#line 58 "scan.l"
+line_no++;
+	YY_BREAK
+case 8:
+YY_RULE_SETUP
+#line 59 "scan.l"
+{ yylval.ch = '\t'; return CHAR; }
+	YY_BREAK
+case 9:
+YY_RULE_SETUP
+#line 60 "scan.l"
+{ yylval.ch = '\n'; return CHAR; }
+	YY_BREAK
+case 10:
+YY_RULE_SETUP
+#line 61 "scan.l"
+{ yylval.ch = '\b'; return CHAR; }
+	YY_BREAK
+case 11:
+YY_RULE_SETUP
+#line 62 "scan.l"
+{ yylval.ch = '\f'; return CHAR; }
+	YY_BREAK
+case 12:
+YY_RULE_SETUP
+#line 63 "scan.l"
+{ yylval.ch = '\v'; return CHAR; }
+	YY_BREAK
+case 13:
+YY_RULE_SETUP
+#line 64 "scan.l"
+{ yylval.ch = '\r'; return CHAR; }
+	YY_BREAK
+case 14:
+YY_RULE_SETUP
+#line 65 "scan.l"
+{ yylval.ch = '\a'; return CHAR; }
+	YY_BREAK
+case 15:
+YY_RULE_SETUP
+#line 66 "scan.l"
+{
+	line_no++;
+	BEGIN(INITIAL);
+	return '\n';
+}
+	YY_BREAK
+case 16:
+YY_RULE_SETUP
+#line 71 "scan.l"
+{
+	line_no++;
+	if (map_fp != NULL) {
+		ptr = buf;
+		BEGIN(defn);
+	}
+	return '\n';
+}
+	YY_BREAK
+case 17:
+YY_RULE_SETUP
+#line 79 "scan.l"
+return *yytext;
+	YY_BREAK
+case 18:
+YY_RULE_SETUP
+#line 80 "scan.l"
+{ BEGIN(subs); return SUBSTITUTE; }
+	YY_BREAK
+case 19:
+YY_RULE_SETUP
+#line 81 "scan.l"
+{ BEGIN(subs2); return WITH; }
+	YY_BREAK
+case 20:
+YY_RULE_SETUP
+#line 82 "scan.l"
+return ORDER;
+	YY_BREAK
+case 21:
+YY_RULE_SETUP
+#line 83 "scan.l"
+BEGIN(charmap);
+	YY_BREAK
+case 22:
+YY_RULE_SETUP
+#line 84 "scan.l"
+return RANGE;
+	YY_BREAK
+case 23:
+YY_RULE_SETUP
+#line 85 "scan.l"
+{
+	u_int v;
+
+	sscanf(&yytext[1], "%o", &v);
+	yylval.ch = (u_char)v;
+	return CHAR;
+}
+	YY_BREAK
+case 24:
+YY_RULE_SETUP
+#line 92 "scan.l"
+{
+	u_int v;
+
+	sscanf(&yytext[2], "%x", &v);
+	yylval.ch = (u_char)v;
+	return CHAR;
+}
+	YY_BREAK
+case 25:
+YY_RULE_SETUP
+#line 99 "scan.l"
+{ yylval.ch = yytext[1]; return CHAR; }
+	YY_BREAK
+case 26:
+YY_RULE_SETUP
+#line 100 "scan.l"
+{ yylval.ch = *yytext; return CHAR; }
+	YY_BREAK
+case 27:
+YY_RULE_SETUP
+#line 101 "scan.l"
+line_no++;
+	YY_BREAK
+case 28:
+YY_RULE_SETUP
+#line 102 "scan.l"
+{
+	if (ptr == buf)
+		errx(EX_UNAVAILABLE, "map expected near line %u of %s",
+		     line_no, map_name);
+	*ptr = '\0';
+	strlcpy(yylval.str, buf, BUFSIZE);
+	BEGIN(nchar);
+	return DEFN;
+}
+	YY_BREAK
+case 29:
+YY_RULE_SETUP
+#line 111 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "name buffer overflow near line %u, character '/'",
+		     line_no);
+	*ptr++ = '/';
+}
+	YY_BREAK
+case 30:
+YY_RULE_SETUP
+#line 117 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "name buffer overflow near line %u, character '>'",
+		     line_no);
+	*ptr++ = '>';
+}
+	YY_BREAK
+case 31:
+YY_RULE_SETUP
+#line 123 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\"'",
+		     line_no);
+	*ptr++ = '"';
+}
+	YY_BREAK
+case 32:
+YY_RULE_SETUP
+#line 129 "scan.l"
+{
+	u_int i;
+
+	if (ptr == buf)
+		errx(EX_UNAVAILABLE, "non-empty name expected near line %u",
+		     line_no);
+	*ptr = '\0';
+	for (i = 0; i <= UCHAR_MAX; i++) {
+		if (strcmp(charmap_table[i], buf) == 0)
+			goto findit;
+	}
+	errx(EX_UNAVAILABLE, "name <%s> not 'charmap'-defined near line %u",
+		buf, line_no);
+ findit:
+	yylval.ch = i;
+	if (fromsubs)
+		BEGIN(subs);
+	else
+		BEGIN(INITIAL);
+	return CHAR;
+}
+	YY_BREAK
+case 33:
+YY_RULE_SETUP
+#line 150 "scan.l"
+{
+	*ptr = '\0';
+	strlcpy(yylval.str, buf, BUFSIZE);
+	BEGIN(subs2);
+	return STRING;
+}
+	YY_BREAK
+case 34:
+YY_RULE_SETUP
+#line 156 "scan.l"
+{
+	const char *s = (map_fp != NULL) ? map_name : "input";
+
+	if (!isascii(*yytext) || !isprint(*yytext))
+		errx(EX_UNAVAILABLE, "non-ASCII or non-printable character 0x%02x not allowed in the map/name near line %u of %s",
+		     *yytext, line_no, s);
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "map/name buffer overflow near line %u of %s, character '%c'",
+		     line_no, s, *yytext);
+	*ptr++ = *yytext;
+}
+	YY_BREAK
+case 35:
+YY_RULE_SETUP
+#line 167 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\t'",
+		     line_no);
+	*ptr++ = '\t';
+}
+	YY_BREAK
+case 36:
+YY_RULE_SETUP
+#line 173 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\b'",
+		     line_no);
+	*ptr++ = '\b';
+}
+	YY_BREAK
+case 37:
+YY_RULE_SETUP
+#line 179 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\f'",
+		     line_no);
+	*ptr++ = '\f';
+}
+	YY_BREAK
+case 38:
+YY_RULE_SETUP
+#line 185 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\v'",
+		     line_no);
+	*ptr++ = '\v';
+}
+	YY_BREAK
+case 39:
+YY_RULE_SETUP
+#line 191 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\n'",
+		     line_no);
+	*ptr++ = '\n';
+}
+	YY_BREAK
+case 40:
+YY_RULE_SETUP
+#line 197 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\r'",
+		     line_no);
+	*ptr++ = '\r';
+}
+	YY_BREAK
+case 41:
+YY_RULE_SETUP
+#line 203 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\a'",
+		     line_no);
+	*ptr++ = '\a';
+}
+	YY_BREAK
+case 42:
+YY_RULE_SETUP
+#line 209 "scan.l"
+{
+	const char *s = (map_fp != NULL) ? map_name : "input";
+
+	errx(EX_UNAVAILABLE, "unterminated map/name/string near line %u of %s", line_no, s);
+}
+	YY_BREAK
+case YY_STATE_EOF(name):
+case YY_STATE_EOF(string):
+case YY_STATE_EOF(nchar):
+#line 214 "scan.l"
+{
+	const char *s = (map_fp != NULL) ? map_name : "input";
+
+	errx(EX_UNAVAILABLE, "premature EOF in the name/string/char near line %u of %s", line_no, s);
+}
+	YY_BREAK
+case 43:
+YY_RULE_SETUP
+#line 219 "scan.l"
+{
+	u_int v;
+
+	sscanf(&yytext[2], "%x", &v);
+	*ptr++ = (u_char)v;
+}
+	YY_BREAK
+case 44:
+YY_RULE_SETUP
+#line 225 "scan.l"
+{
+	u_int v;
+
+	sscanf(&yytext[1], "%o", &v);
+	*ptr++ = (u_char)v;
+}
+	YY_BREAK
+case 45:
+YY_RULE_SETUP
+#line 231 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '%c'",
+		     line_no, yytext[1]);
+	*ptr++ = yytext[1];
+}
+	YY_BREAK
+case 46:
+YY_RULE_SETUP
+#line 237 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '%c'",
+		     line_no, *yytext);
+	*ptr++ = *yytext;
+}
+	YY_BREAK
+case 47:
+YY_RULE_SETUP
+#line 243 "scan.l"
+{
+	strlcat(map_name, "/", FILENAME_MAX);
+	strlcat(map_name, yytext, FILENAME_MAX);
+	if((map_fp = fopen(map_name, "r")) == NULL)
+		err(EX_UNAVAILABLE, "can't open 'charmap' file %s",
+		    map_name);
+	save_no = line_no;
+	line_no = 1;
+	map_buf = yy_new_buffer(map_fp, YY_BUF_SIZE);
+	main_buf = YY_CURRENT_BUFFER;
+	yy_switch_to_buffer(map_buf);
+	ptr = buf;
+	BEGIN(defn);
+}
+	YY_BREAK
+case 48:
+YY_RULE_SETUP
+#line 257 "scan.l"
+{
+	errx(EX_UNAVAILABLE, "'charmap' file name expected near line %u",
+	     line_no);
+}
+	YY_BREAK
+case YY_STATE_EOF(charmap):
+#line 261 "scan.l"
+{
+	errx(EX_UNAVAILABLE, "'charmap' file name expected near line %u",
+	     line_no);
+}
+	YY_BREAK
+case YY_STATE_EOF(INITIAL):
+case YY_STATE_EOF(defn):
+#line 265 "scan.l"
+{
+	if(map_fp != NULL) {
+		if (ptr != buf)
+			errx(EX_UNAVAILABLE, "premature EOF in the map near line %u of %s", line_no, map_name);
+		yy_switch_to_buffer(main_buf);
+		yy_delete_buffer(map_buf);
+		fclose(map_fp);
+		map_fp = NULL;
+		line_no = save_no;
+		BEGIN(INITIAL);
+	} else
+		yyterminate();
+}
+	YY_BREAK
+case 49:
+YY_RULE_SETUP
+#line 278 "scan.l"
+ECHO;
+	YY_BREAK
+#line 1229 "lex.yy.c"
+case YY_STATE_EOF(subs):
+case YY_STATE_EOF(subs2):
+	yyterminate();
+
+	case YY_END_OF_BUFFER:
+		{
+		/* Amount of text matched not including the EOB char. */
+		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
+
+		/* Undo the effects of YY_DO_BEFORE_ACTION. */
+		*yy_cp = yy_hold_char;
+		YY_RESTORE_YY_MORE_OFFSET
+
+		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
+			{
+			/* We're scanning a new file or input source.  It's
+			 * possible that this happened because the user
+			 * just pointed yyin at a new source and called
+			 * yylex().  If so, then we have to assure
+			 * consistency between yy_current_buffer and our
+			 * globals.  Here is the right place to do so, because
+			 * this is the first action (other than possibly a
+			 * back-up) that will match for the new input source.
+			 */
+			yy_n_chars = yy_current_buffer->yy_n_chars;
+			yy_current_buffer->yy_input_file = yyin;
+			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
+			}
+
+		/* Note that here we test for yy_c_buf_p "<=" to the position
+		 * of the first EOB in the buffer, since yy_c_buf_p will
+		 * already have been incremented past the NUL character
+		 * (since all states make transitions on EOB to the
+		 * end-of-buffer state).  Contrast this with the test
+		 * in input().
+		 */
+		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
+			{ /* This was really a NUL. */
+			yy_state_type yy_next_state;
+
+			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
+
+			yy_current_state = yy_get_previous_state();
+
+			/* Okay, we're now positioned to make the NUL
+			 * transition.  We couldn't have
+			 * yy_get_previous_state() go ahead and do it
+			 * for us because it doesn't know how to deal
+			 * with the possibility of jamming (and we don't
+			 * want to build jamming into it because then it
+			 * will run more slowly).
+			 */
+
+			yy_next_state = yy_try_NUL_trans( yy_current_state );
+
+			yy_bp = yytext_ptr + YY_MORE_ADJ;
+
+			if ( yy_next_state )
+				{
+				/* Consume the NUL. */
+				yy_cp = ++yy_c_buf_p;
+				yy_current_state = yy_next_state;
+				goto yy_match;
+				}
+
+			else
+				{
+				yy_cp = yy_c_buf_p;
+				goto yy_find_action;
+				}
+			}
+
+		else switch ( yy_get_next_buffer() )
+			{
+			case EOB_ACT_END_OF_FILE:
+				{
+				yy_did_buffer_switch_on_eof = 0;
+
+				if ( yywrap() )
+					{
+					/* Note: because we've taken care in
+					 * yy_get_next_buffer() to have set up
+					 * yytext, we can now set up
+					 * yy_c_buf_p so that if some total
+					 * hoser (like flex itself) wants to
+					 * call the scanner after we return the
+					 * YY_NULL, it'll still work - another
+					 * YY_NULL will get returned.
+					 */
+					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
+
+					yy_act = YY_STATE_EOF(YY_START);
+					goto do_action;
+					}
+
+				else
+					{
+					if ( ! yy_did_buffer_switch_on_eof )
+						YY_NEW_FILE;
+					}
+				break;
+				}
+
+			case EOB_ACT_CONTINUE_SCAN:
+				yy_c_buf_p =
+					yytext_ptr + yy_amount_of_matched_text;
+
+				yy_current_state = yy_get_previous_state();
+
+				yy_cp = yy_c_buf_p;
+				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				goto yy_match;
+
+			case EOB_ACT_LAST_MATCH:
+				yy_c_buf_p =
+				&yy_current_buffer->yy_ch_buf[yy_n_chars];
+
+				yy_current_state = yy_get_previous_state();
+
+				yy_cp = yy_c_buf_p;
+				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				goto yy_find_action;
+			}
+		break;
+		}
+
+	default:
+		YY_FATAL_ERROR(
+			"fatal flex scanner internal error--no action found" );
+	} /* end of action switch */
+		} /* end of scanning one token */
+	} /* end of yylex */
+
+
+/* yy_get_next_buffer - try to read in a new buffer
+ *
+ * Returns a code representing an action:
+ *	EOB_ACT_LAST_MATCH -
+ *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
+ *	EOB_ACT_END_OF_FILE - end of file
+ */
+
+static int yy_get_next_buffer()
+	{
+	register char *dest = yy_current_buffer->yy_ch_buf;
+	register char *source = yytext_ptr;
+	register int number_to_move, i;
+	int ret_val;
+
+	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
+		YY_FATAL_ERROR(
+		"fatal flex scanner internal error--end of buffer missed" );
+
+	if ( yy_current_buffer->yy_fill_buffer == 0 )
+		{ /* Don't try to fill the buffer, so this is an EOF. */
+		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
+			{
+			/* We matched a single character, the EOB, so
+			 * treat this as a final EOF.
+			 */
+			return EOB_ACT_END_OF_FILE;
+			}
+
+		else
+			{
+			/* We matched some text prior to the EOB, first
+			 * process it.
+			 */
+			return EOB_ACT_LAST_MATCH;
+			}
+		}
+
+	/* Try to read more data. */
+
+	/* First move last chars to start of buffer. */
+	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
+
+	for ( i = 0; i < number_to_move; ++i )
+		*(dest++) = *(source++);
+
+	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
+		/* don't do the read, it's not guaranteed to return an EOF,
+		 * just force an EOF
+		 */
+		yy_current_buffer->yy_n_chars = yy_n_chars = 0;
+
+	else
+		{
+		int num_to_read =
+			yy_current_buffer->yy_buf_size - number_to_move - 1;
+
+		while ( num_to_read <= 0 )
+			{ /* Not enough room in the buffer - grow it. */
+#ifdef YY_USES_REJECT
+			YY_FATAL_ERROR(
+"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
+#else
+
+			/* just a shorter name for the current buffer */
+			YY_BUFFER_STATE b = yy_current_buffer;
+
+			int yy_c_buf_p_offset =
+				(int) (yy_c_buf_p - b->yy_ch_buf);
+
+			if ( b->yy_is_our_buffer )
+				{
+				int new_size = b->yy_buf_size * 2;
+
+				if ( new_size <= 0 )
+					b->yy_buf_size += b->yy_buf_size / 8;
+				else
+					b->yy_buf_size *= 2;
+
+				b->yy_ch_buf = (char *)
+					/* Include room in for 2 EOB chars. */
+					yy_flex_realloc( (void *) b->yy_ch_buf,
+							 b->yy_buf_size + 2 );
+				}
+			else
+				/* Can't grow it, we don't own it. */
+				b->yy_ch_buf = 0;
+
+			if ( ! b->yy_ch_buf )
+				YY_FATAL_ERROR(
+				"fatal error - scanner input buffer overflow" );
+
+			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
+
+			num_to_read = yy_current_buffer->yy_buf_size -
+						number_to_move - 1;
+#endif
+			}
+
+		if ( num_to_read > YY_READ_BUF_SIZE )
+			num_to_read = YY_READ_BUF_SIZE;
+
+		/* Read in more data. */
+		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
+			yy_n_chars, num_to_read );
+
+		yy_current_buffer->yy_n_chars = yy_n_chars;
+		}
+
+	if ( yy_n_chars == 0 )
+		{
+		if ( number_to_move == YY_MORE_ADJ )
+			{
+			ret_val = EOB_ACT_END_OF_FILE;
+			yyrestart( yyin );
+			}
+
+		else
+			{
+			ret_val = EOB_ACT_LAST_MATCH;
+			yy_current_buffer->yy_buffer_status =
+				YY_BUFFER_EOF_PENDING;
+			}
+		}
+
+	else
+		ret_val = EOB_ACT_CONTINUE_SCAN;
+
+	yy_n_chars += number_to_move;
+	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
+	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
+
+	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
+
+	return ret_val;
+	}
+
+
+/* yy_get_previous_state - get the state just before the EOB char was reached */
+
+static yy_state_type yy_get_previous_state()
+	{
+	register yy_state_type yy_current_state;
+	register char *yy_cp;
+
+	yy_current_state = yy_start;
+	yy_current_state += YY_AT_BOL();
+
+	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
+		{
+		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
+		if ( yy_accept[yy_current_state] )
+			{
+			yy_last_accepting_state = yy_current_state;
+			yy_last_accepting_cpos = yy_cp;
+			}
+		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+			{
+			yy_current_state = (int) yy_def[yy_current_state];
+			if ( yy_current_state >= 116 )
+				yy_c = yy_meta[(unsigned int) yy_c];
+			}
+		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+		}
+
+	return yy_current_state;
+	}
+
+
+/* yy_try_NUL_trans - try to make a transition on the NUL character
+ *
+ * synopsis
+ *	next_state = yy_try_NUL_trans( current_state );
+ */
+
+#ifdef YY_USE_PROTOS
+static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
+#else
+static yy_state_type yy_try_NUL_trans( yy_current_state )
+yy_state_type yy_current_state;
+#endif
+	{
+	register int yy_is_jam;
+	register char *yy_cp = yy_c_buf_p;
+
+	register YY_CHAR yy_c = 1;
+	if ( yy_accept[yy_current_state] )
+		{
+		yy_last_accepting_state = yy_current_state;
+		yy_last_accepting_cpos = yy_cp;
+		}
+	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+		{
+		yy_current_state = (int) yy_def[yy_current_state];
+		if ( yy_current_state >= 116 )
+			yy_c = yy_meta[(unsigned int) yy_c];
+		}
+	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+	yy_is_jam = (yy_current_state == 115);
+
+	return yy_is_jam ? 0 : yy_current_state;
+	}
+
+
+#ifndef YY_NO_UNPUT
+#ifdef YY_USE_PROTOS
+static void yyunput( int c, register char *yy_bp )
+#else
+static void yyunput( c, yy_bp )
+int c;
+register char *yy_bp;
+#endif
+	{
+	register char *yy_cp = yy_c_buf_p;
+
+	/* undo effects of setting up yytext */
+	*yy_cp = yy_hold_char;
+
+	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
+		{ /* need to shift things up to make room */
+		/* +2 for EOB chars. */
+		register int number_to_move = yy_n_chars + 2;
+		register char *dest = &yy_current_buffer->yy_ch_buf[
+					yy_current_buffer->yy_buf_size + 2];
+		register char *source =
+				&yy_current_buffer->yy_ch_buf[number_to_move];
+
+		while ( source > yy_current_buffer->yy_ch_buf )
+			*--dest = *--source;
+
+		yy_cp += (int) (dest - source);
+		yy_bp += (int) (dest - source);
+		yy_current_buffer->yy_n_chars =
+			yy_n_chars = yy_current_buffer->yy_buf_size;
+
+		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
+			YY_FATAL_ERROR( "flex scanner push-back overflow" );
+		}
+
+	*--yy_cp = (char) c;
+
+
+	yytext_ptr = yy_bp;
+	yy_hold_char = *yy_cp;
+	yy_c_buf_p = yy_cp;
+	}
+#endif	/* ifndef YY_NO_UNPUT */
+
+
+#ifndef YY_NO_INPUT
+#ifdef __cplusplus
+static int yyinput()
+#else
+static int input()
+#endif
+	{
+	int c;
+
+	*yy_c_buf_p = yy_hold_char;
+
+	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
+		{
+		/* yy_c_buf_p now points to the character we want to return.
+		 * If this occurs *before* the EOB characters, then it's a
+		 * valid NUL; if not, then we've hit the end of the buffer.
+		 */
+		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
+			/* This was really a NUL. */
+			*yy_c_buf_p = '\0';
+
+		else
+			{ /* need more input */
+			int offset = yy_c_buf_p - yytext_ptr;
+			++yy_c_buf_p;
+
+			switch ( yy_get_next_buffer() )
+				{
+				case EOB_ACT_LAST_MATCH:
+					/* This happens because yy_g_n_b()
+					 * sees that we've accumulated a
+					 * token and flags that we need to
+					 * try matching the token before
+					 * proceeding.  But for input(),
+					 * there's no matching to consider.
+					 * So convert the EOB_ACT_LAST_MATCH
+					 * to EOB_ACT_END_OF_FILE.
+					 */
+
+					/* Reset buffer status. */
+					yyrestart( yyin );
+
+					/* fall through */
+
+				case EOB_ACT_END_OF_FILE:
+					{
+					if ( yywrap() )
+						return EOF;
+
+					if ( ! yy_did_buffer_switch_on_eof )
+						YY_NEW_FILE;
+#ifdef __cplusplus
+					return yyinput();
+#else
+					return input();
+#endif
+					}
+
+				case EOB_ACT_CONTINUE_SCAN:
+					yy_c_buf_p = yytext_ptr + offset;
+					break;
+				}
+			}
+		}
+
+	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
+	*yy_c_buf_p = '\0';	/* preserve yytext */
+	yy_hold_char = *++yy_c_buf_p;
+
+	yy_current_buffer->yy_at_bol = (c == '\n');
+
+	return c;
+	}
+#endif	/* ifndef YY_NO_INPUT */
+
+
+#ifdef YY_USE_PROTOS
+void yyrestart( FILE *input_file )
+#else
+void yyrestart( input_file )
+FILE *input_file;
+#endif
+	{
+	if ( ! yy_current_buffer )
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );
+
+	yy_init_buffer( yy_current_buffer, input_file );
+	yy_load_buffer_state();
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
+#else
+void yy_switch_to_buffer( new_buffer )
+YY_BUFFER_STATE new_buffer;
+#endif
+	{
+	if ( yy_current_buffer == new_buffer )
+		return;
+
+	if ( yy_current_buffer )
+		{
+		/* Flush out information for old buffer. */
+		*yy_c_buf_p = yy_hold_char;
+		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
+		yy_current_buffer->yy_n_chars = yy_n_chars;
+		}
+
+	yy_current_buffer = new_buffer;
+	yy_load_buffer_state();
+
+	/* We don't actually know whether we did this switch during
+	 * EOF (yywrap()) processing, but the only time this flag
+	 * is looked at is after yywrap() is called, so it's safe
+	 * to go ahead and always set it.
+	 */
+	yy_did_buffer_switch_on_eof = 1;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_load_buffer_state( void )
+#else
+void yy_load_buffer_state()
+#endif
+	{
+	yy_n_chars = yy_current_buffer->yy_n_chars;
+	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
+	yyin = yy_current_buffer->yy_input_file;
+	yy_hold_char = *yy_c_buf_p;
+	}
+
+
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
+#else
+YY_BUFFER_STATE yy_create_buffer( file, size )
+FILE *file;
+int size;
+#endif
+	{
+	YY_BUFFER_STATE b;
+
+	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_buf_size = size;
+
+	/* yy_ch_buf has to be 2 characters longer than the size given because
+	 * we need to put in 2 end-of-buffer characters.
+	 */
+	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
+	if ( ! b->yy_ch_buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_is_our_buffer = 1;
+
+	yy_init_buffer( b, file );
+
+	return b;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_delete_buffer( YY_BUFFER_STATE b )
+#else
+void yy_delete_buffer( b )
+YY_BUFFER_STATE b;
+#endif
+	{
+	if ( ! b )
+		return;
+
+	if ( b == yy_current_buffer )
+		yy_current_buffer = (YY_BUFFER_STATE) 0;
+
+	if ( b->yy_is_our_buffer )
+		yy_flex_free( (void *) b->yy_ch_buf );
+
+	yy_flex_free( (void *) b );
+	}
+
+
+#ifndef YY_ALWAYS_INTERACTIVE
+#ifndef YY_NEVER_INTERACTIVE
+#include <unistd.h>
+#endif
+#endif
+
+#ifdef YY_USE_PROTOS
+void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
+#else
+void yy_init_buffer( b, file )
+YY_BUFFER_STATE b;
+FILE *file;
+#endif
+
+
+	{
+	int oerrno = errno;
+
+	yy_flush_buffer( b );
+
+	b->yy_input_file = file;
+	b->yy_fill_buffer = 1;
+
+#if defined(YY_ALWAYS_INTERACTIVE) && YY_ALWAYS_INTERACTIVE
+	b->yy_is_interactive = 1;
+#else
+#if defined(YY_NEVER_INTERACTIVE) && YY_NEVER_INTERACTIVE
+	b->yy_is_interactive = 0;
+#else
+	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
+#endif
+#endif
+	errno = oerrno;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_flush_buffer( YY_BUFFER_STATE b )
+#else
+void yy_flush_buffer( b )
+YY_BUFFER_STATE b;
+#endif
+
+	{
+	if ( ! b )
+		return;
+
+	b->yy_n_chars = 0;
+
+	/* We always need two end-of-buffer characters.  The first causes
+	 * a transition to the end-of-buffer state.  The second causes
+	 * a jam in that state.
+	 */
+	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
+	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
+
+	b->yy_buf_pos = &b->yy_ch_buf[0];
+
+	b->yy_at_bol = 1;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	if ( b == yy_current_buffer )
+		yy_load_buffer_state();
+	}
+
+
+#ifndef YY_NO_SCAN_BUFFER
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
+#else
+YY_BUFFER_STATE yy_scan_buffer( base, size )
+char *base;
+yy_size_t size;
+#endif
+	{
+	YY_BUFFER_STATE b;
+
+	if ( size < 2 ||
+	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
+	     base[size-1] != YY_END_OF_BUFFER_CHAR )
+		/* They forgot to leave room for the EOB's. */
+		return 0;
+
+	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
+
+	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
+	b->yy_buf_pos = b->yy_ch_buf = base;
+	b->yy_is_our_buffer = 0;
+	b->yy_input_file = 0;
+	b->yy_n_chars = b->yy_buf_size;
+	b->yy_is_interactive = 0;
+	b->yy_at_bol = 1;
+	b->yy_fill_buffer = 0;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	yy_switch_to_buffer( b );
+
+	return b;
+	}
+#endif
+
+
+#ifndef YY_NO_SCAN_STRING
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
+#else
+YY_BUFFER_STATE yy_scan_string( yy_str )
+yyconst char *yy_str;
+#endif
+	{
+	int len;
+	for ( len = 0; yy_str[len]; ++len )
+		;
+
+	return yy_scan_bytes( yy_str, len );
+	}
+#endif
+
+
+#ifndef YY_NO_SCAN_BYTES
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
+#else
+YY_BUFFER_STATE yy_scan_bytes( bytes, len )
+yyconst char *bytes;
+int len;
+#endif
+	{
+	YY_BUFFER_STATE b;
+	char *buf;
+	yy_size_t n;
+	int i;
+
+	/* Get memory for full buffer, including space for trailing EOB's. */
+	n = len + 2;
+	buf = (char *) yy_flex_alloc( n );
+	if ( ! buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
+
+	for ( i = 0; i < len; ++i )
+		buf[i] = bytes[i];
+
+	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;
+
+	b = yy_scan_buffer( buf, n );
+	if ( ! b )
+		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
+
+	/* It's okay to grow etc. this buffer, and we should throw it
+	 * away when we're done.
+	 */
+	b->yy_is_our_buffer = 1;
+
+	return b;
+	}
+#endif
+
+
+#ifndef YY_NO_PUSH_STATE
+#ifdef YY_USE_PROTOS
+static void yy_push_state( int new_state )
+#else
+static void yy_push_state( new_state )
+int new_state;
+#endif
+	{
+	if ( yy_start_stack_ptr >= yy_start_stack_depth )
+		{
+		yy_size_t new_size;
+
+		yy_start_stack_depth += YY_START_STACK_INCR;
+		new_size = yy_start_stack_depth * sizeof( int );
+
+		if ( ! yy_start_stack )
+			yy_start_stack = (int *) yy_flex_alloc( new_size );
+
+		else
+			yy_start_stack = (int *) yy_flex_realloc(
+					(void *) yy_start_stack, new_size );
+
+		if ( ! yy_start_stack )
+			YY_FATAL_ERROR(
+			"out of memory expanding start-condition stack" );
+		}
+
+	yy_start_stack[yy_start_stack_ptr++] = YY_START;
+
+	BEGIN(new_state);
+	}
+#endif
+
+
+#ifndef YY_NO_POP_STATE
+static void yy_pop_state()
+	{
+	if ( --yy_start_stack_ptr < 0 )
+		YY_FATAL_ERROR( "start-condition stack underflow" );
+
+	BEGIN(yy_start_stack[yy_start_stack_ptr]);
+	}
+#endif
+
+
+#ifndef YY_NO_TOP_STATE
+static int yy_top_state()
+	{
+	return yy_start_stack[yy_start_stack_ptr - 1];
+	}
+#endif
+
+#ifndef YY_EXIT_FAILURE
+#define YY_EXIT_FAILURE 2
+#endif
+
+#ifdef YY_USE_PROTOS
+static void yy_fatal_error( yyconst char msg[] )
+#else
+static void yy_fatal_error( msg )
+char msg[];
+#endif
+	{
+	(void) fprintf( stderr, "%s\n", msg );
+	exit( YY_EXIT_FAILURE );
+	}
+
+
+
+/* Redefine yyless() so it works in section 3 code. */
+
+#undef yyless
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+		yytext[yyleng] = yy_hold_char; \
+		yy_c_buf_p = yytext + n; \
+		yy_hold_char = *yy_c_buf_p; \
+		*yy_c_buf_p = '\0'; \
+		yyleng = n; \
+		} \
+	while ( 0 )
+
+
+/* Internal utility routines. */
+
+#ifndef yytext_ptr
+#ifdef YY_USE_PROTOS
+static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
+#else
+static void yy_flex_strncpy( s1, s2, n )
+char *s1;
+yyconst char *s2;
+int n;
+#endif
+	{
+	register int i;
+	for ( i = 0; i < n; ++i )
+		s1[i] = s2[i];
+	}
+#endif
+
+#ifdef YY_NEED_STRLEN
+#ifdef YY_USE_PROTOS
+static int yy_flex_strlen( yyconst char *s )
+#else
+static int yy_flex_strlen( s )
+yyconst char *s;
+#endif
+	{
+	register int n;
+	for ( n = 0; s[n]; ++n )
+		;
+
+	return n;
+	}
+#endif
+
+
+#ifdef YY_USE_PROTOS
+static void *yy_flex_alloc( yy_size_t size )
+#else
+static void *yy_flex_alloc( size )
+yy_size_t size;
+#endif
+	{
+	return (void *) malloc( size );
+	}
+
+#ifdef YY_USE_PROTOS
+static void *yy_flex_realloc( void *ptr, yy_size_t size )
+#else
+static void *yy_flex_realloc( ptr, size )
+void *ptr;
+yy_size_t size;
+#endif
+	{
+	/* The cast to (char *) in the following accommodates both
+	 * implementations that use char* generic pointers, and those
+	 * that use void* generic pointers.  It works with the latter
+	 * because both ANSI C and C++ allow castless assignment from
+	 * any pointer type to void*, and deal with argument conversions
+	 * as though doing an assignment.
+	 */
+	return (void *) realloc( (char *) ptr, size );
+	}
+
+#ifdef YY_USE_PROTOS
+static void yy_flex_free( void *ptr )
+#else
+static void yy_flex_free( ptr )
+void *ptr;
+#endif
+	{
+	free( ptr );
+	}
+
+#if defined(YY_MAIN) && YY_MAIN
+int main()
+	{
+	yylex();
+	return 0;
+	}
+#endif
+#line 278 "scan.l"
+
+#ifdef FLEX_DEBUG
+/*main()
+{
+	while(yylex())
+		;
+	return 0;
+}*/
+#endif /* FLEX_DEBUG */
diff -ruN -x obj -x CVS -x *~ src-orig/usr.bin/colldef/scan.l src/usr.bin/colldef/scan.l
--- src-orig/usr.bin/colldef/scan.l	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/scan.l	Fri Mar 22 21:51:28 2013
@@ -0,0 +1,286 @@
+%x string name charmap defn nchar subs subs2
+%{
+/*-
+ * Copyright (c) 1995 Alex Tatmanjants <alex@elvisti.kiev.ua>
+ *		at Electronni Visti IA, Kiev, Ukraine.
+ *			All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <sys/cdefs.h>
+
+#include <sys/types.h>
+#include <ctype.h>
+#include <err.h>
+#include <limits.h>
+#include <unistd.h>
+#include <string.h>
+#include <sysexits.h>
+#include "common.h"
+#include "y.tab.h"
+
+int line_no = 1, save_no, fromsubs;
+u_char buf[BUFSIZE], *ptr;
+FILE *map_fp;
+YY_BUFFER_STATE main_buf, map_buf;
+#ifdef FLEX_DEBUG
+YYSTYPE yylval;
+#endif /* FLEX_DEBUG */
+int yylex(void);
+%}
+%%
+<INITIAL,charmap,nchar,subs,subs2>[ \t]+      ;
+<subs2>\"               { ptr = buf; BEGIN(string); }
+<subs>\<                { ptr = buf; fromsubs = 1; BEGIN(name); }
+<INITIAL>\<             { ptr = buf; fromsubs = 0; BEGIN(name); }
+^#.*\n			line_no++;
+^\n			line_no++;
+<INITIAL>\\\n           line_no++;
+<INITIAL,nchar,subs>\\t      { yylval.ch = '\t'; return CHAR; }
+<INITIAL,nchar,subs>\\n      { yylval.ch = '\n'; return CHAR; }
+<INITIAL,nchar,subs>\\b      { yylval.ch = '\b'; return CHAR; }
+<INITIAL,nchar,subs>\\f      { yylval.ch = '\f'; return CHAR; }
+<INITIAL,nchar,subs>\\v      { yylval.ch = '\v'; return CHAR; }
+<INITIAL,nchar,subs>\\r      { yylval.ch = '\r'; return CHAR; }
+<INITIAL,nchar,subs>\\a      { yylval.ch = '\a'; return CHAR; }
+<subs2>\n               {
+	line_no++;
+	BEGIN(INITIAL);
+	return '\n';
+}
+<INITIAL,nchar>\n       {
+	line_no++;
+	if (map_fp != NULL) {
+		ptr = buf;
+		BEGIN(defn);
+	}
+	return '\n';
+}
+<INITIAL>[;,{}()]       return *yytext;
+<INITIAL>substitute     { BEGIN(subs); return SUBSTITUTE; }
+<subs>with              { BEGIN(subs2); return WITH; }
+<INITIAL>order          return ORDER;
+<INITIAL>charmap        BEGIN(charmap);
+<INITIAL>;[ \t]*\.\.\.[ \t]*;   return RANGE;
+<INITIAL,nchar,subs>\\[0-7]{3}       {
+	u_int v;
+
+	sscanf(&yytext[1], "%o", &v);
+	yylval.ch = (u_char)v;
+	return CHAR;
+}
+<INITIAL,nchar,subs>\\x[0-9a-fA-F]{2}   {
+	u_int v;
+
+	sscanf(&yytext[2], "%x", &v);
+	yylval.ch = (u_char)v;
+	return CHAR;
+}
+<INITIAL,nchar,subs>\\. { yylval.ch = yytext[1]; return CHAR; }
+<INITIAL,nchar,subs>.   { yylval.ch = *yytext; return CHAR; }
+<defn>^#.*\n            line_no++;
+<defn>[ \t]+            {
+	if (ptr == buf)
+		errx(EX_UNAVAILABLE, "map expected near line %u of %s",
+		     line_no, map_name);
+	*ptr = '\0';
+	strlcpy(yylval.str, buf, BUFSIZE);
+	BEGIN(nchar);
+	return DEFN;
+}
+<name>\/\/              {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "name buffer overflow near line %u, character '/'",
+		     line_no);
+	*ptr++ = '/';
+}
+<name>\/\>              {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "name buffer overflow near line %u, character '>'",
+		     line_no);
+	*ptr++ = '>';
+}
+<string>\\\"		{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\"'",
+		     line_no);
+	*ptr++ = '"';
+}
+<name>\>		{
+	u_int i;
+
+	if (ptr == buf)
+		errx(EX_UNAVAILABLE, "non-empty name expected near line %u",
+		     line_no);
+	*ptr = '\0';
+	for (i = 0; i <= UCHAR_MAX; i++) {
+		if (strcmp(charmap_table[i], buf) == 0)
+			goto findit;
+	}
+	errx(EX_UNAVAILABLE, "name <%s> not 'charmap'-defined near line %u",
+		buf, line_no);
+ findit:
+	yylval.ch = i;
+	if (fromsubs)
+		BEGIN(subs);
+	else
+		BEGIN(INITIAL);
+	return CHAR;
+}
+<string>\"		{
+	*ptr = '\0';
+	strlcpy(yylval.str, buf, BUFSIZE);
+	BEGIN(subs2);
+	return STRING;
+}
+<name,defn>.            {
+	const char *s = (map_fp != NULL) ? map_name : "input";
+
+	if (!isascii(*yytext) || !isprint(*yytext))
+		errx(EX_UNAVAILABLE, "non-ASCII or non-printable character 0x%02x not allowed in the map/name near line %u of %s",
+		     *yytext, line_no, s);
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "map/name buffer overflow near line %u of %s, character '%c'",
+		     line_no, s, *yytext);
+	*ptr++ = *yytext;
+}
+<string>\\t             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\t'",
+		     line_no);
+	*ptr++ = '\t';
+}
+<string>\\b             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\b'",
+		     line_no);
+	*ptr++ = '\b';
+}
+<string>\\f             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\f'",
+		     line_no);
+	*ptr++ = '\f';
+}
+<string>\\v             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\v'",
+		     line_no);
+	*ptr++ = '\v';
+}
+<string>\\n             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\n'",
+		     line_no);
+	*ptr++ = '\n';
+}
+<string>\\r             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\r'",
+		     line_no);
+	*ptr++ = '\r';
+}
+<string>\\a             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\a'",
+		     line_no);
+	*ptr++ = '\a';
+}
+<name,string,defn>\n            {
+	const char *s = (map_fp != NULL) ? map_name : "input";
+
+	errx(EX_UNAVAILABLE, "unterminated map/name/string near line %u of %s", line_no, s);
+}
+<name,string,nchar><<EOF>>      {
+	const char *s = (map_fp != NULL) ? map_name : "input";
+
+	errx(EX_UNAVAILABLE, "premature EOF in the name/string/char near line %u of %s", line_no, s);
+}
+<string>\\x[0-9a-f]{2}          {
+	u_int v;
+
+	sscanf(&yytext[2], "%x", &v);
+	*ptr++ = (u_char)v;
+}
+<string>\\[0-7]{3}              {
+	u_int v;
+
+	sscanf(&yytext[1], "%o", &v);
+	*ptr++ = (u_char)v;
+}
+<string>\\.             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '%c'",
+		     line_no, yytext[1]);
+	*ptr++ = yytext[1];
+}
+<string>.               {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '%c'",
+		     line_no, *yytext);
+	*ptr++ = *yytext;
+}
+<charmap>[^ \t\n]+	{
+	strlcat(map_name, "/", FILENAME_MAX);
+	strlcat(map_name, yytext, FILENAME_MAX);
+	if((map_fp = fopen(map_name, "r")) == NULL)
+		err(EX_UNAVAILABLE, "can't open 'charmap' file %s",
+		    map_name);
+	save_no = line_no;
+	line_no = 1;
+	map_buf = yy_new_buffer(map_fp, YY_BUF_SIZE);
+	main_buf = YY_CURRENT_BUFFER;
+	yy_switch_to_buffer(map_buf);
+	ptr = buf;
+	BEGIN(defn);
+}
+<charmap>\n             {
+	errx(EX_UNAVAILABLE, "'charmap' file name expected near line %u",
+	     line_no);
+}
+<charmap><<EOF>>        {
+	errx(EX_UNAVAILABLE, "'charmap' file name expected near line %u",
+	     line_no);
+}
+<INITIAL,defn><<EOF>>                 {
+	if(map_fp != NULL) {
+		if (ptr != buf)
+			errx(EX_UNAVAILABLE, "premature EOF in the map near line %u of %s", line_no, map_name);
+		yy_switch_to_buffer(main_buf);
+		yy_delete_buffer(map_buf);
+		fclose(map_fp);
+		map_fp = NULL;
+		line_no = save_no;
+		BEGIN(INITIAL);
+	} else
+		yyterminate();
+}
+%%
+#ifdef FLEX_DEBUG
+/*main()
+{
+	while(yylex())
+		;
+	return 0;
+}*/
+#endif /* FLEX_DEBUG */
diff -ruN -x obj -x CVS -x *~ src-orig/usr.bin/colldef/y.tab.h src/usr.bin/colldef/y.tab.h
--- src-orig/usr.bin/colldef/y.tab.h	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/y.tab.h	Sat Mar 30 09:10:26 2013
@@ -0,0 +1,15 @@
+#define SUBSTITUTE 257
+#define WITH 258
+#define ORDER 259
+#define RANGE 260
+#define STRING 261
+#define DEFN 262
+#define CHAR 263
+#ifndef YYSTYPE_DEFINED
+#define YYSTYPE_DEFINED
+typedef union {
+	u_char ch;
+	u_char str[BUFSIZE];
+} YYSTYPE;
+#endif /* YYSTYPE_DEFINED */
+extern YYSTYPE yylval;

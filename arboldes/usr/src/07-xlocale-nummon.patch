diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/arch/amd64/gdtoa/strtold.c src/lib/libc/arch/amd64/gdtoa/strtold.c
--- src54-x6/lib/libc/arch/amd64/gdtoa/strtold.c	Sun Sep  7 15:36:07 2008
+++ src/lib/libc/arch/amd64/gdtoa/strtold.c	Tue Dec  3 16:12:24 2013
@@ -32,14 +32,15 @@
  */
 
 #include <float.h>
+#include <xlocale.h>
 
 #include "gdtoaimp.h"
 
 long double
-strtold(const char * __restrict s, char ** __restrict sp)
+strtold_l(const char * __restrict s, char ** __restrict sp, locale_t locale)
 {
 	long double result;
 
-	strtorx(s, sp, FLT_ROUNDS, &result);
+	strtorx_l(s, sp, FLT_ROUNDS, &result, locale);
 	return result;
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/arch/i386/gdtoa/strtold.c src/lib/libc/arch/i386/gdtoa/strtold.c
--- src54-x6/lib/libc/arch/i386/gdtoa/strtold.c	Sun Sep  7 15:36:07 2008
+++ src/lib/libc/arch/i386/gdtoa/strtold.c	Tue Dec  3 16:12:24 2013
@@ -32,14 +32,15 @@
  */
 
 #include <float.h>
+#include <xlocale.h>
 
 #include "gdtoaimp.h"
 
 long double
-strtold(const char * __restrict s, char ** __restrict sp)
+strtold_l(const char * __restrict s, char ** __restrict sp, locale_t locale)
 {
 	long double result;
 
-	strtorx(s, sp, FLT_ROUNDS, &result);
+	strtorx_l(s, sp, FLT_ROUNDS, &result, locale);
 	return result;
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/arch/mips64/gdtoa/strtold.c src/lib/libc/arch/mips64/gdtoa/strtold.c
--- src54-x6/lib/libc/arch/mips64/gdtoa/strtold.c	Sun Sep  7 15:36:07 2008
+++ src/lib/libc/arch/mips64/gdtoa/strtold.c	Tue Dec  3 16:12:24 2013
@@ -32,14 +32,15 @@
  */
 
 #include <float.h>
+#include <xlocale.h>
 
 #include "gdtoaimp.h"
 
 long double
-strtold(const char * __restrict s, char ** __restrict sp)
+strtold_l(const char * __restrict s, char ** __restrict sp, locale_t locale)
 {
 	long double result;
 
-	strtorQ(s, sp, FLT_ROUNDS, &result);
+	strtorQ_l(s, sp, FLT_ROUNDS, &result, locale);
 	return result;
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/arch/sparc64/gdtoa/strtold.c src/lib/libc/arch/sparc64/gdtoa/strtold.c
--- src54-x6/lib/libc/arch/sparc64/gdtoa/strtold.c	Sun Sep  7 15:36:08 2008
+++ src/lib/libc/arch/sparc64/gdtoa/strtold.c	Tue Dec  3 16:12:24 2013
@@ -32,14 +32,15 @@
  */
 
 #include <float.h>
+#include <xlocale.h>
 
 #include "gdtoaimp.h"
 
 long double
-strtold(const char * __restrict s, char ** __restrict sp)
+strtold_l(const char * __restrict s, char ** __restrict sp, locale_t locale)
 {
 	long double result;
 
-	strtorQ(s, sp, FLT_ROUNDS, &result);
+	strtorQ_l(s, sp, FLT_ROUNDS, &result, locale);
 	return result;
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/arch/vax/gdtoa/strtof.c src/lib/libc/arch/vax/gdtoa/strtof.c
--- src54-x6/lib/libc/arch/vax/gdtoa/strtof.c	Sat Jun 25 00:32:52 2011
+++ src/lib/libc/arch/vax/gdtoa/strtof.c	Tue Dec  3 16:12:24 2013
@@ -29,13 +29,15 @@
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
 
+#include <xlocale.h>
+
 #include "gdtoaimp.h"
 
  float
 #ifdef KR_headers
-strtof(s, sp) CONST char *s; char **sp;
+strtof_l(s, sp, locale) CONST char *s; char **sp; locale_t locale;
 #else
-strtof(CONST char *s, char **sp)
+strtof_l(CONST char *s, char **sp, locale_t locale)
 #endif
 {
 	static FPI fpi0 = { 24, 1-128-1-24+1,  255-128-1-24+1, 1, SI };
@@ -49,7 +51,7 @@
 #define fpi &fpi0
 #endif
 
-	k = strtodg(s, sp, fpi, &exp, bits);
+	k = strtodg_l(s, sp, fpi, &exp, bits, locale);
 	switch(k & STRTOG_Retmask) {
 	  case STRTOG_NoNumber:
 	  case STRTOG_Zero:
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/gdtoa/strtod.c src/lib/libc/gdtoa/strtod.c
--- src54-x6/lib/libc/gdtoa/strtod.c	Wed Jul 20 13:24:47 2011
+++ src/lib/libc/gdtoa/strtod.c	Wed Dec  4 03:40:45 2013
@@ -29,6 +29,8 @@
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
 
+#include <xlocale.h>
+
 #include "gdtoaimp.h"
 #ifndef NO_FENV_H
 #include <fenv.h>
@@ -37,6 +39,7 @@
 #ifdef USE_LOCALE
 #include "locale.h"
 #endif
+#include "../locale/xlocale_private.h"
 
 #ifdef IEEE_Arith
 #ifndef NO_IEEE_Scale
@@ -80,11 +83,11 @@
 #endif /*}*/
 
  double
-strtod
+strtod_l
 #ifdef KR_headers
-	(s00, se) CONST char *s00; char **se;
+	(s00, se, loc) CONST char *s00; char **se; locale_t loc;
 #else
-	(CONST char *s00, char **se)
+	(CONST char *s00, char **se, locale_t loc)
 #endif
 {
 #ifdef Avoid_Underflow
@@ -106,14 +109,14 @@
 #endif
 #ifdef USE_LOCALE /*{{*/
 #ifdef NO_LOCALE_CACHE
-	char *decimalpoint = localeconv()->decimal_point;
+	char *decimalpoint = localeconv_l(loc)->decimal_point;
 	int dplen = strlen(decimalpoint);
 #else
 	char *decimalpoint;
 	static char *decimalpoint_cache;
 	static int dplen;
 	if (!(s0 = decimalpoint_cache)) {
-		s0 = localeconv()->decimal_point;
+		s0 = localeconv_l(loc)->decimal_point;
 		if ((decimalpoint_cache = (char*)MALLOC(strlen(s0) + 1))) {
 			strlcpy(decimalpoint_cache, s0, strlen(s0) + 1);
 			s0 = decimalpoint_cache;
@@ -1102,4 +1105,10 @@
 		*se = (char *)s;
 	return sign ? -dval(&rv) : dval(&rv);
 	}
+
+double
+strtod(const char *s00, char **se)
+{
+	return strtod_l(s00, se, __get_locale());
+}
 
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/gdtoa/strtodg.c src/lib/libc/gdtoa/strtodg.c
--- src54-x6/lib/libc/gdtoa/strtodg.c	Wed Jul 20 13:24:47 2011
+++ src/lib/libc/gdtoa/strtodg.c	Wed Dec  4 03:41:55 2013
@@ -29,6 +29,8 @@
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
 
+#include <xlocale.h>
+
 #include "gdtoaimp.h"
 
 #ifdef USE_LOCALE
@@ -334,12 +336,12 @@
 	}
 
  int
-strtodg
+strtodg_l
 #ifdef KR_headers
-	(s00, se, fpi, exp, bits)
-	CONST char *s00; char **se; FPI *fpi; Long *exp; ULong *bits;
+	(s00, se, fpi, exp, bits, loc)
+	CONST char *s00; char **se; FPI *fpi; Long *exp; ULong *bits; locale_t loc;
 #else
-	(CONST char *s00, char **se, FPI *fpi, Long *exp, ULong *bits)
+	(CONST char *s00, char **se, FPI *fpi, Long *exp, ULong *bits, locale_t loc)
 #endif
 {
 	int abe, abits, asub;
@@ -355,14 +357,14 @@
 	Bigint *ab, *bb, *bb1, *bd, *bd0, *bs, *delta, *rvb, *rvb0;
 #ifdef USE_LOCALE /*{{*/
 #ifdef NO_LOCALE_CACHE
-	char *decimalpoint = localeconv()->decimal_point;
+	char *decimalpoint = localeconv_l(loc)->decimal_point;
 	int dplen = strlen(decimalpoint);
 #else
 	char *decimalpoint;
 	static char *decimalpoint_cache;
 	static int dplen;
 	if (!(s0 = decimalpoint_cache)) {
-		s0 = localeconv()->decimal_point;
+		s0 = localeconv_l(loc)->decimal_point;
 		if ((decimalpoint_cache = (char*)MALLOC(strlen(s0) + 1))) {
 			strlcpy(decimalpoint_cache, s0, strlen(s0) + 1);
 			s0 = decimalpoint_cache;
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/gdtoa/strtof.c src/lib/libc/gdtoa/strtof.c
--- src54-x6/lib/libc/gdtoa/strtof.c	Wed Jul 20 13:24:47 2011
+++ src/lib/libc/gdtoa/strtof.c	Tue Dec  3 16:12:24 2013
@@ -29,13 +29,14 @@
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
 
+#include "../locale/xlocale_private.h"
 #include "gdtoaimp.h"
 
  float
 #ifdef KR_headers
-strtof(s, sp) CONST char *s; char **sp;
+strtof_l(s, sp, locale) CONST char *s; char **sp; locale_t locale;
 #else
-strtof(CONST char *s, char **sp)
+strtof_l(CONST char *s, char **sp, locale_t locale)
 #endif
 {
 	static FPI fpi0 = { 24, 1-127-24+1,  254-127-24+1, 1, SI };
@@ -49,7 +50,7 @@
 #define fpi &fpi0
 #endif
 
-	k = strtodg(s, sp, fpi, &exp, bits);
+	k = strtodg_l(s, sp, fpi, &exp, bits, locale);
 	switch(k & STRTOG_Retmask) {
 	  case STRTOG_NoNumber:
 	  case STRTOG_Zero:
@@ -79,3 +80,10 @@
 		u.L[0] |= 0x80000000L;
 	return u.f;
 	}
+
+float
+strtof(const char *s, char **sp)
+{
+	return strtof_l(s, sp, __get_locale());
+}
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/gdtoa/strtorQ.c src/lib/libc/gdtoa/strtorQ.c
--- src54-x6/lib/libc/gdtoa/strtorQ.c	Sat Oct 24 12:01:37 2009
+++ src/lib/libc/gdtoa/strtorQ.c	Tue Dec  3 16:12:24 2013
@@ -29,6 +29,8 @@
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
 
+#include <xlocale.h>
+
 #include "gdtoaimp.h"
 
 #undef _0
@@ -97,9 +99,10 @@
 
  int
 #ifdef KR_headers
-strtorQ(s, sp, rounding, L) CONST char *s; char **sp; int rounding; void *L;
+strtorQ_l(s, sp, rounding, L, locale) CONST char *s; char **sp; int rounding;
+void *L; locale_t locale;
 #else
-strtorQ(CONST char *s, char **sp, int rounding, void *L)
+strtorQ_l(CONST char *s, char **sp, int rounding, void *L, locale_t locale)
 #endif
 {
 	static FPI fpi0 = { 113, 1-16383-113+1, 32766-16383-113+1, 1, SI };
@@ -114,7 +117,7 @@
 		fpi1.rounding = rounding;
 		fpi = &fpi1;
 		}
-	k = strtodg(s, sp, fpi, &exp, bits);
+	k = strtodg_l(s, sp, fpi, &exp, bits);
 	ULtoQ((ULong*)L, bits, exp, k);
 	return k;
 	}
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/gdtoa/strtord.c src/lib/libc/gdtoa/strtord.c
--- src54-x6/lib/libc/gdtoa/strtord.c	Sat Oct 24 12:01:37 2009
+++ src/lib/libc/gdtoa/strtord.c	Tue Dec  3 16:12:24 2013
@@ -29,6 +29,8 @@
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
 
+#include <xlocale.h>
+
 #include "gdtoaimp.h"
 
  void
@@ -73,9 +75,10 @@
 
  int
 #ifdef KR_headers
-strtord(s, sp, rounding, d) CONST char *s; char **sp; int rounding; double *d;
+strtord_l(s, sp, rounding, d, locale) CONST char *s; char **sp; int rounding;
+double *d; locale_t locale;
 #else
-strtord(CONST char *s, char **sp, int rounding, double *d)
+strtord_l(CONST char *s, char **sp, int rounding, double *d, locale_t locale)
 #endif
 {
 	static FPI fpi0 = { 53, 1-1023-53+1, 2046-1023-53+1, 1, SI };
@@ -90,7 +93,7 @@
 		fpi1.rounding = rounding;
 		fpi = &fpi1;
 		}
-	k = strtodg(s, sp, fpi, &exp, bits);
+	k = strtodg_l(s, sp, fpi, &exp, bits, locale);
 	ULtod((ULong*)d, bits, exp, k);
 	return k;
 	}
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/gdtoa/strtorx.c src/lib/libc/gdtoa/strtorx.c
--- src54-x6/lib/libc/gdtoa/strtorx.c	Wed Jul 20 13:24:47 2011
+++ src/lib/libc/gdtoa/strtorx.c	Tue Dec  3 16:12:24 2013
@@ -29,6 +29,8 @@
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
 
+#include <xlocale.h>
+
 #include "gdtoaimp.h"
 
 #undef _0
@@ -100,9 +102,10 @@
 
  int
 #ifdef KR_headers
-strtorx(s, sp, rounding, L) CONST char *s; char **sp; int rounding; void *L;
+strtorx_l(s, sp, rounding, L, locale) CONST char *s; char **sp; int rounding;
+void *L; locale_t locale;
 #else
-strtorx(CONST char *s, char **sp, int rounding, void *L)
+strtorx_l(CONST char *s, char **sp, int rounding, void *L, locale_t locale)
 #endif
 {
 	static FPI fpi0 = { 64, 1-16383-64+1, 32766 - 16383 - 64 + 1, 1, SI };
@@ -117,7 +120,7 @@
 		fpi1.rounding = rounding;
 		fpi = &fpi1;
 		}
-	k = strtodg(s, sp, fpi, &exp, bits);
+	k = strtodg_l(s, sp, fpi, &exp, bits, locale);
 	ULtox((UShort*)L, bits, exp, k);
 	return k;
 	}
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/locale/iswctype.c src/lib/libc/locale/iswctype.c
--- src54-x6/lib/libc/locale/iswctype.c	Tue Dec  3 16:08:11 2013
+++ src/lib/libc/locale/iswctype.c	Tue Dec  3 16:12:25 2013
@@ -67,7 +67,7 @@
 static __inline _RuneType
 __runetype_w(wint_t c)
 {
-	_RuneLocale *rl = _CurrentRuneLocale;
+	const _RuneLocale *rl = XLOCALE_CTYPE(__get_locale())->runes;
 
 	return (_RUNE_ISCACHED(c) ?
 		rl->rl_runetype[c] : ___runetype_mb(c));
@@ -96,12 +96,6 @@
 }
 
 static __inline wint_t
-__toupper_w(wint_t c)
-{
-	return (_towctrans(c, _wctrans_upper(_CurrentRuneLocale)));
-}
-
-static __inline wint_t
 __toupper_w_l(wint_t c, locale_t l)
 {
 	FIX_LOCALE(l);
@@ -110,11 +104,12 @@
 }
 
 static __inline wint_t
-__tolower_w(wint_t c)
+__toupper_w(wint_t c)
 {
-	return (_towctrans(c, _wctrans_lower(_CurrentRuneLocale)));
+	return (__toupper_w_l(c, __get_locale()));
 }
 
+
 static __inline wint_t
 __tolower_w_l(wint_t c, locale_t l)
 {
@@ -123,6 +118,13 @@
 	return (_towctrans(c, _wctrans_lower(_runes)));
 }
 
+static __inline wint_t
+__tolower_w(wint_t c)
+{
+	return (__tolower_w_l(c, __get_locale()));
+}
+
+
 int
 iswalnum(wint_t c)
 {
@@ -350,7 +352,7 @@
 wctrans(const char *charclass)
 {
 	int i;
-	_RuneLocale *rl = _CurrentRuneLocale;
+	_RuneLocale *rl = XLOCALE_CTYPE(__get_locale())->runes;
 
 	if (rl->rl_wctrans[_WCTRANS_INDEX_LOWER].te_name==NULL)
 		_wctrans_init(rl);
@@ -409,7 +411,8 @@
 wctype(const char *property)
 {
 	int i;
-	_RuneLocale *rl = _CurrentRuneLocale;
+
+	_RuneLocale *rl = XLOCALE_CTYPE(__get_locale())->runes;
 
 	for (i=0; i<_WCTYPE_NINDEXES; i++)
 		if (!strcmp(rl->rl_wctype[i].te_name, property))
+diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/locale/localeconv.c src/lib/libc/locale/localeconv.c
--- src54-x6/lib/libc/locale/localeconv.c	Thu Dec  5 19:11:37 2013
+++ src/lib/libc/locale/localeconv.c	Fri Dec  6 07:02:12 2013
@@ -3,10 +3,48 @@
  * Written by J.T. Conklin <jtc@netbsd.org>.
  * Public domain.
  */
-
+/*
+ * Copyright (c) 2001 Alexey Zelkin <phantom@FreeBSD.org>
+ * Copyright (c) 1991, 1993
+ *	The Regents of the University of California.  All rights reserved.
+ *
+ * Copyright (c) 2011 The FreeBSD Foundation
+ * All rights reserved.
+ * Portions of this software were developed by David Chisnall
+ * under sponsorship from the FreeBSD Foundation.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 4. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+ 
 #include <sys/localedef.h>
+
 #include <locale.h>
+#include <xlocale.h>
 
+#include "xlocale_private.h"
+
 /*
  * The localeconv() function constructs a struct lconv from the current
  * monetary and numeric locales.
@@ -16,55 +54,63 @@
  * lconv structure are computed only when the monetary or numeric
  * locale has been changed.
  */
-int __mlocale_changed = 1;
-int __nlocale_changed = 1;
 
-/*
- * Return the current locale conversion.
- */
 struct lconv *
-localeconv(void)
+localeconv_l(locale_t loc)
 {
-    static struct lconv ret;
+	FIX_LOCALE(loc);
+	struct lconv *ret = &loc->lconv;
+	if (loc->monetary_locale_changed) {
+		/* LC_MONETARY part */
+		_MonetaryLocale *mptr = __get_current_monetary_locale(loc);
+		// struct lconv should use const char *, but POSIX says char *
+		ret->int_curr_symbol	= (char *)mptr->int_curr_symbol;
+		ret->currency_symbol	= (char *)mptr->currency_symbol;
+		ret->mon_decimal_point	= (char *)mptr->mon_decimal_point;
+		ret->mon_thousands_sep	= (char *)mptr->mon_thousands_sep;
+		// Special case to return "" in POSIX locale as shown in column
+		// localeconv() in table of section LC_MONETARY of
+		// http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap07.html#tag_07_03
+		ret->mon_grouping	= strcmp(((struct xlocale_monetary*)loc->components[XLC_MONETARY])->header.locale, "C") == 0 ?
+			"" : (char *)mptr->mon_grouping;
+		ret->positive_sign	= (char *)mptr->positive_sign;
+		ret->negative_sign	= (char *)mptr->negative_sign;
+		ret->int_frac_digits	= mptr->int_frac_digits;
+		ret->frac_digits		= mptr->frac_digits;
+		ret->p_cs_precedes	= mptr->p_cs_precedes;
+		ret->p_sep_by_space	= mptr->p_sep_by_space;
+		ret->n_cs_precedes	= mptr->n_cs_precedes;
+		ret->n_sep_by_space	= mptr->n_sep_by_space;
+		ret->p_sign_posn		= mptr->p_sign_posn;
+		ret->n_sign_posn		= mptr->n_sign_posn;
+		ret->int_p_cs_precedes	= mptr->int_p_cs_precedes;
+		ret->int_n_cs_precedes	= mptr->int_n_cs_precedes;
+		ret->int_p_sep_by_space	= mptr->int_p_sep_by_space;
+		ret->int_n_sep_by_space	= mptr->int_n_sep_by_space;
+		ret->int_p_sign_posn	= mptr->int_p_sign_posn;
+		ret->int_n_sign_posn	= mptr->int_n_sign_posn;
 
-    if (__mlocale_changed) {
-	// struct lconv should use const char *, but POSIX says char *
-	ret.int_curr_symbol	= (char *)_CurrentMonetaryLocale->int_curr_symbol;
-	ret.currency_symbol	= (char *)_CurrentMonetaryLocale->currency_symbol;
-	ret.mon_decimal_point	= (char *)_CurrentMonetaryLocale->mon_decimal_point;
-	ret.mon_thousands_sep	= (char *)_CurrentMonetaryLocale->mon_thousands_sep;
-	// Special case to return "" in POSIX locale as shown in column
-	// localeconv() in table of section LC_MONETARY of
-	// http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap07.html#tag_07_03
-	ret.mon_grouping	= (_CurrentMonetaryLocale == &_DefaultMonetaryLocale) ?
-		"" : (char *)_CurrentMonetaryLocale->mon_grouping;
-	ret.positive_sign	= (char *)_CurrentMonetaryLocale->positive_sign;
-	ret.negative_sign	= (char *)_CurrentMonetaryLocale->negative_sign;
-	ret.int_frac_digits	= _CurrentMonetaryLocale->int_frac_digits;
-	ret.frac_digits		= _CurrentMonetaryLocale->frac_digits;
-	ret.p_cs_precedes	= _CurrentMonetaryLocale->p_cs_precedes;
-	ret.p_sep_by_space	= _CurrentMonetaryLocale->p_sep_by_space;
-	ret.n_cs_precedes	= _CurrentMonetaryLocale->n_cs_precedes;
-	ret.n_sep_by_space	= _CurrentMonetaryLocale->n_sep_by_space;
-	ret.p_sign_posn		= _CurrentMonetaryLocale->p_sign_posn;
-	ret.n_sign_posn		= _CurrentMonetaryLocale->n_sign_posn;
-	ret.int_p_cs_precedes	= _CurrentMonetaryLocale->int_p_cs_precedes;
-	ret.int_n_cs_precedes	= _CurrentMonetaryLocale->int_n_cs_precedes;
-	ret.int_p_sep_by_space	= _CurrentMonetaryLocale->int_p_sep_by_space;
-	ret.int_n_sep_by_space	= _CurrentMonetaryLocale->int_n_sep_by_space;
-	ret.int_p_sign_posn	= _CurrentMonetaryLocale->int_p_sign_posn;
-	ret.int_n_sign_posn	= _CurrentMonetaryLocale->int_n_sign_posn;
+		loc->monetary_locale_changed = 0;
+	}
 
-	__mlocale_changed = 0;
-    }
+	if (loc->numeric_locale_changed) {
+		/* LC_NUMERIC */
+		_NumericLocale *nptr = __get_current_numeric_locale(loc);
+		ret->decimal_point	= (char *)nptr->decimal_point;
+		ret->thousands_sep	= (char *)nptr->thousands_sep;
+		ret->grouping		= (char *)nptr->grouping;
+		loc->numeric_locale_changed = 0;
+	}
 
-    if (__nlocale_changed) {
-	/* LC_NUMERIC */
-	ret.decimal_point	= (char *) _CurrentNumericLocale->decimal_point;
-	ret.thousands_sep	= (char *) _CurrentNumericLocale->thousands_sep;
-	ret.grouping		= (char *) _CurrentNumericLocale->grouping;
-	__nlocale_changed = 0;
-    }
+	return ret;
+}
 
-    return (&ret);
+/*
+ * Return the current locale conversion.
+ */
+struct lconv *
+localeconv()
+{
+	return localeconv_l(__get_locale());
 }
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/locale/mbrlen.c src/lib/libc/locale/mbrlen.c
--- src54-x6/lib/libc/locale/mbrlen.c	Tue Dec  3 16:05:32 2013
+++ src/lib/libc/locale/mbrlen.c	Tue Dec  3 22:25:11 2013
@@ -38,9 +38,10 @@
 {
 	static mbstate_t mbs;
 
-	memset(&mbs, 0, sizeof(mbs)); 
-	if (ps == NULL)
+	if (ps == NULL) {
+		memset((void *)&mbs, 0, sizeof(mbs)); 
 		ps = &mbs;
+	}
 	return (mbrtowc_l(NULL, s, n, ps, loc));
 }
 
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src55-orig/lib/libc/locale/setlocale.c src/lib/libc/locale/setlocale.c
--- src55-orig/lib/libc/locale/setlocale.c	Thu Dec  5 19:12:06 2013
+++ src/lib/libc/locale/setlocale.c	Fri Dec  6 03:38:39 2013
@@ -200,18 +200,13 @@
 	case LC_CTYPE:
 		(void)_xpg4_setrunelocale("C");
 		__install_currentrunelocale_ctype();
-		(void)strlcpy(__xlocale_global_locale.components[category-1]->locale, 
-				"C", 
-				sizeof(__xlocale_global_locale.components[category-1]->locale) );
 		break;
 	case LC_MESSAGES:
+		return;
 		break;
 	case LC_COLLATE:
  		if (__collate_load_tables("C"))
 			return;
-		(void)strlcpy(__xlocale_global_locale.components[category-1]->locale, 
-				"C", 
-				sizeof(__xlocale_global_locale.components[category-1]->locale) );
 		break;
 	case LC_MONETARY:
 		if (__monetary_load_locale("C")) 
@@ -224,8 +219,12 @@
 	case LC_TIME:
 		if (__time_load_locale("C"))
 			return;
+		return;
 		break;
 	}
+	(void)strlcpy(__xlocale_global_locale.components[category-1]->locale, 
+			"C", 
+			sizeof(__xlocale_global_locale.components[category-1]->locale) );
 }
 
 static int
@@ -276,9 +275,6 @@
 		if (_xpg4_setrunelocale(locname))
 			return -1;
 		__install_currentrunelocale_ctype();
-		(void)strlcpy(__xlocale_global_locale.components[category-1]->locale, 
-				locname, 
-				sizeof(__xlocale_global_locale.components[category-1]->locale) );
 		break;
 
 	case LC_MESSAGES:
@@ -287,9 +283,6 @@
 	case LC_COLLATE:
 		if (__collate_load_tables(locname))
 			return -1;
-		(void)strlcpy(__xlocale_global_locale.components[category-1]->locale, 
-				locname, 
-				sizeof(__xlocale_global_locale.components[category-1]->locale) );
 		break;
 		
 	case LC_MONETARY:
@@ -304,9 +297,12 @@
 	case LC_TIME:
 		if (__time_load_locale(locname)) 
 			return -1;
+		return 0;
 		break;
 	}
-
+	(void)strlcpy(__xlocale_global_locale.components[category-1]->locale, 
+			locname, 
+			sizeof(__xlocale_global_locale.components[category-1]->locale) );
 	return 0;
 }
 
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src55-orig/lib/libc/locale/xlocale_private.h src/lib/libc/locale/xlocale_private.h 
--- src55-orig/lib/libc/locale/xlocale_private.h	Wed Dec 11 22:06:50 2013
+++ src/lib/libc/locale/xlocale_private.h	Fri Dec 13 15:43:35 2013
@@ -32,15 +32,18 @@
 #ifndef _XLOCALE_PRIVATE__H_
 #define _XLOCALE_PRIVATE__H_
 
+#include <machine/atomic.h>
+#include <sys/localedef.h>
+#include <sys/types.h>
+
 #include <xlocale.h>
 #include <locale.h>
 #include <stdlib.h>
 #include <stdint.h>
-#include <sys/types.h>
-#include <machine/atomic.h>
 
 
 #define ENCODING_LEN 31
+#define CATEGORY_LEN 11
 
 enum {
 	XLC_COLLATE = 0,
@@ -209,8 +212,20 @@
 #define FIX_LOCALE(l) (l = get_real_locale(l))
 
 
-#define ENCODING_LEN 31
-#define CATEGORY_LEN 11
+struct xlocale_numeric {
+	struct xlocale_component header;
+	char *buffer;
+	_NumericLocale locale;
+};
 
+_NumericLocale *__get_current_numeric_locale(locale_t loc);
+
+struct xlocale_monetary {
+	struct xlocale_component header;
+	char *buffer;
+	_MonetaryLocale locale;
+};
+
+_MonetaryLocale *__get_current_monetary_locale(locale_t loc);
 
 #endif
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src55-orig/lib/libc/locale/_def_monetary.c src/lib/libc/locale/_def_monetary.c 
--- src55-orig/lib/libc/locale/_def_monetary.c	Wed Dec 11 22:06:50 2013
+++ src/lib/libc/locale/_def_monetary.c	Fri Dec 13 15:43:35 2013
@@ -34,14 +34,12 @@
 * SUCH DAMAGE.
 */
 
-#include <sys/cdefs.h>
 #include <sys/localedef.h>

-#include <limits.h>
 #include <locale.h>
-#include <stddef.h>
-#include <stdlib.h>
 
+#include "locale/xlocale_private.h"
+
 static char	numempty[] = { CHAR_MAX, '\0'};
 
 const _MonetaryLocale _DefaultMonetaryLocale =
@@ -71,42 +69,20 @@
 
 const _MonetaryLocale *_CurrentMonetaryLocale = &_DefaultMonetaryLocale;
 
+struct xlocale_monetary __xlocale_global_monetary;
+
 extern const char * __fix_locale_grouping_str(const char *);
 
-/* Last loaded monetary locale different to _DefaultMonetaryLocale */
-_MonetaryLocale _monetary_locale;
+static void
+destruct_monetary(void *v)
+{
+        struct xlocale_monetary *l = v;
+        if (l->buffer)
+                free(l->buffer);
+        free(l);
+}
 
-static char *_monetary_buffer = NULL;
 
-/* Used by localeconv, should be set to 0 only by that function */
-extern int __mlocale_changed;
-
-/* This structure is used to load with __part_load_locale, after
- * loading will be converted to _MonetaryLocale */
-struct lc_monetary_T {
-	const char	*int_curr_symbol;
-	const char	*currency_symbol;
-	const char	*mon_decimal_point;
-	const char	*mon_thousands_sep;
-	const char	*mon_grouping;
-	const char	*positive_sign;
-	const char	*negative_sign;
-	const char	*int_frac_digits;
-	const char	*frac_digits;
-	const char	*p_cs_precedes;
-	const char	*p_sep_by_space;
-	const char	*n_cs_precedes;
-	const char	*n_sep_by_space;
-	const char	*p_sign_posn;
-	const char	*n_sign_posn;
-	const char	*int_p_cs_precedes;
-	const char	*int_n_cs_precedes;
-	const char	*int_p_sep_by_space;
-	const char	*int_n_sep_by_space;
-	const char	*int_p_sign_posn;
-	const char	*int_n_sign_posn;
-};
-
 static char
 cnv(const char *str)
 {
@@ -116,37 +92,70 @@
 		i = CHAR_MAX;
 	return ((char)i);
 }
-		
-int
-__monetary_load_locale(const char *name)
+
+static int
+__mload(const char *name, locale_t loc, struct xlocale_monetary *xmon)
 {
-	int ret;
+	int ret = 0;
 	char error_buf[2048];
+	/* This structure is used to load with __part_load_locale, after
+	 * loading will be converted to _MonetaryLocale */
+	struct lc_monetary_T {
+		const char	*int_curr_symbol;
+		const char	*currency_symbol;
+		const char	*mon_decimal_point;
+		const char	*mon_thousands_sep;
+		const char	*mon_grouping;
+		const char	*positive_sign;
+		const char	*negative_sign;
+		const char	*int_frac_digits;
+		const char	*frac_digits;
+		const char	*p_cs_precedes;
+		const char	*p_sep_by_space;
+		const char	*n_cs_precedes;
+		const char	*n_sep_by_space;
+		const char	*p_sign_posn;
+		const char	*n_sign_posn;
+		const char	*int_p_cs_precedes;
+		const char	*int_n_cs_precedes;
+		const char	*int_p_sep_by_space;
+		const char	*int_n_sep_by_space;
+		const char	*int_p_sign_posn;
+		const char	*int_n_sign_posn;
+	};
 	struct lc_monetary_T tmon;
-	int changed;
-
+	_MonetaryLocale *l;
+	int changed = 0;
+	
+ 	FIX_LOCALE(loc);	
+	l = &xmon->locale;	
 	if (strcmp(name, "C") == 0 || strcmp(name, "POSIX") == 0) {
-		if (_CurrentMonetaryLocale != &_DefaultMonetaryLocale) {
-			__mlocale_changed = 1;
-			_CurrentMonetaryLocale = &_DefaultMonetaryLocale;
-		}
+		xmon->header.header.retain_count = 0;
+		xmon->header.header.destructor = NULL;
+		xmon->header.locale[0] = 'C';
+		xmon->header.locale[1] = '\0';
+		xmon->buffer = NULL;
+		xmon->locale = _DefaultMonetaryLocale;
+		loc->using_monetary_locale = 0;
+		loc->monetary_locale_changed = 1;
 	} else {
+		xmon->header.header.destructor = destruct_monetary;
 		ret = __loadtextcat(name, LC_MONETARY, &changed,
-				&_monetary_buffer, 
-				(const char**)&tmon,
+				&xmon->buffer, 
+				(const char **)&tmon, 
 				sizeof(tmon), 
 				error_buf, sizeof(error_buf));
 		if (ret == 0 && changed == 1) {
-			_monetary_locale.mon_grouping =
+			xmon->locale.mon_grouping =
 				__fix_locale_grouping_str(tmon.mon_grouping);
-#define M_ASSIGN_STR(NAME) (_monetary_locale.NAME = tmon.NAME)
+#define M_ASSIGN_STR(NAME) (xmon->locale.NAME = tmon.NAME)
 			M_ASSIGN_STR(int_curr_symbol);
 			M_ASSIGN_STR(currency_symbol);
 			M_ASSIGN_STR(mon_decimal_point);
 			M_ASSIGN_STR(mon_thousands_sep);
 			M_ASSIGN_STR(positive_sign);
 			M_ASSIGN_STR(negative_sign);
-#define M_ASSIGN_CHAR(NAME) ((_monetary_locale.NAME) = cnv(tmon.NAME))
+#define M_ASSIGN_CHAR(NAME) ((xmon->locale.NAME) = cnv(tmon.NAME))
 			M_ASSIGN_CHAR(int_frac_digits);
 			M_ASSIGN_CHAR(frac_digits);
 			M_ASSIGN_CHAR(p_cs_precedes);
@@ -161,18 +170,58 @@
 			M_ASSIGN_CHAR(int_n_sep_by_space);
 			M_ASSIGN_CHAR(int_p_sign_posn);
 			M_ASSIGN_CHAR(int_n_sign_posn);
-			__mlocale_changed = 1;
-			_CurrentMonetaryLocale = &_monetary_locale;
+			loc->using_monetary_locale = 1;
+			loc->monetary_locale_changed = 1;
+		} else {
+			return -1;
 		}
 	}
+	return ret;
+}
 
+		
+int
+__monetary_load_locale(const char *name)
+{
+	int ret = 0;
+
+	ret = __mload(name, &__xlocale_global_locale, &__xlocale_global_monetary);
+	_CurrentMonetaryLocale = &__xlocale_global_monetary.locale;
 	return ret;
+}
 
+
+void *
+__monetary_load(const char *name, locale_t loc)
+{
+	int ret = 0;
+	struct xlocale_monetary *new;
+
+	new = calloc(sizeof(struct xlocale_monetary), 1);
+	if (new == NULL) {
+		return NULL;
+	}
+	ret = __mload(name, loc, new);
+	if (ret != 0) {
+		xlocale_release(new);
+		return NULL;
+	}
+	return new;
 }
 
+
+_MonetaryLocale *
+__get_current_monetary_locale(locale_t loc)
+{
+	return (loc->using_monetary_locale
+			? &((struct xlocale_monetary *)loc->components[XLC_MONETARY])->locale
+			: (_MonetaryLocale *)&_DefaultMonetaryLocale);
+}
+
+
 #ifdef LOCALE_DEBUG
 void
-monetdebug() {
+monetarydebug(_MonetaryLocale l) {
 	printf(	"int_curr_symbol = %s\n"
 			"currency_symbol = %s\n"
 			"mon_decimal_point = %s\n"
@@ -194,27 +243,27 @@
 			"int_n_sep_by_space = %d\n"
 			"int_p_sign_posn = %d\n"
 			"int_n_sign_posn = %d\n",
-			_monetary_locale.int_curr_symbol,
-			_monetary_locale.currency_symbol,
-			_monetary_locale.mon_decimal_point,
-			_monetary_locale.mon_thousands_sep,
-			_monetary_locale.mon_grouping,
-			_monetary_locale.positive_sign,
-			_monetary_locale.negative_sign,
-			_monetary_locale.int_frac_digits[0],
-			_monetary_locale.frac_digits[0],
-			_monetary_locale.p_cs_precedes[0],
-			_monetary_locale.p_sep_by_space[0],
-			_monetary_locale.n_cs_precedes[0],
-			_monetary_locale.n_sep_by_space[0],
-			_monetary_locale.p_sign_posn[0],
-			_monetary_locale.n_sign_posn[0],
-			_monetary_locale.int_p_cs_precedes[0],
-			_monetary_locale.int_p_sep_by_space[0],
-			_monetary_locale.int_n_cs_precedes[0],
-			_monetary_locale.int_n_sep_by_space[0],
-			_monetary_locale.int_p_sign_posn[0],
-			_monetary_locale.int_n_sign_posn[0]
+			l.int_curr_symbol,
+			l.currency_symbol,
+			l.mon_decimal_point,
+			l.mon_thousands_sep,
+			l.mon_grouping,
+			l.positive_sign,
+			l.negative_sign,
+			l.int_frac_digits[0],
+			l.frac_digits[0],
+			l.p_cs_precedes[0],
+			l.p_sep_by_space[0],
+			l.n_cs_precedes[0],
+			l.n_sep_by_space[0],
+			l.p_sign_posn[0],
+			l.n_sign_posn[0],
+			l.int_p_cs_precedes[0],
+			l.int_p_sep_by_space[0],
+			l.int_n_cs_precedes[0],
+			l.int_n_sep_by_space[0],
+			l.int_p_sign_posn[0],
+			l.int_n_sign_posn[0]
 				);
 }
 #endif /* LOCALE_DEBUG */
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src55-orig/lib/libc/locale/_def_numeric.c src/lib/libc/locale/_def_numeric.c 
--- src55-orig/lib/libc/locale/_def_numeric.c	Wed Dec 11 22:06:50 2013
+++ src/lib/libc/locale/_def_numeric.c	Fri Dec 13 15:43:35 2013
@@ -36,8 +36,11 @@
  */
 
 #include <sys/localedef.h>
+
 #include <locale.h>
 
+#include "locale/xlocale_private.h"
+
 static char	numempty[] = { CHAR_MAX, '\0' };
 
 const _NumericLocale _DefaultNumericLocale =
@@ -49,52 +52,105 @@
 
 const _NumericLocale *_CurrentNumericLocale = &_DefaultNumericLocale;
 
+struct xlocale_numeric __xlocale_global_numeric;
+
 extern const char *__fix_locale_grouping_str(const char *);
 
-static char *_numeric_buffer = NULL;
+static void
+destruct_numeric(void *v)
+{
+	struct xlocale_numeric *l = v;
+	if (l->buffer)
+		free(l->buffer);
+	free(l);
+}
 
-_NumericLocale _numeric_locale;
 
-/* Used by localeconv, should be set to 0 only by that function */
-extern int __nlocale_changed;
-
-/* Loads numeric locale from file in text format */
-int
-__numeric_load_locale(const char *name)
+static int
+__nload(const char *name, locale_t loc, struct xlocale_numeric *xnum)
 {
-	int ret;
+	int ret = 0;
 	char error_buf[2048];
-	int changed;
+	_NumericLocale *l;
+	int changed = 0;
 
+	FIX_LOCALE(loc);
+	l = &xnum->locale;	
 	if (strcmp(name, "C") == 0 || strcmp(name, "POSIX") == 0) {
-		if (_CurrentNumericLocale != &_DefaultNumericLocale) {
-			__nlocale_changed = 1;
-			_CurrentNumericLocale = &_DefaultNumericLocale;
-		}
+		xnum->header.header.retain_count = 0;
+		xnum->header.header.destructor = NULL;
+		xnum->header.locale[0] = 'C';
+		xnum->header.locale[1] = '\0';
+		xnum->buffer = NULL;
+		xnum->locale = _DefaultNumericLocale;
+		loc->using_numeric_locale = 0;
+		loc->numeric_locale_changed = 1;
 	} else {
+		xnum->header.header.destructor = destruct_numeric;
 		ret = __loadtextcat(name, LC_NUMERIC, &changed,
-				&_numeric_buffer, 
-				(const char**)&_numeric_locale, 
-				sizeof(_numeric_locale), 
+				&xnum->buffer, 
+				(const char **)l, 
+				sizeof(_NumericLocale), 
 				error_buf, sizeof(error_buf));
 		if (ret == 0 && changed == 1) {
-			(void)__fix_locale_grouping_str(_numeric_locale.grouping);
-			__nlocale_changed = 1;
-			_CurrentNumericLocale = &_numeric_locale;
+			(void)__fix_locale_grouping_str(xnum->locale.grouping);
+			loc->using_numeric_locale = 1;
+			loc->numeric_locale_changed = 1;
+		} else {
+			return -1;
 		}
 	}
 	return ret;
 }
 
+
+/* Loads numeric locale from file in text format */
+int
+__numeric_load_locale(const char *name)
+{
+	int ret = 0;
+
+	ret = __nload(name, &__xlocale_global_locale, &__xlocale_global_numeric);
+	_CurrentNumericLocale = &__xlocale_global_numeric.locale;
+	return ret;
+}
+
+void *
+__numeric_load(const char *name, locale_t loc)
+{
+	int ret;
+	struct xlocale_numeric *new;
+        
+	new = calloc(sizeof(struct xlocale_numeric), 1);
+	if (new == NULL) {
+		return NULL;
+	}
+	ret = __nload(name, loc, new);
+	if (ret != 0) {
+		xlocale_release(new);
+		return NULL;
+	}
+	return new;
+}
+
+_NumericLocale *
+__get_current_numeric_locale(locale_t loc)
+{
+	return (loc->using_numeric_locale
+			? &((struct xlocale_numeric *)loc->components[XLC_NUMERIC])->locale
+			: (_NumericLocale *)&_DefaultNumericLocale);
+}
+
+
 #ifdef LOCALE_DEBUG
 void
-numericdebug(void) {
+numericdebug(_NumericLocale l) {
 	printf(	"decimal_point = %s\n"
 			"thousands_sep = %s\n"
 			"grouping = %s\n",
-			_numeric_locale.decimal_point,
-			_numeric_locale.thousands_sep,
-			_numeric_locale.grouping
+			l.decimal_point,
+			l.thousands_sep,
+			l.grouping
 	      );
 }
 #endif /* LOCALE_DEBUG */
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src55-orig/lib/libc/locale/xlocale.c src/lib/libc/locale/xlocale.c 
--- src55-orig/lib/libc/locale/xlocale.c	Wed Dec 11 22:06:50 2013
+++ src/lib/libc/locale/xlocale.c	Fri Dec 13 15:43:35 2013
@@ -74,10 +74,11 @@
 	{0},
 	{
 		&__xlocale_global_collate,
-		&__xlocale_global_ctype, 0, 0, 0, 0
-		/* FIXME
+		&__xlocale_global_ctype, 
 		&__xlocale_global_monetary,
 		&__xlocale_global_numeric,
+		0, 0
+		/* FIXME
 		&__xlocale_global_time,
 		&__xlocale_global_messages */
 	},
@@ -102,19 +103,6 @@
 
 
 void *
-__numeric_load(const char *locale, locale_t unused)
-{
-	return NULL;
-}
-
-void *
-__monetary_load(const char *locale, locale_t unused)
-{
-	return NULL;
-}
-	
-
-void *
 __time_load(const char *locale, locale_t unused)
 {
 	return NULL;
@@ -429,5 +417,6 @@
 		}
 		printf("\n");
 	}
+	printf("_bufcrncystr=%p\n", loc->_bufcrncystr);
 }
 
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/asprintf.c src/lib/libc/stdio/asprintf.c
--- src54-x6/lib/libc/stdio/asprintf.c	Sat Jun 25 00:32:56 2011
+++ src/lib/libc/stdio/asprintf.c	Tue Dec  3 16:12:41 2013
@@ -21,11 +21,12 @@
 #include <string.h>
 #include <errno.h>
 #include <stdarg.h>
+#include <xlocale.h>
 #include "local.h"
 
 /* PRINTFLIKE2 */
 int
-asprintf(char **str, const char *fmt, ...)
+asprintf_l(char **str, locale_t locale, const char *fmt, ...)
 {
 	int ret;
 	va_list ap;
@@ -41,7 +42,7 @@
 		goto err;
 	f._bf._size = f._w = 127;		/* Leave room for the NUL */
 	va_start(ap, fmt);
-	ret = __vfprintf(&f, fmt, ap);
+	ret = __vfprintf(&f, locale, fmt, ap);
 	va_end(ap);
 	if (ret == -1)
 		goto err;
@@ -61,3 +62,15 @@
 	errno = ENOMEM;
 	return (-1);
 }
+int
+asprintf(char ** __restrict s, char const * __restrict fmt, ...)
+{
+	int ret;
+	va_list ap;
+
+	va_start(ap, fmt);
+	ret = vasprintf(s, fmt, ap);
+	va_end(ap);
+	return (ret);
+}
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/fscanf.c src/lib/libc/stdio/fscanf.c
--- src54-x6/lib/libc/stdio/fscanf.c	Sat Jun 25 00:32:56 2011
+++ src/lib/libc/stdio/fscanf.c	Tue Dec  3 16:12:41 2013
@@ -33,8 +33,20 @@
 
 #include <stdio.h>
 #include <stdarg.h>
+#include <xlocale.h>
 
 /* SCANFLIKE2 */
+int
+fscanf_l(FILE *fp, locale_t locale, const char *fmt, ...)
+{
+	int ret;
+	va_list ap;
+
+	va_start(ap, fmt);
+	ret = vfscanf_l(fp, locale, fmt, ap);
+	va_end(ap);
+	return (ret);
+}
 int
 fscanf(FILE *fp, const char *fmt, ...)
 {
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/local.h src/lib/libc/stdio/local.h
--- src54-x6/lib/libc/stdio/local.h	Mon Nov 14 23:11:36 2011
+++ src/lib/libc/stdio/local.h	Tue Dec  3 16:12:41 2013
@@ -38,6 +38,7 @@
  */
 
 #include <wchar.h> 
+#include <xlocale.h> 
 #include "wcio.h"
 #include "fileext.h"
 
@@ -58,8 +59,8 @@
 int	__sflags(const char *, int *);
 wint_t __fgetwc_unlock(FILE *);
 wint_t	__ungetwc(wint_t, FILE *);
-int	__vfprintf(FILE *, const char *, __va_list);
-int	__svfscanf(FILE * __restrict, const char * __restrict, __va_list);
+int	__vfprintf(FILE *, locale_t, const char *, __va_list);
+int	__svfscanf(FILE * __restrict, locale_t, const char * __restrict, __va_list);
 int	__vfwprintf(FILE * __restrict, const wchar_t * __restrict, __va_list);
 int	__vfwscanf(FILE * __restrict, const wchar_t * __restrict, __va_list);
 
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/scanf.c src/lib/libc/stdio/scanf.c
--- src54-x6/lib/libc/stdio/scanf.c	Sat Jun 25 00:32:56 2011
+++ src/lib/libc/stdio/scanf.c	Tue Dec  3 16:12:41 2013
@@ -33,8 +33,20 @@
 
 #include <stdio.h>
 #include <stdarg.h>
+#include <xlocale.h>
 
 /* SCANFLIKE1 */
+int
+scanf_l(locale_t locale, const char *fmt, ...)
+{
+	int ret;
+	va_list ap;
+
+	va_start(ap, fmt);
+	ret = vfscanf_l(stdin, locale, fmt, ap);
+	va_end(ap);
+	return (ret);
+}
 int
 scanf(const char *fmt, ...)
 {
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/snprintf.c src/lib/libc/stdio/snprintf.c
--- src54-x6/lib/libc/stdio/snprintf.c	Sat Jun 25 00:32:56 2011
+++ src/lib/libc/stdio/snprintf.c	Tue Dec  3 16:12:41 2013
@@ -3,6 +3,11 @@
  * Copyright (c) 1990, 1993
  *	The Regents of the University of California.  All rights reserved.
  *
+ * Copyright (c) 2011 The FreeBSD Foundation
+ * All rights reserved.
+ * Portions of this software were developed by David Chisnall
+ * under sponsorship from the FreeBSD Foundation.
+ *
  * This code is derived from software contributed to Berkeley by
  * Chris Torek.
  *
@@ -31,11 +36,14 @@
  * SUCH DAMAGE.
  */
 
+#include <errno.h>
 #include <limits.h>
 #include <stdio.h>
-#include <string.h>
 #include <stdarg.h>
+#include <string.h>
+
 #include "local.h"
+#include "../locale/xlocale_private.h"
 
 /* PRINTFLIKE3 */
 int
@@ -61,8 +69,38 @@
 	f._bf._base = f._p = (unsigned char *)str;
 	f._bf._size = f._w = n - 1;
 	va_start(ap, fmt);
-	ret = __vfprintf(&f, fmt, ap);
+	ret = __vfprintf(&f, __get_locale(), fmt, ap);
 	va_end(ap);
 	*f._p = '\0';
+	return (ret);
+}
+int
+snprintf_l(char * __restrict str, size_t n, locale_t locale,
+		char const * __restrict fmt, ...)
+{
+	size_t on;
+	int ret;
+	va_list ap;
+	struct __sfileext fext;
+	FILE f;
+	FIX_LOCALE(locale);
+
+	on = n;
+	if (n != 0)
+		n--;
+	if (n > INT_MAX) {
+		errno = EOVERFLOW;
+		*str = '\0';
+		return (EOF);
+	}
+	_FILEEXT_SETUP(&f, &fext);
+	va_start(ap, fmt);
+	f._flags = __SWR | __SSTR;
+	f._bf._base = f._p = (unsigned char *)str;
+	f._bf._size = f._w = n;
+	ret = __vfprintf(&f, locale, fmt, ap);
+	if (on > 0)
+		*f._p = '\0';
+	va_end(ap);
 	return (ret);
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/sprintf.c src/lib/libc/stdio/sprintf.c
--- src54-x6/lib/libc/stdio/sprintf.c	Sat Jun 25 00:32:56 2011
+++ src/lib/libc/stdio/sprintf.c	Tue Dec  3 16:12:41 2013
@@ -35,6 +35,7 @@
 #include <string.h>
 #include <stdarg.h>
 #include <limits.h>
+#include <xlocale.h>
 #include "local.h"
 
 #if defined(APIWARN)
@@ -44,7 +45,7 @@
 
 /* PRINTFLIKE2 */
 int
-sprintf(char *str, const char *fmt, ...)
+sprintf_l(char *str, locale_t locale, const char *fmt, ...)
 {
 	int ret;
 	va_list ap;
@@ -57,8 +58,20 @@
 	f._bf._base = f._p = (unsigned char *)str;
 	f._bf._size = f._w = INT_MAX;
 	va_start(ap, fmt);
-	ret = __vfprintf(&f, fmt, ap);
+	ret = __vfprintf(&f, locale, fmt, ap);
 	va_end(ap);
 	*f._p = '\0';
 	return (ret);
 }
+int
+sprintf(char * __restrict str, char const * __restrict fmt, ...)
+{
+	int ret;
+	va_list ap;
+
+	va_start(ap, fmt);
+	ret = vsprintf(str, fmt, ap);
+	va_end(ap);
+	return (ret);
+}
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/sscanf.c src/lib/libc/stdio/sscanf.c
--- src54-x6/lib/libc/stdio/sscanf.c	Mon Nov 14 23:11:36 2011
+++ src/lib/libc/stdio/sscanf.c	Tue Dec  3 16:12:41 2013
@@ -35,6 +35,7 @@
 #include <string.h>
 #include <stdarg.h>
 #include "local.h"
+#include "../locale/xlocale_private.h"
 
 /* ARGSUSED */
 static int
@@ -60,7 +61,26 @@
 	f._read = eofread;
 	f._lb._base = NULL;
 	va_start(ap, fmt);
-	ret = __svfscanf(&f, fmt, ap);
+	ret = __svfscanf(&f, __get_locale(), fmt, ap);
+	va_end(ap);
+	return (ret);
+}
+int
+sscanf_l(const char *str, locale_t locale, const char *fmt, ...)
+{
+	int ret;
+	va_list ap;
+	FILE f;
+	struct __sfileext fext;
+
+	_FILEEXT_SETUP(&f, &fext);
+	f._flags = __SRD;
+	f._bf._base = f._p = (unsigned char *)str;
+	f._bf._size = f._r = strlen(str);
+	f._read = eofread;
+	f._lb._base = NULL;
+	va_start(ap, fmt);
+	ret = __svfscanf(&f, locale, fmt, ap);
 	va_end(ap);
 	return (ret);
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/vasprintf.c src/lib/libc/stdio/vasprintf.c
--- src54-x6/lib/libc/stdio/vasprintf.c	Tue Nov 10 11:28:49 2009
+++ src/lib/libc/stdio/vasprintf.c	Tue Dec  3 16:12:41 2013
@@ -21,9 +21,10 @@
 #include <string.h>
 #include <errno.h>
 #include "local.h"
+#include "../locale/xlocale_private.h"
 
 int
-vasprintf(char **str, const char *fmt, __va_list ap)
+vasprintf_l(char **str, locale_t locale, const char *fmt, __va_list ap)
 {
 	int ret;
 	FILE f;
@@ -37,7 +38,7 @@
 	if (f._bf._base == NULL)
 		goto err;
 	f._bf._size = f._w = 127;		/* Leave room for the NUL */
-	ret = __vfprintf(&f, fmt, ap);
+	ret = __vfprintf(&f, locale, fmt, ap);
 	if (ret == -1)
 		goto err;
 	*f._p = '\0';
@@ -56,3 +57,9 @@
 	errno = ENOMEM;
 	return (-1);
 }
+int
+vasprintf(char **str, const char *fmt, __va_list ap)
+{
+	return vasprintf_l(str, __get_locale(), fmt, ap);
+}
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/vdprintf.c src/lib/libc/stdio/vdprintf.c
--- src54-x6/lib/libc/stdio/vdprintf.c	Tue Jan 29 19:08:13 2013
+++ src/lib/libc/stdio/vdprintf.c	Tue Dec  3 16:12:41 2013
@@ -39,6 +39,7 @@
 #include <unistd.h>
 
 #include "local.h"
+#include "../locale/xlocale_private.h"
 
 static int
 __dwrite(void *cookie, const char *buf, int n)
@@ -66,7 +67,7 @@
 	f._cookie = &fd;
 	f._write = __dwrite;
 
-	if ((ret = __vfprintf(&f, fmt, ap)) < 0)
+	if ((ret = __vfprintf(&f, __get_locale(), fmt, ap)) < 0)
 		return ret;
 
 	return fflush(&f) ? EOF : ret;
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/vfprintf.c src/lib/libc/stdio/vfprintf.c
--- src54-x6/lib/libc/stdio/vfprintf.c	Wed Dec 11 21:53:32 2013
+++ src/lib/libc/stdio/vfprintf.c	Fri Dec 13 15:24:15 2013
@@ -60,6 +60,8 @@
 
 #include "fvwrite.h"
 #include "local.h"
+#include "../locale/mblocal.h"
+#include "../locale/xlocale_private.h"
 
 union arg {
 	int			intarg;
@@ -103,7 +105,7 @@
 };
 
 static int __find_arguments(const char *fmt0, va_list ap, union arg **argtable,
-    size_t *argtablesiz);
+    size_t *argtablesiz, locale_t locale);
 static int __grow_type_table(unsigned char **typetable, int *tablesize);
 
 /*
@@ -111,7 +113,7 @@
  * then reset it so that it can be reused.
  */
 static int
-__sprint(FILE *fp, struct __suio *uio)
+__sprint(FILE *fp, struct __suio *uio, locale_t locale)
 {
 	int err;
 
@@ -131,7 +133,7 @@
  * worries about ungetc buffers and so forth.
  */
 static int
-__sbprintf(FILE *fp, const char *fmt, va_list ap)
+__sbprintf(FILE *fp, locale_t locale, const char *fmt, va_list ap)
 {
 	int ret;
 	FILE fake;
@@ -151,7 +153,7 @@
 	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 
 	/* do the work, then copy any error status */
-	ret = __vfprintf(&fake, fmt, ap);
+	ret = __vfprintf(&fake, locale, fmt, ap);
 	if (ret >= 0 && __sflush(&fake))
 		ret = EOF;
 	if (fake._flags & __SERR)
@@ -276,30 +278,44 @@
 #define GROUPING	0x2000		/* largest integer size (intmax_t) */
 
 int
-vfprintf(FILE *fp, const char *fmt0, __va_list ap)
+vfprintf_l(FILE * __restrict fp, locale_t locale, const char * __restrict fmt0, va_list ap)
 {
 	int ret;
+	FIX_LOCALE(locale);
 
 	FLOCKFILE(fp);
-	ret = __vfprintf(fp, fmt0, ap);
+	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
+	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
+			fp->_file >= 0)
+		ret = __sbprintf(fp, locale, fmt0, ap);
+	else
+		ret = __vfprintf(fp, locale, fmt0, ap);
+
 	FUNLOCKFILE(fp);
 	return (ret);
 }
 
+int
+vfprintf(FILE * __restrict fp, const char * __restrict fmt0, va_list ap)
+{
+	return vfprintf_l(fp, __get_locale(), fmt0, ap);
+}
+ 
 
+
 /*
  * Initialize the thousands' grouping state in preparation to print a
  * number with ndigits digits. This routine returns the total number
  * of bytes that will be needed.
  */
 static int
-grouping_init(struct grouping_state *gs, int ndigits)
+grouping_init(struct grouping_state *gs, int ndigits, locale_t locale)
 {
-	struct lconv *locale;
+	struct lconv *lconv;
 
-	locale = localeconv();
-	gs->grouping = locale->grouping;
-	gs->thousands_sep = locale->thousands_sep;
+	lconv = localeconv_l(locale);
+	gs->grouping = lconv->grouping;
+	gs->thousands_sep = lconv->thousands_sep;
 	gs->thousep_len = strlen(gs->thousands_sep);
 
 	gs->nseps = gs->nrepeats = 0;
@@ -322,14 +338,14 @@
 
 char *
 __print_intdec(int flags, uintmax_t _umax, char *cp, 
-		struct grouping_state gs)
+		struct grouping_state gs, locale_t locale)
 {
 	const char *grp = NULL;	/* Size of next group of digits */
 	int ndig, i;
 
 	/* many numbers are 1 digit */
 	if (flags && GROUPING) {
-		grouping_init(&gs, 0);
+		grouping_init(&gs, 0, locale);
 		grp = gs.grouping;
 	} 
 	ndig = 0;
@@ -357,7 +373,7 @@
 }
 
 int
-__vfprintf(FILE *fp, const char *fmt0, __va_list ap)
+__vfprintf(FILE *fp, locale_t locale, const char *fmt0, __va_list ap)
 {
 	char *fmt;		/* format string */
 	int ch;			/* character from fmt */
@@ -387,7 +403,7 @@
 	 * D:	expchar holds this character; '\0' if no exponent, e.g. %f
 	 * F:	at least two digits for decimal, at least one digit for hex
 	 */
-	const char *decimal_point = nl_langinfo(RADIXCHAR);
+	const char *decimal_point = localeconv_l(locale)->decimal_point;
 	if (strlen(decimal_point) > 1) {
 		decimal_point = "."; // POSIX
 	}
@@ -449,7 +465,7 @@
 	uio.uio_resid += (len); \
 	iovp++; \
 	if (++uio.uio_iovcnt >= NIOV) { \
-		if (__sprint(fp, &uio)) \
+		if (__sprint(fp, &uio, locale)) \
 			goto error; \
 		iovp = iov; \
 	} \
@@ -472,7 +488,7 @@
 	PAD((len) - (n2 > 0 ? n2 : 0), (with));	\
 } while(0)
 #define	FLUSH() do { \
-	if (uio.uio_resid && __sprint(fp, &uio)) \
+	if (uio.uio_resid && __sprint(fp, &uio, locale)) \
 		goto error; \
 	uio.uio_iovcnt = 0; \
 	iovp = iov; \
@@ -549,7 +565,7 @@
 		int hold = nextarg; \
 		if (argtable == NULL) { \
 			argtable = statargtable; \
-			__find_arguments(fmt0, orgap, &argtable, &argtablesiz); \
+			__find_arguments(fmt0, orgap, &argtable, &argtablesiz, locale); \
 		} \
 		nextarg = n2; \
 		val = GETARG(int); \
@@ -575,11 +591,6 @@
 		return (EOF);
 	}
 
-	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
-	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
-	    fp->_file >= 0)
-		return (__sbprintf(fp, fmt0, ap));
-
 	fmt = (char *)fmt0;
 	argtable = NULL;
 	nextarg = 1;
@@ -598,7 +609,9 @@
 	 */
 	for (;;) {
 		cp = fmt;
-		while ((n = mbrtowc(&wc, fmt, MB_CUR_MAX, &ps)) > 0) {
+		while ((n = mbrtowc_l(&wc, fmt, 
+			XLOCALE_CTYPE(locale)->__mb_cur_max, 
+			&ps, locale)) > 0) {
 			fmt += n;
 			if (wc == '%') {
 				fmt--;
@@ -677,7 +690,7 @@
 				if (argtable == NULL) {
 					argtable = statargtable;
 					__find_arguments(fmt0, orgap,
-					    &argtable, &argtablesiz);
+					    &argtable, &argtablesiz, locale);
 				}
 				goto rflag;
 			}
@@ -703,7 +716,7 @@
 				if (argtable == NULL) {
 					argtable = statargtable;
 					__find_arguments(fmt0, orgap,
-					    &argtable, &argtablesiz);
+					    &argtable, &argtablesiz, locale);
 				}
 				goto rflag;
 			}
@@ -749,8 +762,8 @@
 				size_t mbseqlen;
 
 				memset(&mbs, 0, sizeof(mbs));
-				mbseqlen = wcrtomb(buf,
-				    (wchar_t)GETARG(wint_t), &mbs);
+				mbseqlen = wcrtomb_l(buf,
+				    (wchar_t)GETARG(wint_t), &mbs, locale);
 				if (mbseqlen == (size_t)-1) {
 					fp->_flags |= __SERR;
 					errno = EILSEQ;
@@ -911,7 +924,7 @@
 				if (prec || flags & ALT)
 					size += prec + 1;
 				if ((flags & GROUPING) && expt > 0) 
-					size += grouping_init(&gs, expt);
+					size += grouping_init(&gs, expt, locale);
 				lead = expt;
 			}
 			break;
@@ -1049,7 +1062,7 @@
 
 				case DEC:
 					cp = __print_intdec(flags, _umax, 
-							cp, gs);
+							cp, gs, locale);
 					break;
 
 				case HEX:
@@ -1250,7 +1263,7 @@
  */
 static int
 __find_arguments(const char *fmt0, va_list ap, union arg **argtable,
-    size_t *argtablesiz)
+    size_t *argtablesiz, locale_t locale)
 {
 	char *fmt;		/* format string */
 	int ch;			/* character from fmt */
@@ -1320,12 +1333,15 @@
 	memset(typetable, T_UNUSED, STATIC_ARG_TBL_SIZE);
 	memset(&ps, 0, sizeof(ps));
 
+	FIX_LOCALE(locale);
 	/*
 	 * Scan the format for conversions (`%' character).
 	 */
 	for (;;) {
 		cp = fmt;
-		while ((n = mbrtowc(&wc, fmt, MB_CUR_MAX, &ps)) > 0) {
+		while ((n = mbrtowc_l(&wc, fmt, 
+			XLOCALE_CTYPE(locale)->__mb_cur_max, 
+			&ps, locale)) > 0) {
 			fmt += n;
 			if (wc == '%') {
 				fmt--;
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/vfscanf.c src/lib/libc/stdio/vfscanf.c
--- src54-x6/lib/libc/stdio/vfscanf.c	Wed Dec 11 21:53:32 2013
+++ src/lib/libc/stdio/vfscanf.c	Fri Dec 13 15:26:11 2013
@@ -41,6 +41,8 @@
 #include <string.h>
 #include <wctype.h>
 #include "local.h"
+#include "../locale/mblocal.h"
+#include "../locale/xlocale_private.h"
 
 #ifdef FLOATING_POINT
 #include "floatio.h"
@@ -97,7 +99,7 @@
  * Internal, unlocked version of vfscanf
  */
 int
-__svfscanf(FILE *fp, const char *fmt0, __va_list ap)
+__svfscanf(FILE *fp, locale_t locale, const char *fmt0, __va_list ap)
 {
 	u_char *fmt = (u_char *)fmt0;
 	int c;		/* character from format, or conversion */
@@ -131,9 +133,9 @@
 		c = *fmt++;
 		if (c == 0)
 			return (nassigned);
-		if (isspace(c)) {
+		if (isspace_l(c, locale)) {
 			while ((fp->_r > 0 || __srefill(fp) == 0) &&
-			    isspace(*fp->_p))
+			    isspace_l(*fp->_p, locale))
 				nread++, fp->_r--, fp->_p++;
 			continue;
 		}
@@ -317,7 +319,7 @@
 		 * that suppress this.
 		 */
 		if ((flags & NOSKIP) == 0) {
-			while (isspace(*fp->_p)) {
+			while (isspace_l(*fp->_p, locale)) {
 				nread++;
 				if (--fp->_r > 0)
 					fp->_p++;
@@ -356,7 +358,8 @@
 					fp->_p++;
 					fp->_r--;
 					bzero(&mbs, sizeof(mbs));
-					nconv = mbrtowc(wcp, buf, n, &mbs);
+					nconv = XLOCALE_CTYPE(locale)->__mbrtowc(
+					    wcp, buf, n, &mbs);
 					if (nconv == (size_t)-1) {
 						fp->_flags |= __SERR;
 						goto input_failure;
@@ -438,7 +441,8 @@
 					fp->_p++;
 					fp->_r--;
 					bzero(&mbs, sizeof(mbs));
-					nconv = mbrtowc(wcp, buf, n, &mbs);
+					nconv = XLOCALE_CTYPE(locale)->__mbrtowc(
+					    wcp, buf, n, &mbs);
 					if (nconv == (size_t)-1) {
 						fp->_flags |= __SERR;
 						goto input_failure;
@@ -446,8 +450,8 @@
 					if (nconv == 0)
 						*wcp = L'\0';
 					if (nconv != (size_t)-2) {
-						if (wctob(*wcp) != EOF &&
-						    !ccltab[wctob(*wcp)]) {
+						int b = wctob_l(*wcp, locale);
+						if (b != EOF && !ccltab[b]) {
 							while (n != 0) {
 								n--;
 								ungetc(buf[n],
@@ -533,7 +537,7 @@
 				else
 					wcp = &twc;
 				n = 0;
-				while (!isspace(*fp->_p) && width != 0) {
+				while (!isspace_l(*fp->_p, locale) && width != 0) {
 					if (n == MB_CUR_MAX) {
 						fp->_flags |= __SERR;
 						goto input_failure;
@@ -542,7 +546,8 @@
 					fp->_p++;
 					fp->_r--;
 					bzero(&mbs, sizeof(mbs));
-					nconv = mbrtowc(wcp, buf, n, &mbs);
+					nconv = XLOCALE_CTYPE(locale)->__mbrtowc(
+					    wcp, buf, n, &mbs);
 					if (nconv == (size_t)-1) {
 						fp->_flags |= __SERR;
 						goto input_failure;
@@ -580,7 +585,7 @@
 #endif /* SCANF_WIDE_CHAR */
 			if (flags & SUPPRESS) {
 				n = 0;
-				while (!isspace(*fp->_p)) {
+				while (!isspace_l(*fp->_p, locale)) {
 					n++, fp->_r--, fp->_p++;
 					if (--width == 0)
 						break;
@@ -590,7 +595,7 @@
 				nread += n;
 			} else {
 				p0 = p = va_arg(ap, char *);
-				while (!isspace(*fp->_p)) {
+				while (!isspace_l(*fp->_p, locale)) {
 					fp->_r--;
 					*p++ = *fp->_p++;
 					if (--width == 0)
@@ -732,9 +737,9 @@
 
 				*p = '\0';
 				if (flags & UNSIGNED)
-					res = strtoumax(buf, NULL, base);
+					res = strtoumax_l(buf, NULL, base, locale);
 				else
-					res = strtoimax(buf, NULL, base);
+					res = strtoimax_l(buf, NULL, base, locale);
 				if (flags & POINTER)
 					*va_arg(ap, void **) =
 					    (void *)(uintptr_t)res;
@@ -771,7 +776,7 @@
 				width = sizeof(buf) - 2;
 			width++;
 #endif
-			decimal_point=localeconv()->decimal_point;
+			decimal_point=localeconv_l(locale)->decimal_point;
 			if (strlen(decimal_point) > 1) {
 				decimal_point="."; // POSIX
 			}
@@ -841,14 +846,14 @@
 			if ((flags & SUPPRESS) == 0) {
 				*p = '\0';
 				if (flags & LONGDBL) {
-					long double res = strtold(buf,
-					    (char **)NULL);
+					long double res = strtold_l(buf,
+					    (char **)NULL, locale);
 					*va_arg(ap, long double *) = res;
 				} else if (flags & LONG) {
-					double res = strtod(buf, (char **)NULL);
+					double res = strtod_l(buf, (char **)NULL, locale);
 					*va_arg(ap, double *) = res;
 				} else {
-					float res = strtof(buf, (char **)NULL);
+					float res = strtof_l(buf, (char **)NULL, locale);
 					*va_arg(ap, float *) = res;
 				}
 				nassigned++;
@@ -962,12 +967,22 @@
 }
 
 int
+vfscanf_l(FILE *fp, locale_t locale, const char *fmt0, __va_list ap)
+{
+	int r;
+
+	FLOCKFILE(fp);
+	r = __svfscanf(fp, locale, fmt0, ap);
+	FUNLOCKFILE(fp);
+	return (r);
+}
+int
 vfscanf(FILE *fp, const char *fmt0, __va_list ap)
 {
 	int r;
 
 	FLOCKFILE(fp);
-	r = __svfscanf(fp, fmt0, ap);
+	r = __svfscanf(fp, __get_locale(), fmt0, ap);
 	FUNLOCKFILE(fp);
 	return (r);
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/vsnprintf.c src/lib/libc/stdio/vsnprintf.c
--- src54-x6/lib/libc/stdio/vsnprintf.c	Tue Nov 10 11:28:49 2009
+++ src/lib/libc/stdio/vsnprintf.c	Tue Dec  3 16:12:45 2013
@@ -35,9 +35,10 @@
 #include <stdio.h>
 #include <string.h>
 #include "local.h"
+#include "../locale/xlocale_private.h"
 
 int
-vsnprintf(char *str, size_t n, const char *fmt, __va_list ap)
+vsnprintf_l(char *str, size_t n, locale_t locale, const char *fmt, __va_list ap)
 {
 	int ret;
 	char dummy;
@@ -58,7 +59,14 @@
 	f._flags = __SWR | __SSTR;
 	f._bf._base = f._p = (unsigned char *)str;
 	f._bf._size = f._w = n - 1;
-	ret = __vfprintf(&f, fmt, ap);
+	ret = __vfprintf(&f, locale, fmt, ap);
 	*f._p = '\0';
 	return (ret);
 }
+int
+vsnprintf(char * __restrict str, size_t n, const char * __restrict fmt,
+    __va_list ap)
+{
+	return vsnprintf_l(str, n, __get_locale(), fmt, ap);
+}
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/vsprintf.c src/lib/libc/stdio/vsprintf.c
--- src54-x6/lib/libc/stdio/vsprintf.c	Tue Nov 10 11:28:49 2009
+++ src/lib/libc/stdio/vsprintf.c	Tue Dec  3 16:12:45 2013
@@ -35,6 +35,7 @@
 #include <string.h>
 #include <limits.h>
 #include "local.h"
+#include "../locale/xlocale_private.h"
 
 #if defined(APIWARN)
 __warn_references(vsprintf,
@@ -42,7 +43,7 @@
 #endif
 
 int
-vsprintf(char *str, const char *fmt, __va_list ap)
+vsprintf_l(char *str, locale_t locale, const char *fmt, __va_list ap)
 {
 	int ret;
 	FILE f;
@@ -53,7 +54,13 @@
 	f._flags = __SWR | __SSTR;
 	f._bf._base = f._p = (unsigned char *)str;
 	f._bf._size = f._w = INT_MAX;
-	ret = __vfprintf(&f, fmt, ap);
+	ret = __vfprintf(&f, locale, fmt, ap);
 	*f._p = '\0';
 	return (ret);
 }
+int
+vsprintf(char * __restrict str, const char * __restrict fmt, __va_list ap)
+{
+	return vsprintf_l(str, __get_locale(), fmt, ap);
+}
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/vsscanf.c src/lib/libc/stdio/vsscanf.c
--- src54-x6/lib/libc/stdio/vsscanf.c	Mon Nov 14 23:11:36 2011
+++ src/lib/libc/stdio/vsscanf.c	Tue Dec  3 16:12:45 2013
@@ -34,6 +34,7 @@
 #include <stdio.h>
 #include <string.h>
 #include "local.h"
+#include "../locale/xlocale_private.h"
 
 /* ARGSUSED */
 static int
@@ -55,5 +56,5 @@
 	f._bf._size = f._r = strlen(str);
 	f._read = eofread;
 	f._lb._base = NULL;
-	return (__svfscanf(&f, fmt, ap));
+	return (__svfscanf(&f, __get_locale(), fmt, ap));
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdlib/strtoimax.c src/lib/libc/stdlib/strtoimax.c
--- src54-x6/lib/libc/stdlib/strtoimax.c	Fri Jan 13 12:58:09 2006
+++ src/lib/libc/stdlib/strtoimax.c	Tue Dec  3 16:12:45 2013
@@ -31,6 +31,7 @@
 
 #include <ctype.h>
 #include <errno.h>
+#include "../locale/xlocale_private.h"
 #include <inttypes.h>
 
 /*
@@ -40,12 +41,14 @@
  * alphabets and digits are each contiguous.
  */
 intmax_t
-strtoimax(const char *nptr, char **endptr, int base)
+strtoimax_l(const char * __restrict nptr, char ** __restrict endptr, int base,
+    locale_t locale)
 {
 	const char *s;
 	intmax_t acc, cutoff;
 	int c;
 	int neg, any, cutlim;
+	FIX_LOCALE(locale);
 
 	/*
 	 * Skip white space and pick up leading +/- sign if any.
@@ -55,7 +58,7 @@
 	s = nptr;
 	do {
 		c = (unsigned char) *s++;
-	} while (isspace(c));
+	} while (isspace_l(c, locale));
 	if (c == '-') {
 		neg = 1;
 		c = *s++;
@@ -138,3 +141,9 @@
 		*endptr = (char *) (any ? s - 1 : nptr);
 	return (acc);
 }
+intmax_t
+strtoimax(const char * __restrict nptr, char ** __restrict endptr, int base)
+{
+	return strtoimax_l(nptr, endptr, base, __get_locale());
+}
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdlib/strtol.c src/lib/libc/stdlib/strtol.c
--- src54-x6/lib/libc/stdlib/strtol.c	Sat Apr 27 21:08:40 2013
+++ src/lib/libc/stdlib/strtol.c	Tue Dec  3 16:12:45 2013
@@ -32,6 +32,7 @@
 #include <errno.h>
 #include <limits.h>
 #include <stdlib.h>
+#include "../locale/xlocale_private.h"
 
 
 /*
@@ -41,12 +42,13 @@
  * alphabets and digits are each contiguous.
  */
 long
-strtol(const char *nptr, char **endptr, int base)
+strtol_l(const char *nptr, char **endptr, int base, locale_t locale)
 {
 	const char *s;
 	long acc, cutoff;
 	int c;
 	int neg, any, cutlim;
+	FIX_LOCALE(locale);
 
 	/*
 	 * Ensure that base is between 2 and 36 inclusive, or the special
@@ -67,7 +69,7 @@
 	s = nptr;
 	do {
 		c = (unsigned char) *s++;
-	} while (isspace(c));
+	} while (isspace_l(c, locale));
 	if (c == '-') {
 		neg = 1;
 		c = *s++;
@@ -148,4 +150,14 @@
 	if (endptr != 0)
 		*endptr = (char *) (any ? s - 1 : nptr);
 	return (acc);
+}
+long
+strtol(const char * __restrict nptr, char ** __restrict endptr, int base)
+{
+	return strtol_l(nptr, endptr, base, __get_locale());
+}
+long double
+strtold(const char * __restrict nptr, char ** __restrict endptr)
+{
+	return strtold_l(nptr, endptr, __get_locale());
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdlib/strtoll.c src/lib/libc/stdlib/strtoll.c
--- src54-x6/lib/libc/stdlib/strtoll.c	Fri Mar 29 21:13:47 2013
+++ src/lib/libc/stdlib/strtoll.c	Tue Dec  3 16:12:45 2013
@@ -34,6 +34,7 @@
 #include <errno.h>
 #include <limits.h>
 #include <stdlib.h>
+#include "../locale/xlocale_private.h"
 
 /*
  * Convert a string to a long long.
@@ -42,12 +43,13 @@
  * alphabets and digits are each contiguous.
  */
 long long
-strtoll(const char *nptr, char **endptr, int base)
+strtoll_l(const char *nptr, char **endptr, int base, locale_t locale)
 {
 	const char *s;
 	long long acc, cutoff;
 	int c;
 	int neg, any, cutlim;
+	FIX_LOCALE(locale);
 
 	/*
 	 * Skip white space and pick up leading +/- sign if any.
@@ -57,7 +59,7 @@
 	s = nptr;
 	do {
 		c = (unsigned char) *s++;
-	} while (isspace(c));
+	} while (isspace_l(c, locale));
 	if (c == '-') {
 		neg = 1;
 		c = *s++;
@@ -139,6 +141,11 @@
 	if (endptr != 0)
 		*endptr = (char *) (any ? s - 1 : nptr);
 	return (acc);
+}
+long long
+strtoll(const char * __restrict nptr, char ** __restrict endptr, int base)
+{
+	return strtoll_l(nptr, endptr, base, __get_locale());
 }
 
 __strong_alias(strtoq, strtoll);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdlib/strtoul.c src/lib/libc/stdlib/strtoul.c
--- src54-x6/lib/libc/stdlib/strtoul.c	Sat Apr 27 21:08:40 2013
+++ src/lib/libc/stdlib/strtoul.c	Tue Dec  3 16:12:45 2013
@@ -32,6 +32,7 @@
 #include <errno.h>
 #include <limits.h>
 #include <stdlib.h>
+#include "../locale/xlocale_private.h"
 
 /*
  * Convert a string to an unsigned long integer.
@@ -40,12 +41,13 @@
  * alphabets and digits are each contiguous.
  */
 unsigned long
-strtoul(const char *nptr, char **endptr, int base)
+strtoul_l(const char *nptr, char **endptr, int base, locale_t locale)
 {
 	const char *s;
 	unsigned long acc, cutoff;
 	int c;
 	int neg, any, cutlim;
+	FIX_LOCALE(locale);
 
 	/*
 	 * See strtol for comments as to the logic used.
@@ -53,7 +55,7 @@
 	s = nptr;
 	do {
 		c = (unsigned char) *s++;
-	} while (isspace(c));
+	} while (isspace_l(c, locale));
 	if (c == '-') {
 		neg = 1;
 		c = *s++;
@@ -100,3 +102,9 @@
 		*endptr = (char *) (any ? s - 1 : nptr);
 	return (acc);
 }
+unsigned long
+strtoul(const char * __restrict nptr, char ** __restrict endptr, int base)
+{
+	return strtoul_l(nptr, endptr, base, __get_locale());
+}
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdlib/strtoull.c src/lib/libc/stdlib/strtoull.c
--- src54-x6/lib/libc/stdlib/strtoull.c	Fri Mar 29 21:13:47 2013
+++ src/lib/libc/stdlib/strtoull.c	Tue Dec  3 16:12:45 2013
@@ -34,6 +34,7 @@
 #include <errno.h>
 #include <limits.h>
 #include <stdlib.h>
+#include "../locale/xlocale_private.h"
 
 /*
  * Convert a string to an unsigned long long.
@@ -42,12 +43,13 @@
  * alphabets and digits are each contiguous.
  */
 unsigned long long
-strtoull(const char *nptr, char **endptr, int base)
+strtoull_l(const char *nptr, char **endptr, int base, locale_t locale)
 {
 	const char *s;
 	unsigned long long acc, cutoff;
 	int c;
 	int neg, any, cutlim;
+	FIX_LOCALE(locale);
 
 	/*
 	 * See strtoq for comments as to the logic used.
@@ -55,7 +57,7 @@
 	s = nptr;
 	do {
 		c = (unsigned char) *s++;
-	} while (isspace(c));
+	} while (isspace_l(c, locale));
 	if (c == '-') {
 		neg = 1;
 		c = *s++;
@@ -101,6 +103,11 @@
 	if (endptr != 0)
 		*endptr = (char *) (any ? s - 1 : nptr);
 	return (acc);
+}
+unsigned long long
+strtoull(const char * __restrict nptr, char ** __restrict endptr, int base)
+{
+	return strtoull_l(nptr, endptr, base, __get_locale());
 }
 
 __strong_alias(strtouq, strtoull);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdlib/strtoumax.c src/lib/libc/stdlib/strtoumax.c
--- src54-x6/lib/libc/stdlib/strtoumax.c	Fri Jan 13 12:58:09 2006
+++ src/lib/libc/stdlib/strtoumax.c	Tue Dec  3 16:12:45 2013
@@ -31,6 +31,7 @@
 
 #include <ctype.h>
 #include <errno.h>
+#include "../locale/xlocale_private.h"
 #include <inttypes.h>
 
 /*
@@ -40,12 +41,13 @@
  * alphabets and digits are each contiguous.
  */
 uintmax_t
-strtoumax(const char *nptr, char **endptr, int base)
+strtoumax_l(const char *nptr, char **endptr, int base, locale_t locale)
 {
 	const char *s;
 	uintmax_t acc, cutoff;
 	int c;
 	int neg, any, cutlim;
+	FIX_LOCALE(locale);
 
 	/*
 	 * See strtoq for comments as to the logic used.
@@ -53,7 +55,7 @@
 	s = nptr;
 	do {
 		c = (unsigned char) *s++;
-	} while (isspace(c));
+	} while (isspace_l(c, locale));
 	if (c == '-') {
 		neg = 1;
 		c = *s++;
@@ -100,3 +102,9 @@
 		*endptr = (char *) (any ? s - 1 : nptr);
 	return (acc);
 }
+uintmax_t
+strtoumax(const char * __restrict nptr, char ** __restrict endptr, int base)
+{
+	return strtoumax_l(nptr, endptr, base, __get_locale());
+}
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/time/strftime.c src/lib/libc/time/strftime.c
--- src54-x6/lib/libc/time/strftime.c	Sat Feb  9 14:26:54 2013
+++ src/lib/libc/time/strftime.c	Tue Dec  3 16:12:45 2013
@@ -33,13 +33,14 @@
 #include <sys/localedef.h>
 
 #include "fcntl.h"
-#include "locale.h"
 #include "tzfile.h"
 
+#include "locale/xlocale_private.h"
+
 static char *	_add(const char *, char *, const char *);
 static char *	_conv(int, const char *, char *, const char *);
 static char *	_fmt(const char *, const struct tm *, char *, const char *,
-			int *);
+			int *, locale_t);
 static char *	_yconv(int, int, int, int, char *, const char *);
 
 extern char *	tzname[];
@@ -54,32 +55,31 @@
 #define IN_ALL	3
 
 size_t
-strftime(s, maxsize, format, t)
-char * const		s;
-const size_t		maxsize;
-const char * const	format;
-const struct tm * const	t;
+strftime_l(char * const __restrict s, const size_t maxsize, 
+    const char * __restrict format, const struct tm * __restrict t, 
+    locale_t loc)
 {
 	char *	p;
 	int	warn;
+	FIX_LOCALE(loc);
 
 	tzset();
 	warn = IN_NONE;
-	p = _fmt(((format == NULL) ? "%c" : format), t, s, s + maxsize, &warn);
+	p = _fmt(((format == NULL) ? "%c" : format), t, s, s + maxsize, &warn, loc);
 #ifndef NO_RUN_TIME_WARNINGS_ABOUT_YEAR_2000_PROBLEMS_THANK_YOU
 	if (warn != IN_NONE && getenv(YEAR_2000_NAME) != NULL) {
 		(void) fprintf(stderr, "\n");
 		if (format == NULL)
-			(void) fprintf(stderr, "NULL strftime format ");
-		else	(void) fprintf(stderr, "strftime format \"%s\" ",
+			(void) fprintf_l(stderr, loc, "NULL strftime format ");
+		else	(void) fprintf_l(stderr, loc, "strftime format \"%s\" ",
 				format);
-		(void) fprintf(stderr, "yields only two digits of years in ");
+		(void) fprintf_l(stderr, loc, "yields only two digits of years in ");
 		if (warn == IN_SOME)
-			(void) fprintf(stderr, "some locales");
+			(void) fprintf_l(stderr, loc, "some locales");
 		else if (warn == IN_THIS)
-			(void) fprintf(stderr, "the current locale");
-		else	(void) fprintf(stderr, "all locales");
-		(void) fprintf(stderr, "\n");
+			(void) fprintf_l(stderr, loc, "the current locale");
+		else	(void) fprintf_l(stderr, loc, "all locales");
+		(void) fprintf_l(stderr, "\n");
 	}
 #endif /* !defined NO_RUN_TIME_WARNINGS_ABOUT_YEAR_2000_PROBLEMS_THANK_YOU */
 	if (p == s + maxsize) {
@@ -90,14 +90,21 @@
 	*p = '\0';
 	return p - s;
 }
+size_t
+strftime(char * const __restrict s, const size_t maxsize, 
+    const char * __restrict format, const struct tm * __restrict t)
+{
+	return strftime_l(s, maxsize, format, t, __get_locale());
+}
 
 static char *
-_fmt(format, t, pt, ptlim, warnp)
+_fmt(format, t, pt, ptlim, warnp, loc)
 const char *		format;
 const struct tm * const	t;
 char *			pt;
 const char * const	ptlim;
 int *			warnp;
+locale_t	loc;
 {
 	for ( ; *format; ++format) {
 		if (*format == '%') {
@@ -146,7 +153,7 @@
 				{
 				int warn2 = IN_SOME;
 
-				pt = _fmt(_CurrentTimeLocale->d_t_fmt, t, pt, ptlim, &warn2);
+				pt = _fmt(_CurrentTimeLocale->d_t_fmt, t, pt, ptlim, &warn2, loc);
 				if (warn2 == IN_ALL)
 					warn2 = IN_THIS;
 				if (warn2 > *warnp)
@@ -154,7 +161,7 @@
 				}
 				continue;
 			case 'D':
-				pt = _fmt("%m/%d/%y", t, pt, ptlim, warnp);
+				pt = _fmt("%m/%d/%y", t, pt, ptlim, warnp, loc);
 				continue;
 			case 'd':
 				pt = _conv(t->tm_mday, "%02d", pt, ptlim);
@@ -175,7 +182,7 @@
 				pt = _conv(t->tm_mday, "%2d", pt, ptlim);
 				continue;
 			case 'F':
-				pt = _fmt("%Y-%m-%d", t, pt, ptlim, warnp);
+				pt = _fmt("%Y-%m-%d", t, pt, ptlim, warnp, loc);
 				continue;
 			case 'H':
 				pt = _conv(t->tm_hour, "%02d", pt, ptlim);
@@ -239,10 +246,10 @@
 					pt, ptlim);
 				continue;
 			case 'R':
-				pt = _fmt("%H:%M", t, pt, ptlim, warnp);
+				pt = _fmt("%H:%M", t, pt, ptlim, warnp, loc);
 				continue;
 			case 'r':
-				pt = _fmt(_CurrentTimeLocale->t_fmt_ampm, t, pt, ptlim, warnp);
+				pt = _fmt(_CurrentTimeLocale->t_fmt_ampm, t, pt, ptlim, warnp, loc);
 				continue;
 			case 'S':
 				pt = _conv(t->tm_sec, "%02d", pt, ptlim);
@@ -265,7 +272,7 @@
 				}
 				continue;
 			case 'T':
-				pt = _fmt("%H:%M:%S", t, pt, ptlim, warnp);
+				pt = _fmt("%H:%M:%S", t, pt, ptlim, warnp, loc);
 				continue;
 			case 't':
 				pt = _add("\t", pt, ptlim);
@@ -380,7 +387,7 @@
 				** "date as dd-bbb-YYYY"
 				** (ado, 1993-05-24)
 				*/
-				pt = _fmt("%e-%b-%Y", t, pt, ptlim, warnp);
+				pt = _fmt("%e-%b-%Y", t, pt, ptlim, warnp, loc);
 				continue;
 			case 'W':
 				pt = _conv((t->tm_yday + DAYSPERWEEK -
@@ -393,13 +400,13 @@
 				pt = _conv(t->tm_wday, "%d", pt, ptlim);
 				continue;
 			case 'X':
-				pt = _fmt(_CurrentTimeLocale->t_fmt, t, pt, ptlim, warnp);
+				pt = _fmt(_CurrentTimeLocale->t_fmt, t, pt, ptlim, warnp, loc);
 				continue;
 			case 'x':
 				{
 				int	warn2 = IN_SOME;
 
-				pt = _fmt(_CurrentTimeLocale->d_fmt, t, pt, ptlim, &warn2);
+				pt = _fmt(_CurrentTimeLocale->d_fmt, t, pt, ptlim, &warn2, loc);
 				if (warn2 == IN_ALL)
 					warn2 = IN_THIS;
 				if (warn2 > *warnp)
@@ -485,7 +492,7 @@
 				continue;
 			case '+':
 				pt = _fmt(_CurrentTimeLocale->date_fmt, t, pt, ptlim,
-					warnp);
+					warnp, loc);
 				continue;
 			case '%':
 			/*
diff -ruN src54-x6/lib/libc/stdlib/strfmon.3 src/lib/libc/stdlib/strfmon.3
--- src54-x6/lib/libc/stdlib/strfmon.3	Tue Dec 10 06:14:08 2013
+++ src/lib/libc/stdlib/strfmon.3	Wed Dec 11 04:35:17 2013
@@ -38,6 +38,9 @@
 .In monetary.h
 .Ft ssize_t
 .Fn strfmon "char * restrict s" "size_t maxsize" "const char * restrict format" "..."
+.In xlocale.h
+.Ft ssize_t
+.Fn strfmon_l "char * restrict s" "size_t maxsize" "locale_t loc" "const char * restrict format" "..."
 .\" ----------------------------------------------------------------------
 .Sh DESCRIPTION
 The
@@ -50,6 +53,12 @@
 .Fa maxsize
 bytes are placed into the array.
 .Pp
+The
+.Fn strfmon_l
+function does the same as
+.Fn strfmon
+but takes an explicit locale rather than using the current locale.
+.Pp
 The format string is composed of zero or more directives:
 ordinary characters (not
 .Cm % ) ,
@@ -115,6 +124,7 @@
 .Sq Li %
 character is written.
 .El
+.El
 .\" ----------------------------------------------------------------------
 .Sh RETURN VALUES
 If the total number of resulting bytes including the terminating
@@ -132,6 +142,11 @@
 and
 .Va errno
 is set to indicate the error.
+.Pp
+The
+.Fn strfmon_l
+function returns the same values as
+.Fn strfmon .
 .\" ----------------------------------------------------------------------
 .Sh ERRORS
 The
@@ -155,6 +170,11 @@
 function
 conforms to
 .St -p1003.1-2001 .
+The
+.Fn strfmon_l
+function conforms to
+.St -p1003.1-2008 .
+.\" ----------------------------------------------------------------------
 .Sh AUTHORS
 .An -nosplit
 The
diff -ruN src54-x6/lib/libc/stdlib/strfmon.c src/lib/libc/stdlib/strfmon.c
--- src54-x6/lib/libc/stdlib/strfmon.c	Tue Dec 10 06:14:10 2013
+++ src/lib/libc/stdlib/strfmon.c	Wed Dec 11 04:46:41 2013
@@ -42,7 +42,10 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <xlocale.h>
 
+#include "../locale/xlocale_private.h"
+
 /* internal flags */
 #define	NEED_GROUPING		0x01	/* print digits grouped (default) */
 #define	SIGN_POSN_USED		0x02	/* '+' or '(' usage flag */
@@ -92,12 +95,12 @@
 	groups++;						\
 } while (0)
 
-static void __setup_vars(int, char *, char *, char *, char **);
-static int __calc_left_pad(int, char *);
-static char *__format_grouped_double(double, int *, int, int, int);
+static void __setup_vars_l(int, char *, char *, char *, char **, locale_t);
+static int __calc_left_pad_l(int, char *, locale_t);
+static char *__format_grouped_double_l(double, int *, int, int, int, locale_t);
 
 static ssize_t
-vstrfmon(char * __restrict s, size_t maxsize, 
+vstrfmon_l(char * __restrict s, size_t maxsize, locale_t locale,
 		const char * __restrict format, va_list ap)
 {
 	char 		*dst;		/* output destination pointer */
@@ -123,8 +126,8 @@
 	char		*tmpptr;	/* temporary vars */
 	int		sverrno;
 
-
-	lc = localeconv();
+	FIX_LOCALE(locale);
+	lc = localeconv_l(locale);
 	dst = s;
 	fmt = format;
 	asciivalue = NULL;
@@ -252,24 +255,25 @@
 
 		/* fill left_prec with amount of padding chars */
 		if (left_prec >= 0) {
-			pad_size = __calc_left_pad((flags ^ IS_NEGATIVE),
-							currency_symbol) -
-				   __calc_left_pad(flags, currency_symbol);
+			pad_size = __calc_left_pad_l((flags ^ IS_NEGATIVE),
+					currency_symbol, locale) -
+				__calc_left_pad_l(flags, currency_symbol,
+						locale);
 			if (pad_size < 0)
 				pad_size = 0;
 		}
 
 		if (asciivalue != NULL)
 			free(asciivalue);
-		asciivalue = __format_grouped_double(value, &flags,
-				left_prec, right_prec, pad_char);
+		asciivalue = __format_grouped_double_l(value, &flags,
+				left_prec, right_prec, pad_char, locale);
 		if (asciivalue == NULL)
 			goto end_error;		/* errno already set     */
 						/* to ENOMEM by malloc() */
 
 		/* set some variables for later use */
-		__setup_vars(flags, &cs_precedes, &sep_by_space,
-				&sign_posn, &signstr);
+		__setup_vars_l(flags, &cs_precedes, &sep_by_space,
+				&sign_posn, &signstr, locale);
 
 		/*
 		 * Description of some LC_MONETARY's values:
@@ -402,23 +406,35 @@
 	errno = sverrno;
 	return (-1);
 }
+
 ssize_t
+strfmon_l(char * __restrict s, size_t maxsize, locale_t locale, 
+		const char * __restrict format, ...)
+{
+	size_t ret;
+	va_list ap;
+	va_start(ap, format);
+	ret = vstrfmon_l(s, maxsize, locale, format, ap);
+	va_end(ap);
+	return ret;
+}
+ssize_t
 strfmon(char * __restrict s, size_t maxsize, const char * __restrict format,
     ...)
 {
 	size_t ret;
 	va_list ap;
 	va_start(ap, format);
-	ret = vstrfmon(s, maxsize, format, ap);
+	ret = vstrfmon_l(s, maxsize, __get_locale(), format, ap);
 	va_end(ap);
 	return ret;
 }
 
 static void
-__setup_vars(int flags, char *cs_precedes, char *sep_by_space,
-		char *sign_posn, char **signstr) {
+__setup_vars_l(int flags, char *cs_precedes, char *sep_by_space,
+		char *sign_posn, char **signstr, locale_t locale) {
 
-	struct lconv *lc = localeconv();
+	struct lconv *lc = localeconv_l(locale);
 
 	if ((flags & IS_NEGATIVE) && (flags & USE_INTL_CURRENCY)) {
 		*cs_precedes = lc->int_n_cs_precedes;
@@ -454,12 +470,13 @@
 }
 
 static int
-__calc_left_pad(int flags, char *cur_symb) {
+__calc_left_pad_l(int flags, char *cur_symb, locale_t locale) {
 
 	char cs_precedes, sep_by_space, sign_posn, *signstr;
 	int left_chars = 0;
 
-	__setup_vars(flags, &cs_precedes, &sep_by_space, &sign_posn, &signstr);
+	__setup_vars_l(flags, &cs_precedes, &sep_by_space, &sign_posn, 
+			&signstr, locale);
 
 	if (cs_precedes != 0) {
 		left_chars += strlen(cur_symb);
@@ -504,8 +521,9 @@
 
 /* convert double to ASCII */
 static char *
-__format_grouped_double(double value, int *flags,
-			int left_prec, int right_prec, int pad_char) {
+__format_grouped_double_l(double value, int *flags,
+			int left_prec, int right_prec, int pad_char, 
+			locale_t locale) {
 
 	char		*rslt;
 	char		*avalue;
@@ -517,7 +535,7 @@
 
 	int		padded;
 
-	struct lconv	*lc = localeconv();
+	struct lconv	*lc = localeconv_l(locale);
 	char		*grouping;
 	char		decimal_point;
 	char		thousands_sep;
@@ -553,7 +571,7 @@
 	/* convert to string */
 	snprintf(fmt, sizeof(fmt), "%%%d.%df", left_prec + right_prec + 1,
 	    right_prec);
-	avalue_size = asprintf(&avalue, fmt, value);
+	avalue_size = asprintf_l(&avalue, locale, fmt, value);
 	if (avalue_size < 0)
 		return (NULL);
 
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src55-orig/lib/libc/stdlib/strtod.3 src/lib/libc/time/strtod.3
--- src55-orig/lib/libc/stdlib/strtod.3	Thu Apr  3 13:00:44 2014
+++ src/lib/libc/stdlib/strtod.3	Thu Apr  3 13:04:01 2014
@@ -36,8 +36,11 @@
 .Os
 .Sh NAME
 .Nm strtod ,
+.Nm strtod_l ,
 .Nm strtof ,
-.Nm strtold
+.Nm strtof_l ,
+.Nm strtold ,
+.Nm strtold_l
 .Nd convert ASCII string to double, float or long double
 .Sh SYNOPSIS
 .In stdlib.h
@@ -49,24 +52,39 @@
 .Pp
 .Ft long double
 .Fn strtold "const char *nptr" "char **endptr"
+.In xlocale.h
+.Ft double
+.Fn strtod_l "const char *nptr" "char **endptr" "locale_t loc"
+.Pp
+.Ft float
+.Fn strtof_l "const char *nptr" "char **endptr" "locale_t loc"
+.Pp
+.Ft long double
+.Fn strtold_l "const char *nptr" "char **endptr" "locale_t loc"
 .Sh DESCRIPTION
 The
 .Fn strtod
-function converts the initial portion of the string pointed to by
+and
+.Fn strtod_l
+functions convert the initial portion of the string pointed to by
 .Fa nptr
 to
 .Li double
 representation.
 The
 .Fn strtof
-function converts the initial portion of the string pointed to by
+and
+.Fn strtof_l
+functions convert the initial portion of the string pointed to by
 .Fa nptr
 to
 .Li float
 representation.
 The
 .Fn strtold
-function converts the initial portion of the string pointed to by
+and
+.Fn strtold_l
+functions convert the initial portion of the string pointed to by
 .Fa nptr
 to
 .Li long double
@@ -115,6 +133,22 @@
 string (as defined by the
 .Xr isspace 3
 function) are skipped.
+.Pp
+The behaviour of
+.Fn strtod ,
+.Fn strtof
+and
+.Fn strtold
+is affected by the
+.Dv LC_NUMERIC
+category of the current locale. While the behavior of
+.Fn strtod_l ,
+.Fn strtof_l
+and
+.Fn strtold_l
+depends on the
+.Dv LC_NUMERIC
+category of the provided locale.
 .Sh RETURN VALUES
 The
 .Fn strtod ,
diff -ruN src54-x6/lib/libc/locale/nl_langinfo.c src/lib/libc/locale/nl_langinfo.c
--- src54-x6/lib/libc/locale/nl_langinfo.c	Wed Dec 11 08:11:54 2013
+++ src/lib/libc/locale/nl_langinfo.c	Fri Dec 13 15:42:55 2013
@@ -5,19 +5,23 @@
  */
 
 #include <sys/localedef.h>
+
+#include <langinfo.h>
 #include <locale.h>
 #include <nl_types.h>
-#include <langinfo.h>
+#include <xlocale.h>
+
 #include "rune.h"
 #include "runetype.h"
+#include "xlocale_private.h"
 
-static char _bufcrncystr[16];
-
 char *
-nl_langinfo(nl_item item)
+nl_langinfo_l(nl_item item, locale_t locale)
 {
 	const char *s;
-
+	FIX_LOCALE(locale); 
+	struct lconv *lc = &locale->lconv;
+	
 	switch (item) {
 	case D_T_FMT:
 		s = _CurrentTimeLocale->d_t_fmt;
@@ -82,10 +86,10 @@
 		s = _CurrentTimeLocale->abmon[item - ABMON_1];
 		break;
 	case RADIXCHAR:
-		s = _CurrentNumericLocale->decimal_point;
+		s = lc->decimal_point;
 		break;
 	case THOUSEP:
-		s = _CurrentNumericLocale->thousands_sep;
+		s = lc->thousands_sep;
 		break;
 	case YESSTR:
 		s = _CurrentMessagesLocale->yesstr;
@@ -100,19 +104,19 @@
 		s = _CurrentMessagesLocale->noexpr;
 		break;
 	case CRNCYSTR:				
-		_bufcrncystr[0] = '\0';
+		locale->_bufcrncystr[0] = '\0';
 		
-		if (_CurrentMonetaryLocale->currency_symbol[0] != '\0' 
-			&& _CurrentMonetaryLocale->p_cs_precedes == _CurrentMonetaryLocale->n_cs_precedes) {
-			if (_CurrentMonetaryLocale->p_cs_precedes == 1) {
-				strlcat(_bufcrncystr, "-", sizeof(_bufcrncystr));
+		if (lc->currency_symbol[0] != '\0' 
+			&& lc->p_cs_precedes == lc->n_cs_precedes) {
+			if (lc->p_cs_precedes == 1) {
+				strlcat(locale->_bufcrncystr, "-", sizeof(locale->_bufcrncystr));
 			} else {
-				strlcat(_bufcrncystr, "+", sizeof(_bufcrncystr));
+				strlcat(locale->_bufcrncystr, "+", sizeof(locale->_bufcrncystr));
 			}
 		}
-		strlcat(_bufcrncystr, _CurrentMonetaryLocale->currency_symbol, 
-				sizeof(_bufcrncystr));
-		s = _bufcrncystr;
+		strlcat(locale->_bufcrncystr, lc->currency_symbol, 
+				sizeof(locale->_bufcrncystr));
+		s = locale->_bufcrncystr;
 		break;
 	case CODESET:
 		s = _CurrentRuneLocale->rl_codeset;
@@ -125,4 +129,10 @@
 	}
 
 	return (char *) s;
+}
+
+char *
+nl_langinfo(nl_item item)
+{
+	return nl_langinfo_l(item, __get_locale());
 }
diff -ruN src54-x6/regress/lib/libc/locale/check_xlocale/check_xlocale.c src/regress/lib/libc/locale/check_xlocale/check_xlocale.c
--- src54-x6/regress/lib/libc/locale/check_xlocale/check_xlocale.c	Wed Dec 11 22:07:06 2013
+++ src/regress/lib/libc/locale/check_xlocale/check_xlocale.c	Fri Dec 13 15:25:23 2013
@@ -8,8 +8,10 @@
 
 #include <ctype.h>
 #include <inttypes.h>
+#include <float.h>
 #include <langinfo.h>
 #include <locale.h>
+#include <math.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -410,12 +412,94 @@
 	p(wcsncasecmp_l(L"n", L"N", 1, es_CO_UTF_8) == 0);
 }
 
+void test_monetary() 
+{
+	struct lconv *p;
+	char col[256];
+	char *nl = setlocale(LC_ALL, "es_CO.UTF-8");
+	locale_t tloc = uselocale(NULL);
+	locale_t es_CO_UTF_8 = duplocale(tloc);
+	setlocale(LC_ALL, "POSIX");
+	p = localeconv_l(es_CO_UTF_8);
+	p(strcmp(p->int_curr_symbol, "COP ") == 0);
+	p(strcmp(p->currency_symbol, "$") == 0);
+	printf("CRNCYSTR=%s\n", nl_langinfo_l(CRNCYSTR, es_CO_UTF_8));
+	p(strcmp(nl_langinfo_l(CRNCYSTR, es_CO_UTF_8), "-$") == 0);
+	p(strcmp(p->mon_decimal_point, ",") == 0);
+	p(strcmp(p->mon_thousands_sep, ".") == 0);
+	p(p->mon_grouping[0] == 3);
+	p(strcmp(p->positive_sign, "") == 0);
+	p(strcmp(p->negative_sign, "-") == 0);
+	p(p->int_frac_digits == 2);
+	p(p->frac_digits == 2);
+	p(p->p_cs_precedes == 1);
+	p(p->p_sep_by_space == 1);
+	p(p->n_cs_precedes == 1);
+	p(p->n_sep_by_space == 1);
+	p(p->p_sign_posn == 1);
+	p(p->n_sign_posn == 1);
+	p(p->int_p_cs_precedes == 1);
+	p(p->int_n_cs_precedes == 1);
+	p(p->int_n_sep_by_space == 1);
+	p(p->int_p_sep_by_space == 1);
+	p(p->int_p_sign_posn == 1);
+	p(p->int_n_sign_posn == 1);
+	p(p->n_sign_posn == 1);
+	strfmon_l(col, sizeof(col), es_CO_UTF_8, "%n", -3456.781); 
+	p(strcmp(col, "-$ 3.456,78") == 0);
+}
+
+
+void test_numeric() 
+{
+	struct lconv *p;
+	char col[256];
+	char *nl = setlocale(LC_ALL, "es_CO.UTF-8");
+	locale_t tloc = uselocale(NULL);
+	locale_t es_CO_UTF_8 = duplocale(tloc);
+	float fl;
+	double dl;
+	long double ldl;
+
+	setlocale(LC_ALL, "POSIX");
+	p = localeconv_l(es_CO_UTF_8);
+
+	p(strcmp(p->decimal_point, ",") == 0);
+	p(strcmp(p->thousands_sep, ".") == 0);
+	p(p->grouping[0] == 3);
+
+	snprintf_l(col, sizeof(col), es_CO_UTF_8, "%f", 1000000.01);
+	p(strcmp(col, "1000000,010000") == 0);
+	snprintf_l(col, sizeof(col), es_CO_UTF_8, "%'d", 1000000);
+	printf("col=%s\n", col);
+	p(strcmp(col, "1.000.000") == 0);
+	snprintf_l(col, sizeof(col), es_CO_UTF_8, "%'f", 1000000.01);
+	printf("col=%s\n", col);
+	p(strcmp(col, "1.000.000,010000") == 0);
+	p(strcmp(nl_langinfo(RADIXCHAR), ".") == 0);
+	p(strcmp(nl_langinfo_l(RADIXCHAR, es_CO_UTF_8), ",") == 0);
+	p(strcmp(nl_langinfo(THOUSEP), "") == 0);
+	p(strcmp(nl_langinfo_l(THOUSEP, es_CO_UTF_8), ".") == 0);
+
+	fl = strtof_l("3,1", NULL, es_CO_UTF_8);
+	p(fabs(fl - 3.1) < FLT_EPSILON);
+	dl = strtod_l("3,1", NULL, es_CO_UTF_8);
+	p(fabs(dl - 3.1) < DBL_EPSILON);
+	ldl = strtold_l("3,1", NULL, es_CO_UTF_8);
+	p(fabs(ldl - 3.1) < DBL_EPSILON);
+	sscanf_l("3,1", es_CO_UTF_8, "%f", &fl);
+	printf("fl=%f\n", fl);
+	p(fabs(fl - 3.1) < FLT_EPSILON);
+}
+
 int main()
 {
 	test_xlocale();
 	test_wchar();
 	test_ctype();
 	test_string();
+	test_monetary();
+	test_numeric();
 	
 	return bad != 0;
 }
